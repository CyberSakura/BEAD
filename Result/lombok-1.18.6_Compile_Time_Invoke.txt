All Compile-time Calls invokes JDK:
Found compile-time invoke: <lombok.AccessLevel: lombok.AccessLevel[] values()> => <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
Found compile-time invoke: <lombok.AccessLevel: lombok.AccessLevel[] values()> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <lombok.AccessLevel: lombok.AccessLevel valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <lombok.Lombok: java.lang.RuntimeException sneakyThrow(java.lang.Throwable)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <lombok.Lombok: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <lombok.delombok.ant.Tasks$Delombok: void <init>()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <lombok.delombok.ant.Tasks$Delombok: java.lang.Class shadowLoadClass(java.lang.String)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.delombok.ant.Tasks$Delombok: java.lang.Class shadowLoadClass(java.lang.String)> => <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
Found compile-time invoke: <lombok.delombok.ant.Tasks$Delombok: java.lang.Class shadowLoadClass(java.lang.String)> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found compile-time invoke: <lombok.delombok.ant.Tasks$Delombok: java.lang.Class shadowLoadClass(java.lang.String)> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found compile-time invoke: <lombok.delombok.ant.Tasks$Delombok: java.lang.Class shadowLoadClass(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <lombok.delombok.ant.Tasks$Delombok: java.lang.Class shadowLoadClass(java.lang.String)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.delombok.ant.Tasks$Delombok: java.lang.Class shadowLoadClass(java.lang.String)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.delombok.ant.Tasks$Delombok: void execute()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <lombok.delombok.ant.Tasks$Delombok: void execute()> => <java.lang.reflect.Modifier: boolean isStatic(int)>
Found compile-time invoke: <lombok.delombok.ant.Tasks$Delombok: void execute()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <lombok.delombok.ant.Tasks$Delombok: void execute()> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.delombok.ant.Tasks$Format: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: void init(javax.'annotation'.processing.ProcessingEnvironment)> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: void init(javax.'annotation'.processing.ProcessingEnvironment)> => <java.lang.System: java.lang.String getProperty(java.lang.String)>
Found compile-time invoke: <lombok.javac.apt.Processor: void init(javax.'annotation'.processing.ProcessingEnvironment)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: void init(javax.'annotation'.processing.ProcessingEnvironment)> => <javax.tools.Diagnostic$Kind: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: javax.lang.model.SourceVersion getSupportedSourceVersion()> => <javax.lang.model.SourceVersion: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: javax.lang.model.SourceVersion getSupportedSourceVersion()> => <javax.lang.model.SourceVersion: javax.lang.model.SourceVersion[] values()>
Found compile-time invoke: <lombok.javac.apt.Processor: javax.lang.model.SourceVersion getSupportedSourceVersion()> => <javax.lang.model.SourceVersion: javax.lang.model.SourceVersion[] values()>
Found compile-time invoke: <lombok.launch.AnnotationProcessorHider$AnnotationProcessor: void <init>()> => <javax.'annotation'.processing.AbstractProcessor: void <clinit>()>
Found compile-time invoke: <lombok.launch.AnnotationProcessorHider$AstModificationNotifier: boolean isTypeComplete(javax.lang.model.type.TypeMirror)> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <lombok.launch.AnnotationProcessorHider$AstModificationNotifier: boolean isTypeComplete(javax.lang.model.type.TypeMirror)> => <java.lang.System: java.lang.String getProperty(java.lang.String)>
Found compile-time invoke: <lombok.launch.AnnotationProcessorHider$ClaimingProcessor: javax.lang.model.SourceVersion getSupportedSourceVersion()> => <javax.lang.model.SourceVersion: void <clinit>()>
Found compile-time invoke: <lombok.launch.AnnotationProcessorHider$ClaimingProcessor: javax.lang.model.SourceVersion getSupportedSourceVersion()> => <javax.lang.model.SourceVersion: javax.lang.model.SourceVersion latest()>
Found compile-time invoke: <lombok.launch.Main: void main(java.lang.String[])> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$PatchFixes: java.util.List removeGeneratedNodes(java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$PatchFixes: java.lang.String getRealMethodDeclarationSource(java.lang.String,java.lang.Object,org.eclipse.jdt.core.dom.MethodDeclaration)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$PatchFixes: java.lang.String getRealMethodDeclarationSource(java.lang.String,java.lang.Object,org.eclipse.jdt.core.dom.MethodDeclaration)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$PatchFixes: void addAnnotations(java.util.List,java.lang.StringBuilder)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$PatchFixes: void setIsGeneratedFlag(org.eclipse.jdt.core.dom.ASTNode,org.eclipse.jdt.internal.compiler.ast.ASTNode)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$PatchFixes: void setIsGeneratedFlag(org.eclipse.jdt.core.dom.ASTNode,org.eclipse.jdt.internal.compiler.ast.ASTNode)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <lombok.launch.PatchFixesHider$PatchFixes: void setIsGeneratedFlagForName(org.eclipse.jdt.core.dom.Name,java.lang.Object)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$PatchFixes: void setIsGeneratedFlagForName(org.eclipse.jdt.core.dom.Name,java.lang.Object)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <lombok.launch.PatchFixesHider$PatchFixes: org.eclipse.jdt.internal.core.dom.rewrite.RewriteEvent[] listRewriteHandleGeneratedMethods(org.eclipse.jdt.internal.core.dom.rewrite.RewriteEvent)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$PatchFixes: org.eclipse.jdt.core.IMethod[] removeGeneratedMethods(org.eclipse.jdt.core.IMethod[])> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$PatchFixes: org.eclipse.jdt.core.search.SearchMatch[] removeGenerated(org.eclipse.jdt.core.search.SearchMatch[])> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$PatchFixes: org.eclipse.jdt.internal.compiler.ast.Annotation[] convertAnnotations(org.eclipse.jdt.internal.compiler.ast.Annotation[],org.eclipse.jdt.core.IAnnotatable)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$Util: java.lang.Class shadowLoadClass(java.lang.String)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$Util: java.lang.Class shadowLoadClass(java.lang.String)> => <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
Found compile-time invoke: <lombok.launch.PatchFixesHider$Util: java.lang.Class shadowLoadClass(java.lang.String)> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found compile-time invoke: <lombok.launch.PatchFixesHider$Util: java.lang.Class shadowLoadClass(java.lang.String)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.util.Enumeration getResources(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.util.Enumeration getResources(java.lang.String)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.util.Enumeration getResources(java.lang.String)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> => <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> => <java.lang.ClassLoader: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> => <java.lang.ClassLoader: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> => <java.lang.ClassNotFoundException: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> => <java.lang.ClassNotFoundException: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.Class loadClass(java.lang.String,boolean)> => <java.lang.ClassLoader: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void addOverrideJarDir(java.lang.String)> => <java.io.File: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void addOverrideClasspathEntry(java.lang.String)> => <java.io.File: void <clinit>()>
Found compile-time invoke: <lombok.launch.Agent: void runLauncher(java.lang.String,java.lang.instrument.Instrumentation,boolean)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.launch.Agent: void runLauncher(java.lang.String,java.lang.instrument.Instrumentation,boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <lombok.launch.Agent: void runLauncher(java.lang.String,java.lang.instrument.Instrumentation,boolean)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <lombok.launch.AnnotationProcessorHider$AnnotationProcessor: javax.'annotation'.processing.AbstractProcessor createWrappedInstance()> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.launch.AnnotationProcessorHider$AnnotationProcessor: javax.'annotation'.processing.AbstractProcessor createWrappedInstance()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <lombok.launch.Main: java.lang.ClassLoader getShadowClassLoader()> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <lombok.launch.Main: java.lang.ClassLoader getShadowClassLoader()> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <lombok.launch.Main: java.lang.ClassLoader getShadowClassLoader()> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <lombok.launch.Main: java.lang.ClassLoader getShadowClassLoader()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <lombok.launch.Main: java.lang.ClassLoader getShadowClassLoader()> => <java.lang.ClassLoader: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$Delegate: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$ExtensionMethod: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$LombokDeps: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$Transform: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$Util: java.lang.RuntimeException sneakyThrow(java.lang.Throwable)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$Val: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.launch.PatchFixesHider$ValPortal: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <clinit>()> => <java.util.concurrent.ConcurrentHashMap: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <clinit>()> => <java.util.WeakHashMap: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <clinit>()> => <java.lang.ClassLoader: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: java.lang.String report(javax.'annotation'.processing.ProcessingEnvironment)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.AnnotationProcessorHider$AnnotationProcessor: void disableJava9SillyWarning()> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <lombok.launch.AnnotationProcessorHider$AnnotationProcessor: void disableJava9SillyWarning()> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.net.URL getResourceFromLocation(java.lang.String,java.lang.String,java.io.File)> => <java.io.File: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.net.URL getResourceFromLocation(java.lang.String,java.lang.String,java.io.File)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.net.URL getResourceFromLocation(java.lang.String,java.lang.String,java.io.File)> => <java.net.URI: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.net.URL getResourceFromLocation(java.lang.String,java.lang.String,java.io.File)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.net.URL getResourceFromLocation(java.lang.String,java.lang.String,java.io.File)> => <java.net.URI: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.net.URL getResourceFromLocation(java.lang.String,java.lang.String,java.io.File)> => <java.io.File: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.net.URL getResource_(java.lang.String,boolean)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.net.URL getResource_(java.lang.String,boolean)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.net.URL getResource_(java.lang.String,boolean)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.lang.System: java.lang.String getProperty(java.lang.String)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.io.File: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.io.File: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.io.File: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.io.File: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.lang.ClassLoader: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: void <init>(java.lang.ClassLoader,java.lang.String,java.lang.String,java.util.List,java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.String urlDecode(java.lang.String)> => <java.net.URLDecoder: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.String urlDecode(java.lang.String)> => <java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.lang.String urlDecode(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: java.lang.String collectData(javax.'annotation'.processing.ProcessingEnvironment)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: java.lang.String writeFile(java.lang.String)> => <java.io.File: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: java.lang.String writeFile(java.lang.String)> => <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>
Found compile-time invoke: <lombok.javac.apt.Processor: java.lang.String writeFile(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: java.lang.String writeFile(java.lang.String)> => <java.io.FileOutputStream: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.util.Set getOrMakeJarListing(java.lang.String)> => <java.lang.ClassLoader: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.util.Set getOrMakeJarListing(java.lang.String)> => <java.lang.ClassLoader: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.util.Set getOrMakeJarListing(java.lang.String)> => <java.lang.ClassLoader: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffix(java.lang.String,java.lang.String,java.lang.String)> => <java.lang.ClassLoader: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: void listOptions(java.lang.StringBuilder,javax.'annotation'.processing.ProcessingEnvironment)> => <com.sun.tools.javac.util.Options: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: void listOptions(java.lang.StringBuilder,javax.'annotation'.processing.ProcessingEnvironment)> => <com.sun.tools.javac.util.Options: com.sun.tools.javac.util.Options instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <lombok.javac.apt.Processor: void listOptions(java.lang.StringBuilder,javax.'annotation'.processing.ProcessingEnvironment)> => <javax.'annotation'.processing.AbstractProcessor: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: void findServices(java.lang.StringBuilder,javax.'annotation'.processing.Filer)> => <javax.tools.StandardLocation: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: void addStacktrace(java.lang.StringBuilder)> => <java.lang.Thread: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: void addStacktrace(java.lang.StringBuilder)> => <java.lang.Thread: java.lang.Thread currentThread()>
Found compile-time invoke: <lombok.javac.apt.Processor: void listProperties(java.lang.StringBuilder)> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: void listProperties(java.lang.StringBuilder)> => <java.lang.System: java.lang.String getProperty(java.lang.String)>
Found compile-time invoke: <lombok.javac.apt.Processor: void listProperties(java.lang.StringBuilder)> => <java.util.Collections: void sort(java.util.List)>
Found compile-time invoke: <lombok.javac.apt.Processor: void listProperties(java.lang.StringBuilder)> => <java.lang.System: java.util.Properties getProperties()>
Found compile-time invoke: <lombok.javac.apt.Processor: void listProperties(java.lang.StringBuilder)> => <javax.'annotation'.processing.AbstractProcessor: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: void listProperties(java.lang.StringBuilder)> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: void listProperties(java.lang.StringBuilder)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: void listProperties(java.lang.StringBuilder)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: void string(java.lang.StringBuilder,java.lang.String)> => <javax.'annotation'.processing.AbstractProcessor: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: java.lang.String escape(char)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: java.lang.String escape(char)> => <java.lang.String: java.lang.String valueOf(char)>
Found compile-time invoke: <lombok.javac.apt.Processor: java.lang.String escape(char)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <lombok.javac.apt.Processor: java.lang.String escape(char)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <lombok.javac.apt.Processor: java.lang.String escape(char)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <lombok.javac.apt.Processor: java.lang.String escape(char)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.util.Set getJarMemberSet(java.lang.String)> => <java.util.jar.JarFile: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.util.Set getJarMemberSet(java.lang.String)> => <java.util.Collections: java.util.Set emptySet()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.util.Set getJarMemberSet(java.lang.String)> => <java.lang.Integer: int highestOneBit(int)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.util.Set getJarMemberSet(java.lang.String)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.util.Set getJarMemberSet(java.lang.String)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.util.Set getJarMemberSet(java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: java.util.Set getJarMemberSet(java.lang.String)> => <java.util.zip.ZipFile: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixFileBased(java.lang.String,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixFileBased(java.lang.String,java.lang.String)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixFileBased(java.lang.String,java.lang.String)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixFileBased(java.lang.String,java.lang.String)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixFileBased(java.lang.String,java.lang.String)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixFileBased(java.lang.String,java.lang.String)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixFileBased(java.lang.String,java.lang.String)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixFileBased(java.lang.String,java.lang.String)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixFileBased(java.lang.String,java.lang.String)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixFileBased(java.lang.String,java.lang.String)> => <java.lang.ClassLoader: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixFileBased(java.lang.String,java.lang.String)> => <java.io.FileInputStream: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixFileBased(java.lang.String,java.lang.String)> => <java.io.File: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixFileBased(java.lang.String,java.lang.String)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixJarBased(java.lang.String,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixJarBased(java.lang.String,java.lang.String)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixJarBased(java.lang.String,java.lang.String)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixJarBased(java.lang.String,java.lang.String)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixJarBased(java.lang.String,java.lang.String)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixJarBased(java.lang.String,java.lang.String)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixJarBased(java.lang.String,java.lang.String)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixJarBased(java.lang.String,java.lang.String)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixJarBased(java.lang.String,java.lang.String)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixJarBased(java.lang.String,java.lang.String)> => <java.lang.ClassLoader: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixJarBased(java.lang.String,java.lang.String)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixJarBased(java.lang.String,java.lang.String)> => <java.io.FileInputStream: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixJarBased(java.lang.String,java.lang.String)> => <java.lang.ClassLoader: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean isPartOfShadowSuffixJarBased(java.lang.String,java.lang.String)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <lombok.launch.ShadowClassLoader: boolean sclFileContainsSuffix(java.io.InputStream,java.lang.String)> => <java.io.BufferedReader: void <clinit>()>

Total compile-time calls: 183
