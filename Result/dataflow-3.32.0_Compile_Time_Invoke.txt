All Compile-time Calls invokes JDK:
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AbstractAnalysis$Worklist: void <init>(org.checkerframework.dataflow.analysis.Analysis$Direction)> => <java.util.IdentityHashMap: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AbstractAnalysis$Worklist: void <init>(org.checkerframework.dataflow.analysis.Analysis$Direction)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AbstractAnalysis$Worklist: void process(org.checkerframework.dataflow.cfg.ControlFlowGraph)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AbstractAnalysis$Worklist: void process(org.checkerframework.dataflow.cfg.ControlFlowGraph)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AbstractAnalysis$Worklist: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AbstractAnalysis: org.checkerframework.dataflow.analysis.AbstractValue getValue(org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AbstractAnalysis: org.checkerframework.dataflow.analysis.AbstractValue getValue(org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.Analysis$Direction: org.checkerframework.dataflow.analysis.Analysis$Direction valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.Analysis$BeforeOrAfter: org.checkerframework.dataflow.analysis.Analysis$BeforeOrAfter valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.Store$Kind: org.checkerframework.dataflow.analysis.Store$Kind valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.Store$FlowRule: org.checkerframework.dataflow.analysis.Store$FlowRule valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.TransferInput: org.checkerframework.dataflow.analysis.Store getRegularStore()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.TransferInput: org.checkerframework.dataflow.analysis.Store getThenStore()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.TransferInput: org.checkerframework.dataflow.analysis.Store getElseStore()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.TransferInput: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.TransferInput: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.TransferInput: java.lang.String toString()> => <java.lang.System: java.lang.String lineSeparator()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.TransferInput: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.TransferInput: java.lang.String toString()> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: void <init>(java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.IdentityHashMap,java.util.HashMap)> => <java.util.IdentityHashMap: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: void <init>(java.util.Map)> => <java.util.IdentityHashMap: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: com.sun.source.tree.BinaryTree getPostfixBinaryTree(com.sun.source.tree.UnaryTree)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: org.checkerframework.dataflow.analysis.Store getStoreBefore(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: org.checkerframework.dataflow.analysis.Store getStoreBefore(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: org.checkerframework.dataflow.analysis.Store getStoreAfter(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: org.checkerframework.dataflow.analysis.Store getStoreAfter(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: java.lang.String toStringDebug()> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: java.lang.String toStringDebug()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: java.lang.String toStringDebug()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: java.lang.String toStringDebug()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: java.lang.String toStringDebug()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: java.lang.String toStringDebug()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: java.lang.String nodeValuesToString(java.util.Map)> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: java.lang.String nodeValuesToString(java.util.Map)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: java.lang.String nodeValuesToString(java.util.Map)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: java.lang.String nodeValuesToString(java.util.Map)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: java.lang.String treeLookupToString(java.util.Map)> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: java.lang.String treeLookupToString(java.util.Map)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: java.lang.String treeLookupToString(java.util.Map)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: java.lang.String treeLookupToString(java.util.Map)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: void <init>()> => <java.util.IdentityHashMap: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: void performAnalysis(org.checkerframework.dataflow.cfg.ControlFlowGraph)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: void performAnalysis(org.checkerframework.dataflow.cfg.ControlFlowGraph)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: org.checkerframework.dataflow.analysis.Store runAnalysisFor(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Analysis$BeforeOrAfter,org.checkerframework.dataflow.analysis.TransferInput,java.util.IdentityHashMap,java.util.Map)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: org.checkerframework.dataflow.analysis.Store runAnalysisFor(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Analysis$BeforeOrAfter,org.checkerframework.dataflow.analysis.TransferInput,java.util.IdentityHashMap,java.util.Map)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: org.checkerframework.dataflow.analysis.Store runAnalysisFor(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Analysis$BeforeOrAfter,org.checkerframework.dataflow.analysis.TransferInput,java.util.IdentityHashMap,java.util.Map)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: org.checkerframework.dataflow.analysis.Store runAnalysisFor(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Analysis$BeforeOrAfter,org.checkerframework.dataflow.analysis.TransferInput,java.util.IdentityHashMap,java.util.Map)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ConditionalTransferResult: java.lang.String toString()> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ConditionalTransferResult: java.lang.String toString()> => <java.lang.System: java.lang.String lineSeparator()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ConditionalTransferResult: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ConditionalTransferResult: java.lang.String toString()> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void <init>(int)> => <java.util.IdentityHashMap: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void <init>(int)> => <java.util.IdentityHashMap: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void performAnalysis(org.checkerframework.dataflow.cfg.ControlFlowGraph)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void performAnalysis(org.checkerframework.dataflow.cfg.ControlFlowGraph)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void performAnalysisBlock(org.checkerframework.dataflow.cfg.block.Block)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: org.checkerframework.dataflow.analysis.Store runAnalysisFor(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Analysis$BeforeOrAfter,org.checkerframework.dataflow.analysis.TransferInput,java.util.IdentityHashMap,java.util.Map)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: org.checkerframework.dataflow.analysis.Store runAnalysisFor(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Analysis$BeforeOrAfter,org.checkerframework.dataflow.analysis.TransferInput,java.util.IdentityHashMap,java.util.Map)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: org.checkerframework.dataflow.analysis.Store runAnalysisFor(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Analysis$BeforeOrAfter,org.checkerframework.dataflow.analysis.TransferInput,java.util.IdentityHashMap,java.util.Map)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: org.checkerframework.dataflow.analysis.Store runAnalysisFor(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Analysis$BeforeOrAfter,org.checkerframework.dataflow.analysis.TransferInput,java.util.IdentityHashMap,java.util.Map)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.RegularTransferResult: java.lang.String toString()> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.RegularTransferResult: java.lang.String toString()> => <java.lang.System: java.lang.String lineSeparator()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.RegularTransferResult: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.RegularTransferResult: java.lang.String toString()> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.Node: java.lang.String toStringDebug()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.Node: java.lang.String toStringDebug()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.Node: java.lang.String nodeCollectionToString(java.util.Collection)> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ReturnNode: void <init>(com.sun.source.tree.ReturnTree,org.checkerframework.dataflow.cfg.node.Node,javax.lang.model.util.Types)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ReturnNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ReturnNode: boolean equals(java.lang.Object)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ReturnNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ReturnNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ReturnNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ReturnNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ReturnNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ValueLiteralNode: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ValueLiteralNode: java.lang.String toString()> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ValueLiteralNode: boolean equals(java.lang.Object)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ValueLiteralNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ValueLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ValueLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.UnaryOperationNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.UnaryOperationNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BinaryOperationNode: java.util.Collection getOperands()> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BinaryOperationNode: java.util.Collection getOperands()> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FieldAccessNode: void <init>(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FieldAccessNode: void <init>(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FieldAccessNode: void <init>(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FieldAccessNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FieldAccessNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FieldAccessNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FieldAccessNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LocalVariableNode: void <init>(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LocalVariableNode: void <init>(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LocalVariableNode: javax.lang.model.element.VariableElement getElement()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LocalVariableNode: javax.lang.model.element.VariableElement getElement()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LocalVariableNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LocalVariableNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LocalVariableNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ArrayAccessNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ArrayAccessNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ArrayAccessNode: java.util.Collection getOperands()> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ArrayAccessNode: java.util.Collection getOperands()> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MethodInvocationNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MethodInvocationNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MethodInvocationNode: java.util.Collection getOperands()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MethodAccessNode: void <init>(com.sun.source.tree.ExpressionTree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MethodAccessNode: void <init>(com.sun.source.tree.ExpressionTree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MethodAccessNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MethodAccessNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MethodAccessNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MethodAccessNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ShortLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ShortLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ShortLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ShortLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.IntegerLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.IntegerLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.IntegerLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.IntegerLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LongLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LongLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LongLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LongLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FloatLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FloatLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FloatLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FloatLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.DoubleLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.DoubleLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.DoubleLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.DoubleLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BooleanLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BooleanLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BooleanLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BooleanLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.CharacterLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.CharacterLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.CharacterLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.CharacterLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringLiteralNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NullLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NullLiteralNode: void <init>(com.sun.source.tree.LiteralTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NullLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NullLiteralNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalMinusNode: void <init>(com.sun.source.tree.UnaryTree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalMinusNode: void <init>(com.sun.source.tree.UnaryTree,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalMinusNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalMinusNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalPlusNode: void <init>(com.sun.source.tree.UnaryTree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalPlusNode: void <init>(com.sun.source.tree.UnaryTree,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalPlusNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalPlusNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseComplementNode: void <init>(com.sun.source.tree.UnaryTree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseComplementNode: void <init>(com.sun.source.tree.UnaryTree,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseComplementNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseComplementNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NullChkNode: void <init>(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NullChkNode: void <init>(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NullChkNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NullChkNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NullChkNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NullChkNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringConcatenateNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringConcatenateNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringConcatenateNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringConcatenateNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalAdditionNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalAdditionNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalAdditionNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalAdditionNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalSubtractionNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalSubtractionNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalSubtractionNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalSubtractionNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalMultiplicationNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalMultiplicationNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalMultiplicationNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NumericalMultiplicationNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.IntegerDivisionNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.IntegerDivisionNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.IntegerDivisionNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.IntegerDivisionNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FloatingDivisionNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FloatingDivisionNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FloatingDivisionNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FloatingDivisionNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.IntegerRemainderNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.IntegerRemainderNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.IntegerRemainderNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.IntegerRemainderNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FloatingRemainderNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FloatingRemainderNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FloatingRemainderNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FloatingRemainderNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LeftShiftNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LeftShiftNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LeftShiftNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LeftShiftNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SignedRightShiftNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SignedRightShiftNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SignedRightShiftNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SignedRightShiftNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.UnsignedRightShiftNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.UnsignedRightShiftNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.UnsignedRightShiftNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.UnsignedRightShiftNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseAndNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseAndNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseAndNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseAndNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseOrNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseOrNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseOrNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseOrNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseXorNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseXorNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseXorNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.BitwiseXorNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringConcatenateAssignmentNode: void <init>(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringConcatenateAssignmentNode: void <init>(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringConcatenateAssignmentNode: java.util.Collection getOperands()> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringConcatenateAssignmentNode: java.util.Collection getOperands()> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringConcatenateAssignmentNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringConcatenateAssignmentNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LessThanNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LessThanNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LessThanNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LessThanNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LessThanOrEqualNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LessThanOrEqualNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LessThanOrEqualNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LessThanOrEqualNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.GreaterThanNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.GreaterThanNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.GreaterThanNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.GreaterThanNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.GreaterThanOrEqualNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.GreaterThanOrEqualNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.GreaterThanOrEqualNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.GreaterThanOrEqualNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.EqualToNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.EqualToNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.EqualToNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.EqualToNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NotEqualNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NotEqualNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NotEqualNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NotEqualNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ConditionalAndNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ConditionalAndNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ConditionalAndNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ConditionalAndNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ConditionalOrNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ConditionalOrNode: void <init>(com.sun.source.tree.BinaryTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ConditionalOrNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ConditionalOrNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ConditionalNotNode: void <init>(com.sun.source.tree.UnaryTree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ConditionalNotNode: void <init>(com.sun.source.tree.UnaryTree,org.checkerframework.dataflow.cfg.node.Node)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ConditionalNotNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ConditionalNotNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.TernaryExpressionNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.TernaryExpressionNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.TernaryExpressionNode: java.util.Collection getOperands()> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.TernaryExpressionNode: java.util.Collection getOperands()> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SwitchExpressionNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SwitchExpressionNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.Set singleton(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SwitchExpressionNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SwitchExpressionNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.AssignmentNode: void <init>(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.AssignmentNode: void <init>(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.AssignmentNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.AssignmentNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.AssignmentNode: java.util.Collection getOperands()> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.AssignmentNode: java.util.Collection getOperands()> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.VariableDeclarationNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.VariableDeclarationNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.VariableDeclarationNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ThisNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ThisNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ThisNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ExplicitThisNode: void <init>(com.sun.source.tree.IdentifierTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SuperNode: void <init>(com.sun.source.tree.IdentifierTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SuperNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SuperNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SuperNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LambdaResultExpressionNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LambdaResultExpressionNode: boolean equals(java.lang.Object)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LambdaResultExpressionNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LambdaResultExpressionNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.LambdaResultExpressionNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringConversionNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringConversionNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringConversionNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.StringConversionNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.WideningConversionNode: void <init>(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node,javax.lang.model.type.TypeMirror)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.WideningConversionNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.WideningConversionNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.WideningConversionNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.WideningConversionNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NarrowingConversionNode: void <init>(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node,javax.lang.model.type.TypeMirror)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NarrowingConversionNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NarrowingConversionNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NarrowingConversionNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.NarrowingConversionNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.InstanceOfNode: void <init>(com.sun.source.tree.InstanceOfTree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.LocalVariableNode,javax.lang.model.type.TypeMirror,javax.lang.model.util.Types)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.InstanceOfNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.InstanceOfNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.InstanceOfNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.InstanceOfNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.TypeCastNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.TypeCastNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.TypeCastNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.TypeCastNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SynchronizedNode: void <init>(com.sun.source.tree.SynchronizedTree,org.checkerframework.dataflow.cfg.node.Node,boolean,javax.lang.model.util.Types)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SynchronizedNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SynchronizedNode: boolean equals(java.lang.Object)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SynchronizedNode: int hashCode()> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SynchronizedNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SynchronizedNode: int hashCode()> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SynchronizedNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.SynchronizedNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.AssertionErrorNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.AssertionErrorNode: boolean equals(java.lang.Object)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.AssertionErrorNode: boolean equals(java.lang.Object)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.AssertionErrorNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.AssertionErrorNode: java.util.Collection getOperands()> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.AssertionErrorNode: java.util.Collection getOperands()> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ThrowNode: void <init>(com.sun.source.tree.ThrowTree,org.checkerframework.dataflow.cfg.node.Node,javax.lang.model.util.Types)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ThrowNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ThrowNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ThrowNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ThrowNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.CaseNode: void <init>(com.sun.source.tree.CaseTree,org.checkerframework.dataflow.cfg.node.AssignmentNode,java.util.List,javax.lang.model.util.Types)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.CaseNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.CaseNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.CaseNode: java.util.Collection getOperands()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ObjectCreationNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ObjectCreationNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ObjectCreationNode: java.util.Collection getOperands()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FunctionalInterfaceNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FunctionalInterfaceNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FunctionalInterfaceNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FunctionalInterfaceNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.FunctionalInterfaceNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ArrayCreationNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ArrayCreationNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ArrayCreationNode: java.util.Collection getOperands()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ArrayTypeNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ArrayTypeNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ArrayTypeNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.PrimitiveTypeNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.PrimitiveTypeNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.PrimitiveTypeNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassNameNode: void <init>(com.sun.source.tree.IdentifierTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassNameNode: void <init>(com.sun.source.tree.IdentifierTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassNameNode: void <init>(com.sun.source.tree.IdentifierTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassNameNode: void <init>(com.sun.source.tree.IdentifierTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassNameNode: void <init>(com.sun.source.tree.ClassTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassNameNode: void <init>(com.sun.source.tree.MemberSelectTree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassNameNode: void <init>(com.sun.source.tree.MemberSelectTree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassNameNode: void <init>(javax.lang.model.type.TypeMirror,javax.lang.model.element.Element)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassNameNode: boolean equals(java.lang.Object)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassNameNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassNameNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassNameNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.Set singleton(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassNameNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassNameNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.PackageNameNode: void <init>(com.sun.source.tree.IdentifierTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.PackageNameNode: void <init>(com.sun.source.tree.MemberSelectTree,org.checkerframework.dataflow.cfg.node.PackageNameNode)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.PackageNameNode: boolean equals(java.lang.Object)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.PackageNameNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.PackageNameNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.PackageNameNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.Set singleton(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.PackageNameNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.PackageNameNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ParameterizedTypeNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ParameterizedTypeNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ParameterizedTypeNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MarkerNode: void <init>(com.sun.source.tree.Tree,java.lang.String,javax.lang.model.util.Types)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MarkerNode: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MarkerNode: boolean equals(java.lang.Object)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MarkerNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MarkerNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.MarkerNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassDeclarationNode: boolean equals(java.lang.Object)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassDeclarationNode: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassDeclarationNode: java.util.Collection getOperands()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.ClassDeclarationNode: java.util.Collection getOperands()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.util.Set getAllBlocks()> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.util.List getAllNodes()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.util.List getDepthFirstOrderedBlocks()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.util.List getDepthFirstOrderedBlocks()> => <java.util.Collections: void reverse(java.util.List)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.util.List getDepthFirstOrderedBlocks()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.util.List getDepthFirstOrderedBlocks()> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.lang.String toString()> => <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.lang.String toString()> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.lang.String toString()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.lang.String toString()> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.lang.String toStringDebug()> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.lang.String toStringDebug()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.lang.String toStringDebug()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: java.lang.String toStringDebug()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.Block$BlockType: org.checkerframework.dataflow.cfg.block.Block$BlockType valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.SpecialBlock$SpecialBlockType: org.checkerframework.dataflow.cfg.block.SpecialBlock$SpecialBlockType valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.SpecialBlockImpl: java.util.List getNodes()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.SpecialBlockImpl: java.util.List getNodes()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.SpecialBlockImpl: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.SingleSuccessorBlockImpl: java.util.List getSuccessors()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.SingleSuccessorBlockImpl: java.util.List getSuccessors()> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.SingleSuccessorBlockImpl: java.util.List getSuccessors()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.SingleSuccessorBlockImpl: java.util.List getSuccessors()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.BlockImpl: java.util.List getPredecessors()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.ConditionalBlockImpl: java.util.List getSuccessors()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.ConditionalBlockImpl: java.util.List getNodes()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.ConditionalBlockImpl: java.util.List getNodes()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.ExceptionBlockImpl: java.util.List getNodes()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.ExceptionBlockImpl: java.util.List getNodes()> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.ExceptionBlockImpl: java.util.Map getExceptionalSuccessors()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.ExceptionBlockImpl: java.util.Map getExceptionalSuccessors()> => <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.ExceptionBlockImpl: java.util.Map getExceptionalSuccessors()> => <java.util.Collections: java.util.Map emptyMap()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.ExceptionBlockImpl: java.util.Map getExceptionalSuccessors()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.ExceptionBlockImpl: java.util.List getSuccessors()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.ExceptionBlockImpl: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.RegularBlockImpl: void <init>()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.RegularBlockImpl: java.util.List getNodes()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.RegularBlockImpl: java.util.List getNodes()> => <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.RegularBlockImpl: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.UnderlyingAST$Kind: org.checkerframework.dataflow.cfg.UnderlyingAST$Kind valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer$VisualizeWhere: org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer$VisualizeWhere valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.lang.String visualizeBlockNode(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void main(java.lang.String[])> => <java.lang.System: void exit(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void main(java.lang.String[])> => <java.lang.System: void exit(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void main(java.lang.String[])> => <java.lang.System: void exit(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void main(java.lang.String[])> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void main(java.lang.String[])> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void main(java.lang.String[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void main(java.lang.String[])> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void main(java.lang.String[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void main(java.lang.String[])> => <java.io.File: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void main(java.lang.String[])> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void generateDOTofCFG(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void generateDOTofCFG(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void generateDOTofCFG(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: java.util.Map generateStringOfCFG(java.lang.String,java.lang.String,java.lang.String,boolean,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: java.util.Map generateStringOfCFG(java.lang.String,java.lang.String,java.lang.String,boolean,org.checkerframework.dataflow.analysis.Analysis)> => <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: java.util.Map generateStringOfCFG(java.lang.String,java.lang.String,java.lang.String,boolean,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: java.util.Map generateStringOfCFG(java.lang.String,java.lang.String,java.lang.String,boolean,org.checkerframework.dataflow.analysis.Analysis)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.util.Map visualize(org.checkerframework.dataflow.cfg.ControlFlowGraph,org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis)> => <java.io.BufferedWriter: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.util.Map visualize(org.checkerframework.dataflow.cfg.ControlFlowGraph,org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis)> => <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.util.Map visualize(org.checkerframework.dataflow.cfg.ControlFlowGraph,org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.util.Map visualize(org.checkerframework.dataflow.cfg.ControlFlowGraph,org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String visualizeNodes(java.util.Set,org.checkerframework.dataflow.cfg.ControlFlowGraph,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String visualizeNodes(java.util.Set,org.checkerframework.dataflow.cfg.ControlFlowGraph,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.System: java.lang.String lineSeparator()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String visualizeNodes(java.util.Set,org.checkerframework.dataflow.cfg.ControlFlowGraph,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String visualizeStoreThisVal(org.checkerframework.dataflow.analysis.AbstractValue)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String visualizeStoreLocalVar(org.checkerframework.dataflow.expression.LocalVariable,org.checkerframework.dataflow.analysis.AbstractValue)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String visualizeStoreFieldVal(org.checkerframework.dataflow.expression.FieldAccess,org.checkerframework.dataflow.analysis.AbstractValue)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String visualizeStoreArrayVal(org.checkerframework.dataflow.expression.ArrayAccess,org.checkerframework.dataflow.analysis.AbstractValue)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String visualizeStoreMethodVals(org.checkerframework.dataflow.expression.MethodCall,org.checkerframework.dataflow.analysis.AbstractValue)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String visualizeStoreClassVals(org.checkerframework.dataflow.expression.ClassName,org.checkerframework.dataflow.analysis.AbstractValue)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String visualizeStoreKeyVal(java.lang.String,java.lang.Object)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: void shutdown()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: void shutdown()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: void shutdown()> => <java.io.BufferedWriter: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.StringCFGVisualizer: java.util.Map visualize(org.checkerframework.dataflow.cfg.ControlFlowGraph,org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.StringCFGVisualizer: java.util.Map visualize(org.checkerframework.dataflow.cfg.ControlFlowGraph,org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis)> => <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.StringCFGVisualizer: java.lang.String visualizeNodes(java.util.Set,org.checkerframework.dataflow.cfg.ControlFlowGraph,org.checkerframework.dataflow.analysis.Analysis)> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.StringCFGVisualizer: java.lang.String visualizeNodes(java.util.Set,org.checkerframework.dataflow.cfg.ControlFlowGraph,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.StringCFGVisualizer: java.lang.String visualizeConditionalBlock(org.checkerframework.dataflow.cfg.block.ConditionalBlock)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.StringCFGVisualizer: java.lang.String visualizeStoreThisVal(org.checkerframework.dataflow.analysis.AbstractValue)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.StringCFGVisualizer: java.lang.String visualizeStoreLocalVar(org.checkerframework.dataflow.expression.LocalVariable,org.checkerframework.dataflow.analysis.AbstractValue)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.StringCFGVisualizer: java.lang.String visualizeStoreFieldVal(org.checkerframework.dataflow.expression.FieldAccess,org.checkerframework.dataflow.analysis.AbstractValue)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.StringCFGVisualizer: java.lang.String visualizeStoreArrayVal(org.checkerframework.dataflow.expression.ArrayAccess,org.checkerframework.dataflow.analysis.AbstractValue)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.StringCFGVisualizer: java.lang.String visualizeStoreMethodVals(org.checkerframework.dataflow.expression.MethodCall,org.checkerframework.dataflow.analysis.AbstractValue)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.StringCFGVisualizer: java.lang.String visualizeStoreClassVals(org.checkerframework.dataflow.expression.ClassName,org.checkerframework.dataflow.analysis.AbstractValue)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.StringCFGVisualizer: java.lang.String visualizeStoreKeyVal(java.lang.String,java.lang.Object)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.CFGProcessor$1: java.lang.Void visitMethod(com.sun.source.tree.MethodTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.CFGProcessor: javax.lang.model.SourceVersion getSupportedSourceVersion()> => <javax.lang.model.SourceVersion: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.CFGProcessor: javax.lang.model.SourceVersion getSupportedSourceVersion()> => <javax.lang.model.SourceVersion: javax.lang.model.SourceVersion latestSupported()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGBuilder: java.lang.String extendedNodeCollectionToStringDebug(java.util.Collection)> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.ExtendedNode$ExtendedNodeType: org.checkerframework.dataflow.cfg.builder.ExtendedNode$ExtendedNodeType valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$SwitchBuilder: org.checkerframework.dataflow.cfg.node.SwitchExpressionNode build()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$SwitchBuilder: org.checkerframework.dataflow.cfg.node.SwitchExpressionNode build()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void <init>(org.checkerframework.javacutil.trees.TreeBuilder,org.checkerframework.javacutil.AnnotationProvider,boolean,boolean,javax.'annotation'.processing.ProcessingEnvironment)> => <com.sun.source.util.Trees: com.sun.source.util.Trees instance(javax.'annotation'.processing.ProcessingEnvironment)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void <init>(org.checkerframework.javacutil.trees.TreeBuilder,org.checkerframework.javacutil.AnnotationProvider,boolean,boolean,javax.'annotation'.processing.ProcessingEnvironment)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void <init>(org.checkerframework.javacutil.trees.TreeBuilder,org.checkerframework.javacutil.AnnotationProvider,boolean,boolean,javax.'annotation'.processing.ProcessingEnvironment)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void <init>(org.checkerframework.javacutil.trees.TreeBuilder,org.checkerframework.javacutil.AnnotationProvider,boolean,boolean,javax.'annotation'.processing.ProcessingEnvironment)> => <java.util.IdentityHashMap: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void <init>(org.checkerframework.javacutil.trees.TreeBuilder,org.checkerframework.javacutil.AnnotationProvider,boolean,boolean,javax.'annotation'.processing.ProcessingEnvironment)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.builder.PhaseOneResult process(com.sun.source.util.TreePath,org.checkerframework.dataflow.cfg.UnderlyingAST)> => <com.sun.source.tree.LambdaExpressionTree$BodyKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.builder.PhaseOneResult process(com.sun.source.tree.CompilationUnitTree,org.checkerframework.dataflow.cfg.UnderlyingAST)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.MethodInvocationNode visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.MethodInvocationNode visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.MethodInvocationNode visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.MethodInvocationNode visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.MethodInvocationNode visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitCompoundAssignment(com.sun.source.tree.CompoundAssignmentTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitCompoundAssignment(com.sun.source.tree.CompoundAssignmentTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitCompoundAssignment(com.sun.source.tree.CompoundAssignmentTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitCompoundAssignment(com.sun.source.tree.CompoundAssignmentTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitCompoundAssignment(com.sun.source.tree.CompoundAssignmentTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitCompoundAssignment(com.sun.source.tree.CompoundAssignmentTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitCompoundAssignment(com.sun.source.tree.CompoundAssignmentTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitCompoundAssignment(com.sun.source.tree.CompoundAssignmentTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitCompoundAssignment(com.sun.source.tree.CompoundAssignmentTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitCompoundAssignment(com.sun.source.tree.CompoundAssignmentTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBreak(com.sun.source.tree.BreakTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitBreak(com.sun.source.tree.BreakTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitCase(com.sun.source.tree.CaseTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitContinue(com.sun.source.tree.ContinueTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitContinue(com.sun.source.tree.ContinueTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitDoWhileLoop(com.sun.source.tree.DoWhileLoopTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitDoWhileLoop(com.sun.source.tree.DoWhileLoopTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitForLoop(com.sun.source.tree.ForLoopTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitIdentifier(com.sun.source.tree.IdentifierTree,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitLabeledStatement(com.sun.source.tree.LabeledStatementTree,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitLiteral(com.sun.source.tree.LiteralTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitLiteral(com.sun.source.tree.LiteralTree,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitNewArray(com.sun.source.tree.NewArrayTree,java.lang.Void)> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitNewArray(com.sun.source.tree.NewArrayTree,java.lang.Void)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitNewArray(com.sun.source.tree.NewArrayTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitMemberSelect(com.sun.source.tree.MemberSelectTree,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitMemberSelect(com.sun.source.tree.MemberSelectTree,java.lang.Void)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitUnary(com.sun.source.tree.UnaryTree,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitUnary(com.sun.source.tree.UnaryTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitUnary(com.sun.source.tree.UnaryTree,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitVariable(com.sun.source.tree.VariableTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitVariable(com.sun.source.tree.VariableTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitWhileLoop(com.sun.source.tree.WhileLoopTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node visitWhileLoop(com.sun.source.tree.WhileLoopTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryStack: java.lang.String toString()> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryStack: java.lang.String toString()> => <java.lang.System: java.lang.String lineSeparator()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryStack: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryStack: java.lang.String toString()> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String toString()> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String toString()> => <java.lang.System: java.lang.String lineSeparator()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String toString()> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String toStringDebug()> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String toStringDebug()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String toStringDebug()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String toStringDebug()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String toStringDebug()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String toStringDebug()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.NodeWithExceptionsHolder: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.NodeWithExceptionsHolder: java.lang.String toStringDebug()> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.NodeWithExceptionsHolder: java.lang.String toStringDebug()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.NodeWithExceptionsHolder: java.lang.String toStringDebug()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.NodeWithExceptionsHolder: java.lang.String toStringDebug()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseThree: org.checkerframework.dataflow.cfg.ControlFlowGraph process(org.checkerframework.dataflow.cfg.ControlFlowGraph)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseThree: org.checkerframework.dataflow.cfg.ControlFlowGraph process(org.checkerframework.dataflow.cfg.ControlFlowGraph)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseTwo: org.checkerframework.dataflow.cfg.ControlFlowGraph process(org.checkerframework.dataflow.cfg.builder.PhaseOneResult)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseTwo: org.checkerframework.dataflow.cfg.ControlFlowGraph process(org.checkerframework.dataflow.cfg.builder.PhaseOneResult)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseTwo: org.checkerframework.dataflow.cfg.ControlFlowGraph process(org.checkerframework.dataflow.cfg.builder.PhaseOneResult)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseTwo: org.checkerframework.dataflow.cfg.ControlFlowGraph process(org.checkerframework.dataflow.cfg.builder.PhaseOneResult)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseTwo: org.checkerframework.dataflow.cfg.ControlFlowGraph process(org.checkerframework.dataflow.cfg.builder.PhaseOneResult)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseTwo: org.checkerframework.dataflow.cfg.ControlFlowGraph process(org.checkerframework.dataflow.cfg.builder.PhaseOneResult)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseTwo: org.checkerframework.dataflow.cfg.ControlFlowGraph process(org.checkerframework.dataflow.cfg.builder.PhaseOneResult)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseTwo: org.checkerframework.dataflow.cfg.ControlFlowGraph process(org.checkerframework.dataflow.cfg.builder.PhaseOneResult)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseTwo: org.checkerframework.dataflow.cfg.ControlFlowGraph process(org.checkerframework.dataflow.cfg.builder.PhaseOneResult)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseTwo: org.checkerframework.dataflow.cfg.ControlFlowGraph process(org.checkerframework.dataflow.cfg.builder.PhaseOneResult)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseTwo: org.checkerframework.dataflow.cfg.ControlFlowGraph process(org.checkerframework.dataflow.cfg.builder.PhaseOneResult)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseTwo: org.checkerframework.dataflow.cfg.ControlFlowGraph process(org.checkerframework.dataflow.cfg.builder.PhaseOneResult)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.ConditionalJump: void <init>(org.checkerframework.dataflow.cfg.builder.Label,org.checkerframework.dataflow.cfg.builder.Label)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.ConditionalJump: void <init>(org.checkerframework.dataflow.cfg.builder.Label,org.checkerframework.dataflow.cfg.builder.Label)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.ConditionalJump: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.MissingEdge: void <init>(org.checkerframework.dataflow.cfg.block.SingleSuccessorBlockImpl,int)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.MissingEdge: void <init>(org.checkerframework.dataflow.cfg.block.SingleSuccessorBlockImpl,int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.MissingEdge: void <init>(org.checkerframework.dataflow.cfg.block.SingleSuccessorBlockImpl,int,org.checkerframework.dataflow.analysis.Store$FlowRule)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.MissingEdge: void <init>(org.checkerframework.dataflow.cfg.block.SingleSuccessorBlockImpl,int,org.checkerframework.dataflow.analysis.Store$FlowRule)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.MissingEdge: void <init>(org.checkerframework.dataflow.cfg.block.SingleSuccessorBlockImpl,java.lang.Integer,javax.lang.model.type.TypeMirror,org.checkerframework.dataflow.analysis.Store$FlowRule)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.MissingEdge: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.NodeHolder: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.NodeHolder: java.lang.String toStringDebug()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryCatchFrame: java.lang.String toString()> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryCatchFrame: java.lang.String toString()> => <java.lang.System: java.lang.String lineSeparator()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryCatchFrame: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryCatchFrame: java.lang.String toString()> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryCatchFrame: boolean possibleLabels(javax.lang.model.type.TypeMirror,java.util.Set)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryCatchFrame: boolean possibleLabels(javax.lang.model.type.TypeMirror,java.util.Set)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryCatchFrame: boolean possibleLabels(javax.lang.model.type.TypeMirror,java.util.Set)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryCatchFrame: boolean possibleLabels(javax.lang.model.type.TypeMirror,java.util.Set)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryCatchFrame: boolean possibleLabels(javax.lang.model.type.TypeMirror,java.util.Set)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryCatchFrame: boolean possibleLabels(javax.lang.model.type.TypeMirror,java.util.Set)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryFinallyFrame: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.TryFinallyScopeMap: org.checkerframework.dataflow.cfg.builder.Label get(java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.UnconditionalJump: void <init>(org.checkerframework.dataflow.cfg.builder.Label,org.checkerframework.dataflow.analysis.Store$FlowRule)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.UnconditionalJump: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: java.lang.String toStringDebug()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: java.lang.String toStringDebug()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: org.checkerframework.dataflow.expression.JavaExpression fromNode(org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: org.checkerframework.dataflow.expression.JavaExpression fromNode(org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: org.checkerframework.dataflow.expression.JavaExpression fromTree(com.sun.source.tree.ExpressionTree)> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: org.checkerframework.dataflow.expression.JavaExpression fromTree(com.sun.source.tree.ExpressionTree)> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: org.checkerframework.dataflow.expression.JavaExpression fromTree(com.sun.source.tree.ExpressionTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: org.checkerframework.dataflow.expression.JavaExpression fromTree(com.sun.source.tree.ExpressionTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: org.checkerframework.dataflow.expression.JavaExpression fromTree(com.sun.source.tree.ExpressionTree)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: org.checkerframework.dataflow.expression.JavaExpression fromTree(com.sun.source.tree.ExpressionTree)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: org.checkerframework.dataflow.expression.JavaExpression fromTree(com.sun.source.tree.ExpressionTree)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: org.checkerframework.dataflow.expression.JavaExpression fromTree(com.sun.source.tree.ExpressionTree)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: java.util.List getFormalParameters(javax.lang.model.element.ExecutableElement)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: org.checkerframework.dataflow.expression.JavaExpression getReceiver(com.sun.source.tree.ExpressionTree)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: org.checkerframework.dataflow.expression.JavaExpression getReceiver(com.sun.source.tree.ExpressionTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: org.checkerframework.dataflow.expression.JavaExpression getImplicitReceiver(javax.lang.model.element.Element)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.LocalVariable: int hashCode()> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.LocalVariable: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.expression.LocalVariable: int hashCode()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.expression.LocalVariable: java.lang.String toStringDebug()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FieldAccess: void <init>(org.checkerframework.dataflow.expression.JavaExpression,javax.lang.model.type.TypeMirror,javax.lang.model.element.VariableElement)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FieldAccess: void <init>(org.checkerframework.dataflow.expression.JavaExpression,javax.lang.model.type.TypeMirror,javax.lang.model.element.VariableElement)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FieldAccess: void <init>(org.checkerframework.dataflow.expression.JavaExpression,javax.lang.model.type.TypeMirror,javax.lang.model.element.VariableElement)> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FieldAccess: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FieldAccess: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FieldAccess: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FieldAccess: java.lang.String toStringDebug()> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FieldAccess: java.lang.String toStringDebug()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FieldAccess: java.lang.String toStringDebug()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FieldAccess: java.lang.String toStringDebug()> => <java.lang.System: int identityHashCode(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FieldAccess: java.lang.String toStringDebug()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FieldAccess: java.lang.String toStringDebug()> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ArrayAccess: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ArrayAccess: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.MethodCall: java.util.List getArguments()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.MethodCall: java.util.List getArguments()> => <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
Found compile-time invoke: <org.checkerframework.dataflow.expression.MethodCall: boolean equals(java.lang.Object)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.MethodCall: int hashCode()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.MethodCall: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.expression.MethodCall: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.MethodCall: java.lang.String toString()> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ClassName: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ClassName: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ArrayCreation: void <init>(javax.lang.model.type.TypeMirror,java.util.List,java.util.List)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ArrayCreation: void <init>(javax.lang.model.type.TypeMirror,java.util.List,java.util.List)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ArrayCreation: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ArrayCreation: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ArrayCreation: java.lang.String toStringDebug()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FormalParameter: int hashCode()> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FormalParameter: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FormalParameter: int hashCode()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FormalParameter: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.FormalParameter: java.lang.String toStringDebug()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.Unknown: int hashCode()> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.Unknown: int hashCode()> => <java.lang.System: int identityHashCode(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: org.checkerframework.dataflow.expression.ValueLiteral negate()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: org.checkerframework.dataflow.expression.ValueLiteral negate()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: org.checkerframework.dataflow.expression.ValueLiteral negate()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: boolean equals(java.lang.Object)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.String toString()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.String toString()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.constantpropagation.Constant$Type: org.checkerframework.dataflow.constantpropagation.Constant$Type valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <org.checkerframework.dataflow.constantpropagation.Constant: void <init>(org.checkerframework.dataflow.constantpropagation.Constant$Type)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.constantpropagation.Constant: java.lang.Integer getValue()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.constantpropagation.Constant: boolean equals(java.lang.Object)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.constantpropagation.Constant: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.constantpropagation.Constant: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.constantpropagation.Constant: java.lang.String toString()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.constantpropagation.ConstantPropagationStore: void mergeInformation(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.constantpropagation.Constant)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.constantpropagation.ConstantPropagationStore: void setInformation(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.constantpropagation.Constant)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.livevariable.LiveVarStore: void <init>()> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.livevariable.LiveVarStore: org.checkerframework.dataflow.livevariable.LiveVarStore copy()> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.livevariable.LiveVarStore: java.lang.String visualize(org.checkerframework.dataflow.cfg.visualize.CFGVisualizer)> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.NodeUtils: boolean isArrayLengthFieldAccess(org.checkerframework.dataflow.cfg.node.Node)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$PurityResult: void <init>()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$PurityResult: void <init>()> => <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$PurityResult: java.lang.String toString()> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$PurityResult: java.lang.String toString()> => <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$PurityResult: java.lang.String toString()> => <java.lang.System: java.lang.String lineSeparator()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$PurityResult: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$PurityResult: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$PurityCheckerHelper: java.lang.Void visitNewClass(com.sun.source.tree.NewClassTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityUtils: boolean isDeterministic(org.checkerframework.javacutil.AnnotationProvider,com.sun.source.tree.MethodTree)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityUtils: boolean isSideEffectFree(org.checkerframework.javacutil.AnnotationProvider,com.sun.source.tree.MethodTree)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityUtils: java.util.EnumSet getPurityKinds(org.checkerframework.javacutil.AnnotationProvider,com.sun.source.tree.MethodTree)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityUtils: java.util.EnumSet getPurityKinds(org.checkerframework.javacutil.AnnotationProvider,javax.lang.model.element.ExecutableElement)> => <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityUtils: java.util.EnumSet getPurityKinds(org.checkerframework.javacutil.AnnotationProvider,javax.lang.model.element.ExecutableElement)> => <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityUtils: java.util.EnumSet getPurityKinds(org.checkerframework.javacutil.AnnotationProvider,javax.lang.model.element.ExecutableElement)> => <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: void <clinit>()> => <java.util.concurrent.atomic.AtomicLong: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.TransferInput: void <clinit>()> => <java.util.concurrent.atomic.AtomicLong: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.Node: void <clinit>()> => <java.util.concurrent.atomic.AtomicLong: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.ControlFlowGraph: void <clinit>()> => <java.util.concurrent.atomic.AtomicLong: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: void <clinit>()> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: void <clinit>()> => <java.lang.System: java.lang.String lineSeparator()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: boolean toBoolean(java.lang.Object)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: boolean toBoolean(java.lang.Object)> => <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String escapeString(java.lang.Object)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String escapeString(java.lang.Object)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.UnderlyingAST: void <clinit>()> => <java.util.concurrent.atomic.AtomicLong: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.Label: java.lang.String uniqueName()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <javax.lang.model.type.TypeKind: javax.lang.model.type.TypeKind[] values()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <javax.lang.model.element.ElementKind: javax.lang.model.element.ElementKind[] values()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGBuilder: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseThree: org.checkerframework.dataflow.cfg.block.BlockImpl computeNeighborhoodOfEmptyBlock(org.checkerframework.dataflow.cfg.block.RegularBlockImpl,java.util.Set,java.util.Set)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.block.BlockImpl: void <clinit>()> => <java.util.concurrent.atomic.AtomicLong: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: void <clinit>()> => <java.math.BigInteger: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <javax.lang.model.element.ElementKind: javax.lang.model.element.ElementKind[] values()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression$1: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: org.checkerframework.dataflow.expression.JavaExpression fromMemberSelect(com.sun.source.tree.MemberSelectTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: java.util.List argumentTreesToJavaExpressions(javax.lang.model.element.ExecutableElement,java.util.List)> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: java.util.List argumentTreesToJavaExpressions(javax.lang.model.element.ExecutableElement,java.util.List)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: java.util.List argumentTreesToJavaExpressions(javax.lang.model.element.ExecutableElement,java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: java.util.List argumentTreesToJavaExpressions(javax.lang.model.element.ExecutableElement,java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.UnaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$PurityCheckerHelper: void <clinit>()> => <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: boolean isVarArgsInvocation(javax.lang.model.element.ExecutableElement,java.util.List)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseThree: org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseThree$PredecessorHolder getPredecessorHolder(org.checkerframework.dataflow.cfg.block.BlockImpl,org.checkerframework.dataflow.cfg.block.BlockImpl)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseThree: org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseThree$PredecessorHolder getPredecessorHolder(org.checkerframework.dataflow.cfg.block.BlockImpl,org.checkerframework.dataflow.cfg.block.BlockImpl)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.TransferInput: void <init>(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Store,org.checkerframework.dataflow.analysis.Store,org.checkerframework.dataflow.analysis.Store,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.TransferInput: void <init>(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Store,org.checkerframework.dataflow.analysis.Store,org.checkerframework.dataflow.analysis.Store,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: void copyMapsIfNeeded()> => <java.util.IdentityHashMap: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: org.checkerframework.dataflow.analysis.Store runAnalysisFor(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Analysis$BeforeOrAfter)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AnalysisResult: org.checkerframework.dataflow.analysis.Store runAnalysisFor(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Analysis$BeforeOrAfter)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AbstractAnalysis: void <init>(org.checkerframework.dataflow.analysis.Analysis$Direction)> => <java.util.IdentityHashMap: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AbstractAnalysis: org.checkerframework.dataflow.analysis.TransferResult callTransferFunction(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.TransferInput)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AbstractAnalysis: boolean updateNodeValues(org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.TransferResult)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void addStoreBefore(org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Store,org.checkerframework.dataflow.analysis.Store$Kind,boolean)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void addStoreBefore(org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Store,org.checkerframework.dataflow.analysis.Store$Kind,boolean)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void addStoreBefore(org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Store,org.checkerframework.dataflow.analysis.Store$Kind,boolean)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void addStoreBefore(org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.analysis.Store,org.checkerframework.dataflow.analysis.Store$Kind,boolean)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.AbstractAnalysis: void setNodeValues(java.util.IdentityHashMap)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: java.util.IdentityHashMap lambda$runAnalysisFor$1(org.checkerframework.dataflow.analysis.TransferInput)> => <java.util.IdentityHashMap: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.node.Node: void <init>(javax.lang.model.type.TypeMirror)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void printUsage()> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void printError(java.lang.String)> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void printError(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <com.sun.tools.javac.util.Options: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <java.lang.System: void exit(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <java.lang.System: void exit(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <java.lang.System: void setErr(java.io.PrintStream)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <java.lang.System: void setErr(java.io.PrintStream)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <java.lang.System: void setErr(java.io.PrintStream)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <com.sun.tools.javac.util.List: com.sun.tools.javac.util.List nil()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <com.sun.tools.javac.util.List: com.sun.tools.javac.util.List of(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <com.sun.tools.javac.util.List: com.sun.tools.javac.util.List of(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <com.sun.tools.javac.util.List: com.sun.tools.javac.util.List of(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <java.lang.System: void setErr(java.io.PrintStream)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <com.sun.tools.javac.util.List: com.sun.tools.javac.util.List of(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <com.sun.tools.javac.util.Options: com.sun.tools.javac.util.Options instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <com.sun.tools.javac.util.List: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: org.checkerframework.dataflow.cfg.ControlFlowGraph generateMethodCFG(java.lang.String,java.lang.String,java.lang.String)> => <com.sun.tools.javac.main.JavaCompiler: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void producePDF(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void producePDF(java.lang.String)> => <java.lang.System: void exit(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void producePDF(java.lang.String)> => <java.lang.Runtime: java.lang.Runtime getRuntime()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void producePDF(java.lang.String)> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void producePDF(java.lang.String)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.CFGVisualizeLauncher: void producePDF(java.lang.String)> => <java.lang.Runtime: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.lang.String visualizeGraph(org.checkerframework.dataflow.cfg.ControlFlowGraph,org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String dotOutputFileName(org.checkerframework.dataflow.cfg.UnderlyingAST)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String dotOutputFileName(org.checkerframework.dataflow.cfg.UnderlyingAST)> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.util.IdentityHashMap getProcessOrder(org.checkerframework.dataflow.cfg.ControlFlowGraph)> => <java.util.IdentityHashMap: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.util.IdentityHashMap getProcessOrder(org.checkerframework.dataflow.cfg.ControlFlowGraph)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.util.IdentityHashMap getProcessOrder(org.checkerframework.dataflow.cfg.ControlFlowGraph)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.lang.String getProcessOrderSimpleString(java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.lang.String visualizeBlockHelper(org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.lang.String visualizeSpecialBlockHelper(org.checkerframework.dataflow.cfg.block.SpecialBlock)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.lang.String visualizeBlockTransferInputHelper(org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer$VisualizeWhere,org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.lang.String visualizeBlockTransferInputHelper(org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer$VisualizeWhere,org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.lang.String visualizeBlockTransferInputHelper(org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer$VisualizeWhere,org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.lang.String visualizeBlockTransferInputHelper(org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer$VisualizeWhere,org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.LabelCell: void <init>(org.checkerframework.dataflow.cfg.builder.Label)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$SwitchBuilder: boolean casesAreExhaustive()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$SwitchBuilder: boolean casesAreExhaustive()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$SwitchBuilder: void buildCase(com.sun.source.tree.CaseTree,int,boolean)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$SwitchBuilder: void buildCase(com.sun.source.tree.CaseTree,int,boolean)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void addLabelForNextNode(org.checkerframework.dataflow.cfg.builder.Label)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void addLabelForNextNode(org.checkerframework.dataflow.cfg.builder.Label)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void addLabelForNextNode(org.checkerframework.dataflow.cfg.builder.Label)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: javax.lang.model.type.TypeMirror maybeGetTypeMirror(java.lang.Class)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: javax.lang.model.type.TypeMirror maybeGetTypeMirror(java.lang.Class)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne$SwitchBuilder: void buildSwitchExpressionResult(com.sun.source.tree.ExpressionTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node getReceiver(com.sun.source.tree.ExpressionTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node getReceiver(com.sun.source.tree.ExpressionTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.builder.NodeWithExceptionsHolder extendWithNodeWithException(org.checkerframework.dataflow.cfg.node.Node,javax.lang.model.type.TypeMirror)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.builder.NodeWithExceptionsHolder extendWithNodeWithException(org.checkerframework.dataflow.cfg.node.Node,javax.lang.model.type.TypeMirror)> => <java.util.Collections: java.util.Set singleton(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: java.util.List convertCallArguments(javax.lang.model.element.ExecutableElement,java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: java.util.List convertCallArguments(javax.lang.model.element.ExecutableElement,java.util.List)> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: java.util.List convertCallArguments(javax.lang.model.element.ExecutableElement,java.util.List)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: java.util.List convertCallArguments(javax.lang.model.element.ExecutableElement,java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: java.util.List convertCallArguments(javax.lang.model.element.ExecutableElement,java.util.List)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: com.sun.source.tree.VariableTree getAssertionsEnabledVariable()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: com.sun.source.tree.Tree$Kind withoutAssignment(com.sun.source.tree.Tree$Kind)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: com.sun.source.tree.Tree$Kind withoutAssignment(com.sun.source.tree.Tree$Kind)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: com.sun.source.tree.Tree$Kind withoutAssignment(com.sun.source.tree.Tree$Kind)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: com.sun.source.tree.Tree$Kind withoutAssignment(com.sun.source.tree.Tree$Kind)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: com.sun.source.tree.Tree$Kind withoutAssignment(com.sun.source.tree.Tree$Kind)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: com.sun.source.tree.Tree$Kind withoutAssignment(com.sun.source.tree.Tree$Kind)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: com.sun.source.tree.Tree$Kind withoutAssignment(com.sun.source.tree.Tree$Kind)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: com.sun.source.tree.Tree$Kind withoutAssignment(com.sun.source.tree.Tree$Kind)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: com.sun.source.tree.Tree$Kind withoutAssignment(com.sun.source.tree.Tree$Kind)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: com.sun.source.tree.Tree$Kind withoutAssignment(com.sun.source.tree.Tree$Kind)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: com.sun.source.tree.Tree$Kind withoutAssignment(com.sun.source.tree.Tree$Kind)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: com.sun.source.tree.Tree$Kind withoutAssignment(com.sun.source.tree.Tree$Kind)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node unaryNumericPromotion(org.checkerframework.dataflow.cfg.node.Node)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node unbox(org.checkerframework.dataflow.cfg.node.Node)> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node unbox(org.checkerframework.dataflow.cfg.node.Node)> => <java.util.Collections: java.util.Set singleton(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node unbox(org.checkerframework.dataflow.cfg.node.Node)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: java.lang.String uniqueName(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: javax.lang.model.element.Element findOwner()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: javax.lang.model.element.Element findOwner()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node conditionalExprPromotion(org.checkerframework.dataflow.cfg.node.Node,javax.lang.model.type.TypeMirror)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node conditionalExprPromotion(org.checkerframework.dataflow.cfg.node.Node,javax.lang.model.type.TypeMirror)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: javax.lang.model.element.Name getLabel(com.sun.source.util.TreePath)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.AssignmentNode translateAssignment(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.AssignmentNode createIncrementOrDecrementAssign(com.sun.source.tree.UnaryTree,org.checkerframework.dataflow.cfg.node.Node,boolean,boolean)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.AssignmentNode createIncrementOrDecrementAssign(com.sun.source.tree.UnaryTree,org.checkerframework.dataflow.cfg.node.Node,boolean,boolean)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.AssignmentNode createIncrementOrDecrementAssign(com.sun.source.tree.UnaryTree,org.checkerframework.dataflow.cfg.node.Node,boolean,boolean)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.AssignmentNode createIncrementOrDecrementAssign(com.sun.source.tree.UnaryTree,org.checkerframework.dataflow.cfg.node.Node,boolean,boolean)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.AssignmentNode createIncrementOrDecrementAssign(com.sun.source.tree.UnaryTree,org.checkerframework.dataflow.cfg.node.Node,boolean,boolean)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String nodeToString(org.checkerframework.dataflow.cfg.builder.ExtendedNode)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String nodeToString(org.checkerframework.dataflow.cfg.builder.ExtendedNode)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String mapToString(java.util.Map)> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String mapToString(java.util.Map)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String mapToString(java.util.Map)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String mapToString(java.util.Map)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String mapToString(java.util.Map)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String mapToString(java.util.Map)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.JavaExpression: void <init>(javax.lang.model.type.TypeMirror)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.BinaryOperation: java.lang.String operationKindToString(com.sun.source.tree.Tree$Kind)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Byte: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Long: java.lang.Long valueOf(long)>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Double: java.lang.Double valueOf(double)>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Float: java.lang.Float valueOf(float)>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Long: java.lang.Long valueOf(long)>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Short: java.lang.Short valueOf(short)>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Byte: java.lang.Byte valueOf(byte)>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Long: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Double: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Float: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Long: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.expression.ValueLiteral: java.lang.Object negateBoxedPrimitive(java.lang.Object)> => <java.lang.Short: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.util.PurityChecker$PurityCheckerHelper: void assignmentCheck(com.sun.source.tree.ExpressionTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.util.List lambda$getProcessOrder$0(org.checkerframework.dataflow.cfg.block.Block)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.BackwardAnalysisImpl: void initInitialInputs()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: void initInitialInputs()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: org.checkerframework.dataflow.analysis.Store getStoreBefore(org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Store$Kind)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String visualizeGraphHeader()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.lang.String visualizeGraphWithoutHeaderAndFooter(org.checkerframework.dataflow.cfg.ControlFlowGraph,org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.lang.String visualizeGraphWithoutHeaderAndFooter(org.checkerframework.dataflow.cfg.ControlFlowGraph,org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: java.lang.String loopOverBlockContents(org.checkerframework.dataflow.cfg.block.Block,org.checkerframework.dataflow.analysis.Analysis,java.lang.String)> => <java.util.StringJoiner: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void addToConvertedLookupMap(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void addToConvertedLookupMap(com.sun.source.tree.Tree,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node box(org.checkerframework.dataflow.cfg.node.Node)> => <java.util.Collections: java.util.List singletonList(java.lang.Object)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node box(org.checkerframework.dataflow.cfg.node.Node)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node widen(org.checkerframework.dataflow.cfg.node.Node,javax.lang.model.type.TypeMirror)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: org.checkerframework.dataflow.cfg.node.Node narrow(org.checkerframework.dataflow.cfg.node.Node,javax.lang.model.type.TypeMirror)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.PhaseOneResult: java.lang.String resolveLabel(org.checkerframework.dataflow.cfg.builder.Label)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: java.util.List getParameters(org.checkerframework.dataflow.cfg.UnderlyingAST)> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <org.checkerframework.dataflow.analysis.ForwardAnalysisImpl: java.util.List getParameters(org.checkerframework.dataflow.cfg.UnderlyingAST)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: void handleSuccessorsHelper(org.checkerframework.dataflow.cfg.block.Block,java.util.Set,java.util.Queue,java.lang.StringBuilder)> => <java.lang.Long: java.lang.Long valueOf(long)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: void handleSuccessorsHelper(org.checkerframework.dataflow.cfg.block.Block,java.util.Set,java.util.Queue,java.lang.StringBuilder)> => <java.lang.Long: java.lang.Long valueOf(long)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: void handleSuccessorsHelper(org.checkerframework.dataflow.cfg.block.Block,java.util.Set,java.util.Queue,java.lang.StringBuilder)> => <java.lang.Long: java.lang.Long valueOf(long)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: void handleSuccessorsHelper(org.checkerframework.dataflow.cfg.block.Block,java.util.Set,java.util.Queue,java.lang.StringBuilder)> => <java.lang.Long: java.lang.Long valueOf(long)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: void handleSuccessorsHelper(org.checkerframework.dataflow.cfg.block.Block,java.util.Set,java.util.Queue,java.lang.StringBuilder)> => <java.lang.Long: java.lang.Long valueOf(long)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: void handleSuccessorsHelper(org.checkerframework.dataflow.cfg.block.Block,java.util.Set,java.util.Queue,java.lang.StringBuilder)> => <java.lang.Long: java.lang.Long valueOf(long)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: void handleSuccessorsHelper(org.checkerframework.dataflow.cfg.block.Block,java.util.Set,java.util.Queue,java.lang.StringBuilder)> => <java.lang.Long: java.lang.Long valueOf(long)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: void handleSuccessorsHelper(org.checkerframework.dataflow.cfg.block.Block,java.util.Set,java.util.Queue,java.lang.StringBuilder)> => <java.lang.Long: java.lang.Long valueOf(long)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: void handleSuccessorsHelper(org.checkerframework.dataflow.cfg.block.Block,java.util.Set,java.util.Queue,java.lang.StringBuilder)> => <java.lang.Long: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: void handleSuccessorsHelper(org.checkerframework.dataflow.cfg.block.Block,java.util.Set,java.util.Queue,java.lang.StringBuilder)> => <java.lang.Long: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.AbstractCFGVisualizer: void handleSuccessorsHelper(org.checkerframework.dataflow.cfg.block.Block,java.util.Set,java.util.Queue,java.lang.StringBuilder)> => <java.lang.Long: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: boolean conversionRequiresNarrowing(javax.lang.model.type.TypeMirror,org.checkerframework.dataflow.cfg.node.Node)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void insertExtendedNodeAfter(org.checkerframework.dataflow.cfg.builder.ExtendedNode,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void insertExtendedNodeAfter(org.checkerframework.dataflow.cfg.builder.ExtendedNode,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void insertExtendedNodeAfter(org.checkerframework.dataflow.cfg.builder.ExtendedNode,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void insertExtendedNodeAfter(org.checkerframework.dataflow.cfg.builder.ExtendedNode,org.checkerframework.dataflow.cfg.node.Node)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.builder.CFGTranslationPhaseOne: void insertExtendedNodeAfter(org.checkerframework.dataflow.cfg.builder.ExtendedNode,org.checkerframework.dataflow.cfg.node.Node)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.StringCFGVisualizer: java.lang.String visualizeEdge(java.lang.Object,java.lang.Object,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.StringCFGVisualizer: java.lang.String visualizeEdge(java.lang.Object,java.lang.Object,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <org.checkerframework.dataflow.cfg.visualize.DOTCFGVisualizer: java.lang.String visualizeEdge(java.lang.Object,java.lang.Object,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>

Total compile-time calls: 1081
