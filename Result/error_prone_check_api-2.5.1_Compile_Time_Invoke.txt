All Compile-time Calls invokes JDK:
Found compile-time invoke: <com.google.errorprone.ErrorProneAnalyzer: void finished(com.sun.source.util.TaskEvent)> => <com.sun.source.util.TaskEvent$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneAnalyzer: void finished(com.sun.source.util.TaskEvent)> => <com.sun.tools.javac.util.Log: com.sun.tools.javac.util.Log instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.ErrorProneAnalyzer: void finished(com.sun.source.util.TaskEvent)> => <com.sun.tools.javac.api.JavacTrees: com.sun.tools.javac.api.JavacTrees instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.ErrorProneAnalyzer: void finished(com.sun.source.util.TaskEvent)> => <com.sun.tools.javac.main.JavaCompiler: com.sun.tools.javac.main.JavaCompiler instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.ErrorProneAnalyzer: void finished(com.sun.source.util.TaskEvent)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneAnalyzer: void finished(com.sun.source.util.TaskEvent)> => <com.sun.tools.javac.util.Log: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneAnalyzer: void finished(com.sun.source.util.TaskEvent)> => <com.sun.tools.javac.main.JavaCompiler: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: javax.lang.model.util.Elements getElements()> => <com.sun.tools.javac.model.JavacElements: com.sun.tools.javac.model.JavacElements instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.VisitorState: void reportMatch(com.google.errorprone.matchers.Description)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: void incrementCounter(com.google.errorprone.bugpatterns.BugChecker,java.lang.String,int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: com.sun.tools.javac.code.Symbol$ClassSymbol getSymbolFromString(com.sun.tools.javac.code.Symbol$ModuleSymbol,com.sun.tools.javac.util.Name)> => <com.sun.tools.javac.code.Kinds$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: com.sun.tools.javac.code.Type getType(com.sun.tools.javac.code.Type,boolean,java.util.List)> => <com.sun.tools.javac.code.Type: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: com.sun.tools.javac.code.Type getType(com.sun.tools.javac.code.Type,boolean,java.util.List)> => <com.sun.tools.javac.util.List: com.sun.tools.javac.util.List 'from'(java.lang.Iterable)>
Found compile-time invoke: <com.google.errorprone.VisitorState: com.sun.tools.javac.code.Type getType(com.sun.tools.javac.code.Type,boolean,java.util.List)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: com.sun.tools.javac.code.Type getType(com.sun.tools.javac.code.Type,boolean,java.util.List)> => <com.sun.tools.javac.code.Type: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: com.sun.tools.javac.code.Type getType(com.sun.tools.javac.code.Type,boolean,java.util.List)> => <com.sun.tools.javac.util.List: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: com.sun.tools.javac.code.Type arrayTypeForType(com.sun.tools.javac.code.Type)> => <com.sun.tools.javac.code.Type: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: boolean isAndroidCompatible()> => <com.sun.tools.javac.util.Options: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: boolean isAndroidCompatible()> => <com.sun.tools.javac.util.Options: com.sun.tools.javac.util.Options instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.predicates.type.Array: com.google.errorprone.predicates.type.Array valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.predicates.type.Any: com.google.errorprone.predicates.type.Any valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.ErrorProneVersion: com.google.common.base.Optional loadVersionFromPom()> => <java.util.Properties: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.bugpatterns.BugChecker: int hashCode()> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.bugpatterns.BugChecker: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.bugpatterns.BugChecker: int hashCode()> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.MaskedClassLoader$MaskedFileManager: void <init>(com.sun.tools.javac.util.Context)> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.AutoValue_ErrorProneOptions_PatchingOptions: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ImportOrderParser: com.google.errorprone.apply.ImportOrganizer getImportOrganizer(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ImportOrderParser: com.google.errorprone.apply.ImportOrganizer getImportOrganizer(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$5: java.lang.Void visitMemberSelect(com.sun.source.tree.MemberSelectTree,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFix$Builder: com.google.errorprone.fixes.SuggestedFix$Builder addImport(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFix$Builder: com.google.errorprone.fixes.SuggestedFix$Builder addStaticImport(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFix$Builder: com.google.errorprone.fixes.SuggestedFix$Builder removeImport(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFix$Builder: com.google.errorprone.fixes.SuggestedFix$Builder removeStaticImport(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFix: java.lang.String toString(com.sun.tools.javac.tree.JCTree$JCCompilationUnit)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFix: java.lang.String toString(com.sun.tools.javac.tree.JCTree$JCCompilationUnit)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFix: java.lang.String toString(com.sun.tools.javac.tree.JCTree$JCCompilationUnit)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFix: java.lang.String toString(com.sun.tools.javac.tree.JCTree$JCCompilationUnit)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFix: java.lang.String toString(com.sun.tools.javac.tree.JCTree$JCCompilationUnit)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFix: java.lang.String toString(com.sun.tools.javac.tree.JCTree$JCCompilationUnit)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFix: java.util.Set getReplacements(com.sun.tools.javac.tree.EndPosTable)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.Replacement: com.google.errorprone.fixes.Replacement create(int,int,java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.Replacement: com.google.errorprone.fixes.Replacement create(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.fixes.Replacement: com.google.errorprone.fixes.Replacement create(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.fixes.Replacement: com.google.errorprone.fixes.Replacement create(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.fixes.Replacement: com.google.errorprone.fixes.Replacement create(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$2: java.lang.String visitArray(javax.lang.model.type.ArrayType,com.google.errorprone.fixes.SuggestedFix$Builder)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$2: java.lang.String visitDeclared(javax.lang.model.type.DeclaredType,com.google.errorprone.fixes.SuggestedFix$Builder)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.AutoValue_Replacement: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$4: java.lang.Void visitMemberSelect(com.sun.source.tree.MemberSelectTree,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.IndexedPosition: com.sun.tools.javac.tree.JCTree getTree()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.IndexedPosition: int getPreferredPosition()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$7: java.lang.Void visitParam(com.sun.source.doctree.ParamTree,java.lang.Void)> => <com.sun.tools.javac.api.JavacTrees: com.sun.tools.javac.api.JavacTrees instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.fixes.Replacements$CoalescePolicy: com.google.errorprone.fixes.Replacements$CoalescePolicy valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.fixes.Replacements$CoalescePolicy$3: java.lang.String coalesce(java.lang.String,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.Replacements$CoalescePolicy$2: java.lang.String coalesce(java.lang.String,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.AppliedFix$Applier: com.google.errorprone.fixes.AppliedFix apply(com.google.errorprone.fixes.Fix)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.AppliedFix$Applier: com.google.errorprone.fixes.AppliedFix apply(com.google.errorprone.fixes.Fix)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.fixes.AppliedFix$Applier: com.google.errorprone.fixes.AppliedFix apply(com.google.errorprone.fixes.Fix)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.fixes.AppliedFix$Applier: com.google.errorprone.fixes.AppliedFix apply(com.google.errorprone.fixes.Fix)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.AppliedFix$Applier: com.google.errorprone.fixes.AppliedFix apply(com.google.errorprone.fixes.Fix)> => <java.io.BufferedReader: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.AppliedFix$Applier: com.google.errorprone.fixes.AppliedFix apply(com.google.errorprone.fixes.Fix)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.AppliedFix$Applier: com.google.errorprone.fixes.AppliedFix apply(com.google.errorprone.fixes.Fix)> => <java.io.BufferedReader: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.AppliedFix$Applier: com.google.errorprone.fixes.AppliedFix apply(com.google.errorprone.fixes.Fix)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addModifiers(com.sun.source.tree.Tree,com.google.errorprone.VisitorState,javax.lang.model.element.Modifier[])> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addModifiers(com.sun.source.tree.Tree,com.google.errorprone.VisitorState,javax.lang.model.element.Modifier[])> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addModifiers(com.sun.source.tree.Tree,com.google.errorprone.VisitorState,javax.lang.model.element.Modifier[])> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addModifiers(com.sun.source.tree.Tree,com.google.errorprone.VisitorState,javax.lang.model.element.Modifier[])> => <java.util.TreeSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addModifiers(com.sun.source.tree.Tree,com.google.errorprone.VisitorState,javax.lang.model.element.Modifier[])> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addModifiers(com.sun.source.tree.Tree,com.sun.source.tree.ModifiersTree,com.google.errorprone.VisitorState,java.util.Set)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addModifiers(com.sun.source.tree.Tree,com.sun.source.tree.ModifiersTree,com.google.errorprone.VisitorState,java.util.Set)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addModifiers(com.sun.source.tree.Tree,com.sun.source.tree.ModifiersTree,com.google.errorprone.VisitorState,java.util.Set)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addModifiers(com.sun.source.tree.Tree,com.sun.source.tree.ModifiersTree,com.google.errorprone.VisitorState,java.util.Set)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addModifiers(com.sun.source.tree.Tree,com.sun.source.tree.ModifiersTree,com.google.errorprone.VisitorState,java.util.Set)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addModifiers(com.sun.source.tree.Tree,com.sun.source.tree.ModifiersTree,com.google.errorprone.VisitorState,java.util.Set)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addModifiers(com.sun.source.tree.Tree,com.sun.source.tree.ModifiersTree,com.google.errorprone.VisitorState,java.util.Set)> => <java.util.TreeMap: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addModifiers(com.sun.source.tree.Tree,com.sun.source.tree.ModifiersTree,com.google.errorprone.VisitorState,java.util.Set)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional removeModifiers(com.sun.source.tree.Tree,com.google.errorprone.VisitorState,javax.lang.model.element.Modifier[])> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional removeModifiers(com.sun.source.tree.Tree,com.google.errorprone.VisitorState,javax.lang.model.element.Modifier[])> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional removeModifiers(com.sun.source.tree.ModifiersTree,com.google.errorprone.VisitorState,java.util.Set)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional removeModifiers(com.sun.source.tree.ModifiersTree,com.google.errorprone.VisitorState,java.util.Set)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional removeModifiers(com.sun.source.tree.ModifiersTree,com.google.errorprone.VisitorState,java.util.Set)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional removeModifiers(com.sun.source.tree.ModifiersTree,com.google.errorprone.VisitorState,java.util.Set)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyType(com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFix$Builder,com.sun.tools.javac.code.Symbol)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyType(com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFix$Builder,com.sun.tools.javac.code.Symbol)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyType(com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFix$Builder,com.sun.tools.javac.code.Symbol)> => <com.sun.tools.javac.code.Kinds$KindSelector: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyType(com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFix$Builder,com.sun.tools.javac.code.Symbol)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyType(com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFix$Builder,java.lang.String)> => <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyType(com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFix$Builder,java.lang.String)> => <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyType(com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFix$Builder,java.lang.String)> => <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyType(com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFix$Builder,java.lang.String)> => <java.lang.Character: boolean isUpperCase(char)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyType(com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFix$Builder,java.lang.String)> => <com.sun.tools.javac.code.Kinds$KindSelector: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyType(com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFix$Builder,java.lang.String)> => <java.util.stream.Collectors: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyType(com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFix$Builder,java.lang.String)> => <java.lang.Character: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyType(com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFix$Builder,java.lang.String)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyType(com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFix$Builder,java.lang.String)> => <com.sun.tools.javac.code.Kinds$KindSelector: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyStaticImport(java.lang.String,com.google.errorprone.fixes.SuggestedFix$Builder,com.google.errorprone.VisitorState)> => <java.util.concurrent.atomic.AtomicBoolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String qualifyStaticImport(java.lang.String,com.google.errorprone.fixes.SuggestedFix$Builder,com.google.errorprone.VisitorState)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: void qualifyDocReference(com.google.errorprone.fixes.SuggestedFix$Builder,com.sun.source.util.DocTreePath,com.google.errorprone.VisitorState)> => <com.sun.source.doctree.DocTree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: void qualifyDocReference(com.google.errorprone.fixes.SuggestedFix$Builder,com.sun.source.util.DocTreePath,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.api.JavacTrees: com.sun.tools.javac.api.JavacTrees instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: void qualifyDocReference(com.google.errorprone.fixes.SuggestedFix$Builder,com.sun.source.util.DocTreePath,com.google.errorprone.VisitorState)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addMembers(com.sun.source.tree.ClassTree,com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFixes$AdditionPosition,java.lang.Iterable)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addMembers(com.sun.source.tree.ClassTree,com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFixes$AdditionPosition,java.lang.Iterable)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addMembers(com.sun.source.tree.ClassTree,com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFixes$AdditionPosition,java.lang.Iterable)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addMembers(com.sun.source.tree.ClassTree,com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFixes$AdditionPosition,java.lang.Iterable)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional addMembers(com.sun.source.tree.ClassTree,com.google.errorprone.VisitorState,com.google.errorprone.fixes.SuggestedFixes$AdditionPosition,java.lang.Iterable)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.errorprone.fixes.SuggestedFix renameMethod(com.sun.source.tree.MethodTree,java.lang.String,com.google.errorprone.VisitorState)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.errorprone.fixes.SuggestedFix renameMethod(com.sun.source.tree.MethodTree,java.lang.String,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.errorprone.fixes.SuggestedFix renameMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.String,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.errorprone.fixes.SuggestedFix renameTypeParameter(com.sun.source.tree.TypeParameterTree,com.sun.source.tree.Tree,java.lang.String,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.api.JavacTrees: com.sun.tools.javac.api.JavacTrees instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: void addSuppressWarnings(com.google.errorprone.fixes.SuggestedFix$Builder,com.google.errorprone.VisitorState,java.lang.String,java.lang.String,boolean)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: void addSuppressWarnings(com.google.errorprone.fixes.SuggestedFix$Builder,com.google.errorprone.VisitorState,java.lang.String,java.lang.String,boolean)> => <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: void addSuppressWarnings(com.google.errorprone.fixes.SuggestedFix$Builder,com.google.errorprone.VisitorState,java.lang.String,java.lang.String,boolean)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: void addSuppressWarnings(com.google.errorprone.fixes.SuggestedFix$Builder,com.google.errorprone.VisitorState,java.lang.String,java.lang.String,boolean)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: void addSuppressWarnings(com.google.errorprone.fixes.SuggestedFix$Builder,com.google.errorprone.VisitorState,java.lang.String,java.lang.String,boolean)> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: void addSuppressWarnings(com.google.errorprone.fixes.SuggestedFix$Builder,com.google.errorprone.VisitorState,java.lang.String,java.lang.String,boolean)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: void addSuppressWarnings(com.google.errorprone.fixes.SuggestedFix$Builder,com.google.errorprone.VisitorState,java.lang.String,java.lang.String,boolean)> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.errorprone.fixes.SuggestedFix$Builder addValuesToAnnotationArgument(com.sun.source.tree.AnnotationTree,java.lang.String,java.util.Collection,com.google.errorprone.VisitorState)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.errorprone.fixes.SuggestedFix$Builder addValuesToAnnotationArgument(com.sun.source.tree.AnnotationTree,java.lang.String,java.util.Collection,com.google.errorprone.VisitorState)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.errorprone.fixes.SuggestedFix$Builder addValuesToAnnotationArgument(com.sun.source.tree.AnnotationTree,java.lang.String,java.util.Collection,com.google.errorprone.VisitorState)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.errorprone.fixes.SuggestedFix$Builder addValuesToAnnotationArgument(com.sun.source.tree.AnnotationTree,java.lang.String,java.util.Collection,com.google.errorprone.VisitorState)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.errorprone.fixes.SuggestedFix$Builder addValuesToAnnotationArgument(com.sun.source.tree.AnnotationTree,java.lang.String,java.util.Collection,com.google.errorprone.VisitorState)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.errorprone.fixes.SuggestedFix$Builder updateAnnotationArgumentValues(com.sun.source.tree.AnnotationTree,java.lang.String,java.util.Collection)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.errorprone.fixes.SuggestedFix$Builder updateAnnotationArgumentValues(com.sun.source.tree.AnnotationTree,java.lang.String,java.util.Collection)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.errorprone.fixes.SuggestedFix$Builder updateAnnotationArgumentValues(com.sun.source.tree.AnnotationTree,java.lang.String,java.util.Collection)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional suggestExemptingAnnotation(java.lang.String,com.sun.source.util.TreePath,com.google.errorprone.VisitorState)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional suggestExemptingAnnotation(java.lang.String,com.sun.source.util.TreePath,com.google.errorprone.VisitorState)> => <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional suggestExemptingAnnotation(java.lang.String,com.sun.source.util.TreePath,com.google.errorprone.VisitorState)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.errorprone.fixes.SuggestedFix replaceIncludingComments(com.sun.source.util.TreePath,java.lang.String,com.google.errorprone.VisitorState)> => <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String castTree(com.sun.source.tree.ExpressionTree,java.lang.String,com.google.errorprone.VisitorState)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String castTree(com.sun.source.tree.ExpressionTree,java.lang.String,com.google.errorprone.VisitorState)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$AdditionPosition: com.google.errorprone.fixes.SuggestedFixes$AdditionPosition valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.fixes.Replacements: void <init>()> => <java.util.TreeMap: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.Replacements: void <init>()> => <java.util.TreeSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.Replacements: com.google.errorprone.fixes.Replacements add(com.google.errorprone.fixes.Replacement,com.google.errorprone.fixes.Replacements$CoalescePolicy)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.Replacements: com.google.errorprone.fixes.Replacements add(com.google.errorprone.fixes.Replacement,com.google.errorprone.fixes.Replacements$CoalescePolicy)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.fixes.Replacements: com.google.errorprone.fixes.Replacements add(com.google.errorprone.fixes.Replacement,com.google.errorprone.fixes.Replacements$CoalescePolicy)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.Replacements: java.util.Set descending()> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$10: java.lang.String visitWildcardType(com.sun.tools.javac.code.Type$WildcardType,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$10: java.lang.String visitWildcardType(com.sun.tools.javac.code.Type$WildcardType,java.lang.Void)> => <com.sun.tools.javac.code.BoundKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$10: java.lang.String visitClassType(com.sun.tools.javac.code.Type$ClassType,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$10: java.lang.String visitClassType(com.sun.tools.javac.code.Type$ClassType,java.lang.Void)> => <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$10: java.lang.String visitClassType(com.sun.tools.javac.code.Type$ClassType,java.lang.Void)> => <java.util.stream.Collectors: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$10: java.lang.String visitArrayType(com.sun.tools.javac.code.Type$ArrayType,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.Replacements$CoalescePolicy$1: java.lang.String coalesce(java.lang.String,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.Replacements$CoalescePolicy$1: java.lang.String coalesce(java.lang.String,java.lang.String)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.fixes.Replacements$CoalescePolicy$1: java.lang.String coalesce(java.lang.String,java.lang.String)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler$RefactoringTask: void finished(com.sun.source.util.TaskEvent)> => <com.sun.source.util.TaskEvent$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler$RefactoringTask: void finished(com.sun.source.util.TaskEvent)> => <com.sun.tools.javac.util.Log: com.sun.tools.javac.util.Log instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler$RefactoringTask: void finished(com.sun.source.util.TaskEvent)> => <com.sun.tools.javac.util.Log: com.sun.tools.javac.util.Log instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler$RefactoringTask: void finished(com.sun.source.util.TaskEvent)> => <com.sun.tools.javac.util.Log$WriterKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler$RefactoringTask: void finished(com.sun.source.util.TaskEvent)> => <com.sun.tools.javac.util.Log: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler$RefactoringTask: void finished(com.sun.source.util.TaskEvent)> => <com.sun.tools.javac.util.Log$WriterKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler$RefactoringTask: void finished(com.sun.source.util.TaskEvent)> => <com.sun.tools.javac.util.Log: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.FsFileDestination: void writeFile(com.google.errorprone.apply.SourceFile)> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.FsFileDestination: void writeFile(com.google.errorprone.apply.SourceFile)> => <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,byte[],java.nio.file.OpenOption[])>
Found compile-time invoke: <com.google.errorprone.apply.FsFileDestination: void writeFile(com.google.errorprone.apply.SourceFile)> => <java.nio.file.Files: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.ImportOrganizer$Import: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.ImportOrganizer$Import: java.lang.String toString()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.apply.BasicImportOrganizer: com.google.errorprone.apply.ImportOrganizer$OrganizedImports organizeImports(java.util.List)> => <java.util.stream.Collectors: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.BasicImportOrganizer: com.google.errorprone.apply.ImportOrganizer$OrganizedImports organizeImports(java.util.List)> => <java.util.stream.Collectors: java.util.stream.Collector partitioningBy(java.util.function.Predicate,java.util.stream.Collector)>
Found compile-time invoke: <com.google.errorprone.apply.BasicImportOrganizer: com.google.errorprone.apply.ImportOrganizer$OrganizedImports organizeImports(java.util.List)> => <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>
Found compile-time invoke: <com.google.errorprone.apply.DiscardingFileDestination: void writeFile(com.google.errorprone.apply.SourceFile)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.apply.DiscardingFileDestination: void writeFile(com.google.errorprone.apply.SourceFile)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.ImportOrganizer$OrganizedImports: void <init>()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.IdeaImportOrganizer: com.google.errorprone.apply.ImportOrganizer$OrganizedImports organizeImports(java.util.List)> => <java.util.stream.Collectors: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.IdeaImportOrganizer: com.google.errorprone.apply.ImportOrganizer$OrganizedImports organizeImports(java.util.List)> => <java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>
Found compile-time invoke: <com.google.errorprone.apply.IdeaImportOrganizer$PackageType: com.google.errorprone.apply.IdeaImportOrganizer$PackageType valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: void <init>(java.lang.String,java.lang.CharSequence)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: java.util.List getLines()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: java.lang.CharSequence getAsSequence()> => <java.nio.CharBuffer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: java.lang.CharSequence getAsSequence()> => <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: java.lang.CharSequence getAsSequence()> => <java.nio.Buffer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: java.lang.String getFragmentByLines(int,int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: void replaceLines(java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: void replaceLines(int,int,java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: void replaceChars(int,int,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: void replaceChars(int,int,java.lang.String)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: void replaceChars(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: void replaceChars(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: void replaceChars(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: void replaceChars(int,int,java.lang.String)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: void replaceChars(int,int,java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.AndroidImportOrganizer: com.google.errorprone.apply.ImportOrganizer$OrganizedImports organizeImports(java.util.List)> => <java.util.stream.Collectors: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.AndroidImportOrganizer: com.google.errorprone.apply.ImportOrganizer$OrganizedImports organizeImports(java.util.List)> => <java.util.stream.Collectors: java.util.stream.Collector partitioningBy(java.util.function.Predicate)>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier$Task: void run()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier$Task: void run()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier$Task: void run()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier$Task: void run()> => <java.util.logging.Level: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier$Task: void run()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier$Task: void run()> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier$Task: void run()> => <java.util.logging.Level: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.PatchFileDestination: void <init>(java.nio.file.Path,java.nio.file.Path)> => <java.util.TreeMap: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.PatchFileDestination: void writeFile(com.google.errorprone.apply.SourceFile)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.PatchFileDestination: void writeFile(com.google.errorprone.apply.SourceFile)> => <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>
Found compile-time invoke: <com.google.errorprone.apply.PatchFileDestination: void writeFile(com.google.errorprone.apply.SourceFile)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.PatchFileDestination: void writeFile(com.google.errorprone.apply.SourceFile)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.PatchFileDestination: void writeFile(com.google.errorprone.apply.SourceFile)> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.PatchFileDestination: void writeFile(com.google.errorprone.apply.SourceFile)> => <java.nio.file.Files: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.FsFileSource: com.google.errorprone.apply.SourceFile readFile(java.lang.String)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.FsFileSource: com.google.errorprone.apply.SourceFile readFile(java.lang.String)> => <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>
Found compile-time invoke: <com.google.errorprone.apply.FsFileSource: com.google.errorprone.apply.SourceFile readFile(java.lang.String)> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.FsFileSource: com.google.errorprone.apply.SourceFile readFile(java.lang.String)> => <java.nio.file.Files: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier: void <init>(int,com.google.errorprone.apply.FileSource,com.google.errorprone.apply.FileDestination)> => <java.util.concurrent.atomic.AtomicInteger: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier: void <init>(int,com.google.errorprone.apply.FileSource,com.google.errorprone.apply.FileDestination)> => <java.util.concurrent.TimeUnit: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier: void <init>(int,com.google.errorprone.apply.FileSource,com.google.errorprone.apply.FileDestination)> => <java.util.concurrent.AbstractExecutorService: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier: void <init>(int,com.google.errorprone.apply.FileSource,com.google.errorprone.apply.FileDestination)> => <java.util.concurrent.ThreadPoolExecutor: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.ImportStatements: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.ImportStatements: java.lang.String toString()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.apply.ImportStatements: java.lang.String toString()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.apply.ImportStatements: java.lang.String toString()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.apply.ImportStatements: java.lang.String toString()> => <java.util.stream.Collectors: java.util.stream.Collector toList()>
Found compile-time invoke: <com.google.errorprone.apply.ImportStatements: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.ImportStatements: java.lang.String toString()> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.ImportStatements: java.lang.String toString()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.ImportStatements: java.lang.String toString()> => <java.util.stream.Collectors: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.StaticOrder: com.google.errorprone.apply.StaticOrder valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: void <init>(com.google.errorprone.scanner.ScannerSupplier)> => <com.sun.tools.javac.api.JavacTool: com.sun.tools.javac.api.JavacTool create()>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: javax.tools.JavaCompiler$CompilationTask getTask(java.io.Writer,javax.tools.JavaFileManager,javax.tools.DiagnosticListener,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: javax.tools.JavaCompiler$CompilationTask getTask(java.io.Writer,javax.tools.JavaFileManager,javax.tools.DiagnosticListener,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable)> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: java.util.Set getSourceVersions()> => <javax.lang.model.SourceVersion: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: java.util.Set getSourceVersions()> => <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: void setupMessageBundle(com.sun.tools.javac.util.Context)> => <java.util.ResourceBundle: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: void setupMessageBundle(com.sun.tools.javac.util.Context)> => <com.sun.tools.javac.util.JavacMessages: com.sun.tools.javac.util.JavacMessages instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: void setupMessageBundle(com.sun.tools.javac.util.Context)> => <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: void setupMessageBundle(com.sun.tools.javac.util.Context)> => <com.sun.tools.javac.util.JavacMessages: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState$Cache: java.lang.Object get(com.google.errorprone.VisitorState)> => <java.lang.ref.Reference: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState$Cache: java.lang.Object get(com.google.errorprone.VisitorState)> => <java.lang.ref.Reference: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.code.Kinds$KindSelector: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState,com.sun.tools.javac.code.Kinds$KindSelector)> => <com.sun.tools.javac.comp.MemberEnter: com.sun.tools.javac.comp.MemberEnter instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState,com.sun.tools.javac.code.Kinds$KindSelector)> => <com.sun.tools.javac.comp.Enter: com.sun.tools.javac.comp.Enter instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState,com.sun.tools.javac.code.Kinds$KindSelector)> => <com.sun.tools.javac.comp.Enter: com.sun.tools.javac.comp.Enter instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState,com.sun.tools.javac.code.Kinds$KindSelector)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState,com.sun.tools.javac.code.Kinds$KindSelector)> => <com.sun.tools.javac.comp.MemberEnter: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState,com.sun.tools.javac.code.Kinds$KindSelector)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState,com.sun.tools.javac.code.Kinds$KindSelector)> => <com.sun.tools.javac.comp.Enter: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState,com.sun.tools.javac.code.Kinds$KindSelector)> => <com.sun.tools.javac.comp.Enter: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.google.common.collect.ImmutableSet findAllIdents(com.google.errorprone.VisitorState)> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.google.common.collect.ImmutableSet findAllIdents(com.google.errorprone.VisitorState)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.google.common.collect.ImmutableSet findAllIdents(com.google.errorprone.VisitorState)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations$1: java.util.stream.Stream visitString(java.lang.String,java.lang.Void)> => <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.Signatures: java.lang.String prettyMethodSignature(com.sun.tools.javac.code.Symbol$ClassSymbol,com.sun.tools.javac.code.Symbol$MethodSymbol)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Signatures: java.lang.String prettyMethodSignature(com.sun.tools.javac.code.Symbol$ClassSymbol,com.sun.tools.javac.code.Symbol$MethodSymbol)> => <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
Found compile-time invoke: <com.google.errorprone.util.Signatures: java.lang.String prettyMethodSignature(com.sun.tools.javac.code.Symbol$ClassSymbol,com.sun.tools.javac.code.Symbol$MethodSymbol)> => <java.util.stream.Collectors: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations$1Visitor: java.lang.Integer visitInt(int,java.lang.Void)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations$1Visitor: java.lang.Integer visitInt(int,java.lang.Void)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$TargetTypeVisitor: com.sun.tools.javac.code.Type visitCompoundAssignment(com.sun.source.tree.CompoundAssignmentTree,java.lang.Void)> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$TargetTypeVisitor: com.sun.tools.javac.code.Type visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <com.sun.tools.javac.code.BoundKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$TargetTypeVisitor: com.sun.tools.javac.code.Type visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <com.sun.tools.javac.code.Type: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$TargetTypeVisitor: com.sun.tools.javac.code.Type visitReturn(com.sun.source.tree.ReturnTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$TargetTypeVisitor: com.sun.tools.javac.code.Type visitSynchronized(com.sun.source.tree.SynchronizedTree,java.lang.Void)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$TargetTypeVisitor: com.sun.tools.javac.code.Type visitNewClass(com.sun.source.tree.NewClassTree,java.lang.Void)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$TargetTypeVisitor: com.sun.tools.javac.code.Type visitNewArray(com.sun.source.tree.NewArrayTree,java.lang.Void)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.Visibility: com.google.errorprone.util.Visibility valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.util.Visibility: com.google.errorprone.util.Visibility fromModifiers(java.util.Set)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.lang.String getTextFromComment(com.sun.tools.javac.parser.Tokens$Comment)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.AutoValue_ASTHelpers_TargetType: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$ScanThrownTypes: void <init>(com.google.errorprone.VisitorState)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$ScanThrownTypes: java.lang.Void visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$ScanThrownTypes: java.lang.Void visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ErrorProneTokens: void <init>(java.lang.String,int,com.sun.tools.javac.util.Context)> => <com.sun.tools.javac.parser.ScannerFactory: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ErrorProneTokens: void <init>(java.lang.String,int,com.sun.tools.javac.util.Context)> => <com.sun.tools.javac.parser.ScannerFactory: com.sun.tools.javac.parser.ScannerFactory instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.util.ErrorProneTokens: com.google.common.collect.ImmutableList getTokens()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ErrorProneToken: java.util.List comments()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ErrorProneToken: java.util.List comments()> => <java.util.stream.Collectors: java.util.stream.Collector toList()>
Found compile-time invoke: <com.google.errorprone.util.ErrorProneToken: java.util.List comments()> => <java.util.Collections: java.util.List emptyList()>
Found compile-time invoke: <com.google.errorprone.util.ErrorProneToken: java.util.List comments()> => <java.util.stream.Collectors: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Regexes: java.util.Optional convertRegexToLiteral(java.lang.String)> => <java.util.regex.Pattern: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Regexes: java.util.Optional convertRegexToLiteral(java.lang.String)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.Regexes: java.util.Optional convertRegexToLiteral(java.lang.String)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.util.Regexes: java.util.Optional convertRegexToLiteral(java.lang.String)> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.Regexes: java.util.Optional convertRegexToLiteral(java.lang.String)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.util.Regexes: java.util.Optional convertRegexToLiteral(java.lang.String)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.util.Regexes: java.util.Optional convertRegexToLiteral(java.lang.String)> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.util.Regexes: java.util.Optional convertRegexToLiteral(java.lang.String)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Regexes: java.util.Optional convertRegexToLiteral(java.lang.String)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Regexes: java.util.Optional convertRegexToLiteral(java.lang.String)> => <java.lang.Character: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Regexes: java.util.Optional convertRegexToLiteral(java.lang.String)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Regexes: java.util.Optional convertRegexToLiteral(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Regexes: java.util.Optional convertRegexToLiteral(java.lang.String)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitBreak(com.sun.source.tree.BreakTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitBreak(com.sun.source.tree.BreakTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitBreak(com.sun.source.tree.BreakTree,java.lang.Void)> => <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitContinue(com.sun.source.tree.ContinueTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitContinue(com.sun.source.tree.ContinueTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitContinue(com.sun.source.tree.ContinueTree,java.lang.Void)> => <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitBlock(com.sun.source.tree.BlockTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitBlock(com.sun.source.tree.BlockTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitClass(com.sun.source.tree.ClassTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitClass(com.sun.source.tree.ClassTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitVariable(com.sun.source.tree.VariableTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitVariable(com.sun.source.tree.VariableTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitEmptyStatement(com.sun.source.tree.EmptyStatementTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitEmptyStatement(com.sun.source.tree.EmptyStatementTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitLabeledStatement(com.sun.source.tree.LabeledStatementTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitLabeledStatement(com.sun.source.tree.LabeledStatementTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitExpressionStatement(com.sun.source.tree.ExpressionStatementTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitExpressionStatement(com.sun.source.tree.ExpressionStatementTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitExpressionStatement(com.sun.source.tree.ExpressionStatementTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitExpressionStatement(com.sun.source.tree.ExpressionStatementTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitIf(com.sun.source.tree.IfTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitIf(com.sun.source.tree.IfTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitAssert(com.sun.source.tree.AssertTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitAssert(com.sun.source.tree.AssertTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitSwitch(com.sun.source.tree.SwitchTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitSwitch(com.sun.source.tree.SwitchTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitSwitch(com.sun.source.tree.SwitchTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitSwitch(com.sun.source.tree.SwitchTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitSwitch(com.sun.source.tree.SwitchTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitSwitch(com.sun.source.tree.SwitchTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitSwitch(com.sun.source.tree.SwitchTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitSwitch(com.sun.source.tree.SwitchTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitSwitch(com.sun.source.tree.SwitchTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitSwitch(com.sun.source.tree.SwitchTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitSwitch(com.sun.source.tree.SwitchTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitSwitch(com.sun.source.tree.SwitchTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitWhileLoop(com.sun.source.tree.WhileLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitWhileLoop(com.sun.source.tree.WhileLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitWhileLoop(com.sun.source.tree.WhileLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitWhileLoop(com.sun.source.tree.WhileLoopTree,java.lang.Void)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitWhileLoop(com.sun.source.tree.WhileLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitWhileLoop(com.sun.source.tree.WhileLoopTree,java.lang.Void)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitWhileLoop(com.sun.source.tree.WhileLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitWhileLoop(com.sun.source.tree.WhileLoopTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitDoWhileLoop(com.sun.source.tree.DoWhileLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitDoWhileLoop(com.sun.source.tree.DoWhileLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitDoWhileLoop(com.sun.source.tree.DoWhileLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitDoWhileLoop(com.sun.source.tree.DoWhileLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitDoWhileLoop(com.sun.source.tree.DoWhileLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitDoWhileLoop(com.sun.source.tree.DoWhileLoopTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitForLoop(com.sun.source.tree.ForLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitForLoop(com.sun.source.tree.ForLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitForLoop(com.sun.source.tree.ForLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitForLoop(com.sun.source.tree.ForLoopTree,java.lang.Void)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitForLoop(com.sun.source.tree.ForLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitForLoop(com.sun.source.tree.ForLoopTree,java.lang.Void)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitForLoop(com.sun.source.tree.ForLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitForLoop(com.sun.source.tree.ForLoopTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitReturn(com.sun.source.tree.ReturnTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitReturn(com.sun.source.tree.ReturnTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitThrow(com.sun.source.tree.ThrowTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitThrow(com.sun.source.tree.ThrowTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitSynchronized(com.sun.source.tree.SynchronizedTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitSynchronized(com.sun.source.tree.SynchronizedTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: java.lang.Boolean visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: java.util.stream.Stream getDeclarationAndTypeAttributes(com.sun.tools.javac.code.Symbol)> => <java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: java.util.stream.Stream getDeclarationAndTypeAttributes(com.sun.tools.javac.code.Symbol)> => <java.util.stream.Collectors: java.util.stream.Collector toList()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: java.util.stream.Stream getDeclarationAndTypeAttributes(com.sun.tools.javac.code.Symbol)> => <java.util.stream.Collectors: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: java.util.Optional asIntegerValue(javax.lang.model.element.AnnotationValue)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: java.util.Optional asIntegerValue(javax.lang.model.element.AnnotationValue)> => <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: java.util.Optional asStringValue(javax.lang.model.element.AnnotationValue)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: java.util.Optional asStringValue(javax.lang.model.element.AnnotationValue)> => <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: java.util.Optional asEnumValue(java.lang.Class,javax.lang.model.element.AnnotationValue)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: java.util.Optional asEnumValue(java.lang.Class,javax.lang.model.element.AnnotationValue)> => <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: java.util.stream.Stream asStrings(javax.lang.model.element.AnnotationValue)> => <java.util.stream.Stream: java.util.stream.Stream empty()>
Found compile-time invoke: <com.google.errorprone.util.ErrorProneTokens$CommentWithTextAndPosition: java.lang.String getText()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ErrorProneTokens$CommentWithTextAndPosition: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ErrorProneTokens$CommentWithTextAndPosition: java.lang.String toString()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.util.Commented$Position: com.google.errorprone.util.Commented$Position valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.util.Signatures$1: java.lang.String visitWildcardType(com.sun.tools.javac.code.Type$WildcardType,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Signatures$1: java.lang.String visitWildcardType(com.sun.tools.javac.code.Type$WildcardType,java.lang.Void)> => <com.sun.tools.javac.code.BoundKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Signatures$1: java.lang.String visitClassType(com.sun.tools.javac.code.Type$ClassType,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Signatures$1: java.lang.String visitClassType(com.sun.tools.javac.code.Type$ClassType,java.lang.Void)> => <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
Found compile-time invoke: <com.google.errorprone.util.Signatures$1: java.lang.String visitClassType(com.sun.tools.javac.code.Type$ClassType,java.lang.Void)> => <java.util.stream.Collectors: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Signatures$1: java.lang.String visitArrayType(com.sun.tools.javac.code.Type$ArrayType,java.lang.Void)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: boolean sameVariable(com.sun.source.tree.ExpressionTree,com.sun.source.tree.ExpressionTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: boolean sameVariable(com.sun.source.tree.ExpressionTree,com.sun.source.tree.ExpressionTree)> => <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: boolean sameVariable(com.sun.source.tree.ExpressionTree,com.sun.source.tree.ExpressionTree)> => <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: boolean sameVariable(com.sun.source.tree.ExpressionTree,com.sun.source.tree.ExpressionTree)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: boolean sameVariable(com.sun.source.tree.ExpressionTree,com.sun.source.tree.ExpressionTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: boolean sameVariable(com.sun.source.tree.ExpressionTree,com.sun.source.tree.ExpressionTree)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: boolean sameVariable(com.sun.source.tree.ExpressionTree,com.sun.source.tree.ExpressionTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: boolean requiresParentheses(com.sun.source.tree.ExpressionTree,com.google.errorprone.VisitorState)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.source.tree.ExpressionTree getRootAssignable(com.sun.source.tree.MethodInvocationTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.source.tree.ExpressionTree getRootAssignable(com.sun.source.tree.MethodInvocationTree)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Type getReturnType(com.sun.source.tree.ExpressionTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Type getResultType(com.sun.source.tree.ExpressionTree)> => <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Type getResultType(com.sun.source.tree.ExpressionTree)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Type getReceiverType(com.sun.source.tree.ExpressionTree)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Type getReceiverType(com.sun.source.tree.ExpressionTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.source.tree.ExpressionTree getReceiver(com.sun.source.tree.ExpressionTree)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.source.tree.ExpressionTree getReceiver(com.sun.source.tree.ExpressionTree)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.source.tree.ExpressionTree getReceiver(com.sun.source.tree.ExpressionTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.List matchBinaryTree(com.sun.source.tree.BinaryTree,java.util.List,com.google.errorprone.VisitorState)> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.List matchBinaryTree(com.sun.source.tree.BinaryTree,java.util.List,com.google.errorprone.VisitorState)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.List matchBinaryTree(com.sun.source.tree.BinaryTree,java.util.List,com.google.errorprone.VisitorState)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.List matchBinaryTree(com.sun.source.tree.BinaryTree,java.util.List,com.google.errorprone.VisitorState)> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.source.tree.MethodTree findMethod(com.sun.tools.javac.code.Symbol$MethodSymbol,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.api.JavacTrees: com.sun.tools.javac.api.JavacTrees instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.source.tree.ClassTree findClass(com.sun.tools.javac.code.Symbol$ClassSymbol,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.api.JavacTrees: com.sun.tools.javac.api.JavacTrees instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.Set findSuperMethods(com.sun.tools.javac.code.Symbol$MethodSymbol,com.sun.tools.javac.code.Types)> => <java.util.stream.Collectors: java.util.stream.Collector toCollection(java.util.function.Supplier)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.Set findSuperMethods(com.sun.tools.javac.code.Symbol$MethodSymbol,com.sun.tools.javac.code.Types)> => <java.util.stream.Collectors: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: boolean methodCanBeOverridden(com.sun.tools.javac.code.Symbol$MethodSymbol)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.Set annotationsAmong(com.sun.tools.javac.code.Symbol,java.util.Set,com.google.errorprone.VisitorState)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.LinkedHashSet enumValues(com.sun.tools.javac.code.Symbol$TypeSymbol)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.LinkedHashSet enumValues(com.sun.tools.javac.code.Symbol$TypeSymbol)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.LinkedHashSet enumValues(com.sun.tools.javac.code.Symbol$TypeSymbol)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.List getConstructors(com.sun.source.tree.ClassTree)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.lang.Object constValue(com.sun.source.tree.Tree)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.lang.Object constValue(com.sun.source.tree.Tree)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.lang.Object constValue(com.sun.source.tree.Tree)> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: boolean isVoidType(com.sun.tools.javac.code.Type,com.google.errorprone.VisitorState)> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Type getUpperBound(com.sun.tools.javac.code.Type,com.sun.tools.javac.code.Types)> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.List getAnnotationsWithSimpleName(java.util.List,java.lang.String)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.TypeAnnotations$AnnotationType getAnnotationType(com.sun.source.tree.AnnotationTree,com.sun.tools.javac.code.Symbol,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.code.TypeAnnotations: com.sun.tools.javac.code.TypeAnnotations instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.TypeAnnotations$AnnotationType getAnnotationType(com.sun.source.tree.AnnotationTree,com.sun.tools.javac.code.Symbol,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.code.TypeAnnotations: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.lang.String getFileNameFromUri(java.net.URI)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Symbol$MethodSymbol resolveExistingMethod(com.google.errorprone.VisitorState,com.sun.tools.javac.code.Symbol$TypeSymbol,com.sun.tools.javac.util.Name,java.lang.Iterable,java.lang.Iterable)> => <com.sun.tools.javac.comp.Resolve: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Symbol$MethodSymbol resolveExistingMethod(com.google.errorprone.VisitorState,com.sun.tools.javac.code.Symbol$TypeSymbol,com.sun.tools.javac.util.Name,java.lang.Iterable,java.lang.Iterable)> => <com.sun.tools.javac.util.List: com.sun.tools.javac.util.List 'from'(java.lang.Iterable)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Symbol$MethodSymbol resolveExistingMethod(com.google.errorprone.VisitorState,com.sun.tools.javac.code.Symbol$TypeSymbol,com.sun.tools.javac.util.Name,java.lang.Iterable,java.lang.Iterable)> => <com.sun.tools.javac.util.List: com.sun.tools.javac.util.List 'from'(java.lang.Iterable)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Symbol$MethodSymbol resolveExistingMethod(com.google.errorprone.VisitorState,com.sun.tools.javac.code.Symbol$TypeSymbol,com.sun.tools.javac.util.Name,java.lang.Iterable,java.lang.Iterable)> => <com.sun.tools.javac.util.Log: com.sun.tools.javac.util.Log instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Symbol$MethodSymbol resolveExistingMethod(com.google.errorprone.VisitorState,com.sun.tools.javac.code.Symbol$TypeSymbol,com.sun.tools.javac.util.Name,java.lang.Iterable,java.lang.Iterable)> => <com.sun.tools.javac.comp.Enter: com.sun.tools.javac.comp.Enter instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Symbol$MethodSymbol resolveExistingMethod(com.google.errorprone.VisitorState,com.sun.tools.javac.code.Symbol$TypeSymbol,com.sun.tools.javac.util.Name,java.lang.Iterable,java.lang.Iterable)> => <com.sun.tools.javac.comp.Resolve: com.sun.tools.javac.comp.Resolve instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Symbol$MethodSymbol resolveExistingMethod(com.google.errorprone.VisitorState,com.sun.tools.javac.code.Symbol$TypeSymbol,com.sun.tools.javac.util.Name,java.lang.Iterable,java.lang.Iterable)> => <com.sun.tools.javac.util.List: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Symbol$MethodSymbol resolveExistingMethod(com.google.errorprone.VisitorState,com.sun.tools.javac.code.Symbol$TypeSymbol,com.sun.tools.javac.util.Name,java.lang.Iterable,java.lang.Iterable)> => <com.sun.tools.javac.util.Log: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Symbol$MethodSymbol resolveExistingMethod(com.google.errorprone.VisitorState,com.sun.tools.javac.code.Symbol$TypeSymbol,com.sun.tools.javac.util.Name,java.lang.Iterable,java.lang.Iterable)> => <com.sun.tools.javac.comp.Enter: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.google.common.collect.ImmutableSet getGeneratedBy(com.sun.tools.javac.code.Symbol,com.google.errorprone.VisitorState)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.google.common.collect.ImmutableSet getGeneratedBy(com.sun.tools.javac.code.Symbol,com.google.errorprone.VisitorState)> => <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.google.errorprone.util.ASTHelpers$TargetType targetType(com.google.errorprone.VisitorState)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.lang.String createPrivateConstructor(com.sun.source.tree.ClassTree)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: boolean isLocal(com.sun.tools.javac.code.Symbol)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.AutoValue_Commented: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$1: java.lang.Void scan(com.sun.source.tree.Tree,java.lang.Void)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence: com.google.errorprone.util.OperatorPrecedence valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence: com.google.errorprone.util.OperatorPrecedence 'from'(com.sun.source.tree.Tree$Kind)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence: com.google.errorprone.util.OperatorPrecedence 'from'(com.sun.source.tree.Tree$Kind)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Signatures$SigGen: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Signatures$SigGen: java.lang.String toString()> => <java.util.Arrays: byte[] copyOf(byte[],int)>
Found compile-time invoke: <com.google.errorprone.util.Signatures$SigGen: java.lang.String toString()> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Signatures$SigGen: java.lang.String toString()> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations$3Visitor: java.lang.Enum visitEnumConstant(javax.lang.model.element.VariableElement,java.lang.Void)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.ErrorProneError: void <init>(java.lang.String,java.lang.Throwable,com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition,javax.tools.JavaFileObject)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneError: void logFatalError(com.sun.tools.javac.util.Log)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneError: void logFatalError(com.sun.tools.javac.util.Log)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneError: void logFatalError(com.sun.tools.javac.util.Log,com.sun.tools.javac.util.Context)> => <com.sun.tools.javac.util.JCDiagnostic$Factory: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneError: void logFatalError(com.sun.tools.javac.util.Log,com.sun.tools.javac.util.Context)> => <com.sun.tools.javac.util.JCDiagnostic$Factory: com.sun.tools.javac.util.JCDiagnostic$Factory instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.ErrorProneError: void logFatalError(com.sun.tools.javac.util.Log,com.sun.tools.javac.util.Context)> => <com.sun.tools.javac.util.JCDiagnostic$DiagnosticType: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions$Severity: com.google.errorprone.ErrorProneOptions$Severity valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.BugCheckerInfo: com.google.errorprone.BugCheckerInfo create(java.lang.Class)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BugCheckerInfo: com.google.errorprone.BugCheckerInfo create(java.lang.Class)> => <java.lang.reflect.Modifier: boolean isInterface(int)>
Found compile-time invoke: <com.google.errorprone.BugCheckerInfo: com.google.errorprone.BugCheckerInfo create(java.lang.Class)> => <java.lang.reflect.Modifier: boolean isAbstract(int)>
Found compile-time invoke: <com.google.errorprone.BugCheckerInfo: java.util.Set customSuppressionAnnotations()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BugCheckerInfo: java.util.Set customSuppressionAnnotations()> => <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
Found compile-time invoke: <com.google.errorprone.AutoValue_CompositeCodeTransformer: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorPronePlugins: com.google.errorprone.scanner.ScannerSupplier loadPlugins(com.google.errorprone.scanner.ScannerSupplier,com.sun.tools.javac.util.Context)> => <javax.tools.StandardLocation: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorPronePlugins: com.google.errorprone.scanner.ScannerSupplier loadPlugins(com.google.errorprone.scanner.ScannerSupplier,com.sun.tools.javac.util.Context)> => <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>
Found compile-time invoke: <com.google.errorprone.ErrorPronePlugins: com.google.errorprone.scanner.ScannerSupplier loadPlugins(com.google.errorprone.scanner.ScannerSupplier,com.sun.tools.javac.util.Context)> => <com.sun.tools.javac.processing.JavacProcessingEnvironment: com.sun.tools.javac.processing.JavacProcessingEnvironment instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.ErrorPronePlugins: com.google.errorprone.scanner.ScannerSupplier loadPlugins(com.google.errorprone.scanner.ScannerSupplier,com.sun.tools.javac.util.Context)> => <java.util.ServiceLoader: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorPronePlugins: com.google.errorprone.scanner.ScannerSupplier loadPlugins(com.google.errorprone.scanner.ScannerSupplier,com.sun.tools.javac.util.Context)> => <com.sun.tools.javac.processing.JavacProcessingEnvironment: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: java.lang.String[] getRemainingArgs()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.ErrorProneOptions processArgs(java.lang.Iterable)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.ErrorProneOptions processArgs(java.lang.Iterable)> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.ErrorProneOptions processArgs(java.lang.Iterable)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.ErrorProneOptions processArgs(java.lang.Iterable)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.ErrorProneOptions processArgs(java.lang.Iterable)> => <java.util.regex.Pattern: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.ErrorProneOptions processArgs(java.lang.Iterable)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.ErrorProneOptions processArgs(java.lang.String[])> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.ErrorProneOptions processArgs(java.lang.String[])> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.ErrorProneFlags: java.util.Optional get(java.lang.String)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneFlags: java.util.Optional get(java.lang.String)> => <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.AutoValue_RefactoringCollection_RefactoringResult: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.ScannerSupplier: com.google.errorprone.scanner.ScannerSupplier fromBugCheckerClasses(java.lang.Class[])> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.ScannerSupplier: com.google.errorprone.scanner.ScannerSupplier fromBugCheckerClasses(java.lang.Class[])> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.scanner.ScannerSupplier: com.google.errorprone.scanner.ScannerSupplier applyOverrides(com.google.errorprone.ErrorProneOptions)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.Scanner: java.util.Map severityMap()> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.Scanner: java.util.Map severityMap()> => <java.util.Collections: java.util.Map emptyMap()>
Found compile-time invoke: <com.google.errorprone.scanner.InstanceReturningScannerSupplierImpl: com.google.common.collect.ImmutableMap severities()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.InstanceReturningScannerSupplierImpl: com.google.errorprone.ErrorProneFlags getFlags()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.InstanceReturningScannerSupplierImpl: com.google.common.collect.ImmutableSet getEnabledChecks()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.AutoValue_ErrorProneScannerTransformer: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.ErrorProneScanner: void <init>(com.google.errorprone.bugpatterns.BugChecker[])> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.ErrorProneScanner: void <init>(com.google.errorprone.bugpatterns.BugChecker[])> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.scanner.ErrorProneScanner: void <init>(java.lang.Iterable,java.util.Map)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.SuppressionInfo: com.google.errorprone.SuppressionInfo$SuppressedState suppressedState(com.google.errorprone.matchers.Suppressible,boolean,com.google.errorprone.VisitorState)> => <java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)>
Found compile-time invoke: <com.google.errorprone.SuppressionInfo: com.google.errorprone.SuppressionInfo$SuppressedState suppressedState(com.google.errorprone.matchers.Suppressible,boolean,com.google.errorprone.VisitorState)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.SuppressionInfo: com.google.errorprone.SuppressionInfo forCompilationUnit(com.sun.source.tree.CompilationUnitTree,com.google.errorprone.VisitorState)> => <java.util.concurrent.atomic.AtomicBoolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.SuppressionInfo: com.google.errorprone.SuppressionInfo withExtendedSuppressions(com.sun.tools.javac.code.Symbol,com.google.errorprone.VisitorState,java.util.Set)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.SuppressionInfo: com.google.errorprone.SuppressionInfo withExtendedSuppressions(com.sun.tools.javac.code.Symbol,com.google.errorprone.VisitorState,java.util.Set)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.SuppressionInfo: com.google.errorprone.SuppressionInfo withExtendedSuppressions(com.sun.tools.javac.code.Symbol,com.google.errorprone.VisitorState,java.util.Set)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.SuppressionInfo$SuppressedState: com.google.errorprone.SuppressionInfo$SuppressedState valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection$1: com.google.errorprone.RefactoringCollection$RefactoringResult apply(java.net.URI)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection$1: com.google.errorprone.RefactoringCollection$RefactoringResult apply(java.net.URI)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.MaskedClassLoader$1: javax.tools.JavaFileManager make(com.sun.tools.javac.util.Context)> => <com.sun.tools.javac.file.JavacFileManager: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.MaskedClassLoader$1: javax.tools.JavaFileManager make(com.sun.tools.javac.util.Context)> => <com.sun.tools.javac.file.BaseFileManager: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.HasIdentifier$HasIdentifierScanner: java.lang.Boolean visitIdentifier(com.sun.source.tree.IdentifierTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.HasIdentifier$HasIdentifierScanner: java.lang.Boolean visitIdentifier(com.sun.source.tree.IdentifierTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.HasIdentifier$HasIdentifierScanner: java.lang.Boolean reduce(java.lang.Boolean,java.lang.Boolean)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.HasIdentifier$HasIdentifierScanner: java.lang.Boolean reduce(java.lang.Boolean,java.lang.Boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.HasIdentifier$HasIdentifierScanner: java.lang.Boolean reduce(java.lang.Boolean,java.lang.Boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.HasIdentifier$HasIdentifierScanner: java.lang.Boolean reduce(java.lang.Boolean,java.lang.Boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.HasIdentifier$HasIdentifierScanner: java.lang.Boolean visitClass(com.sun.source.tree.ClassTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.HasIdentifier$HasIdentifierScanner: java.lang.Boolean visitClass(com.sun.source.tree.ClassTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.Enclosing$BlockOrCase: boolean matches(com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Enclosing$BlockOrCase: boolean matches(com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher$ExpressionWithConstValueMatcher$1: java.lang.Boolean visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher$ExpressionWithConstValueMatcher$1: java.lang.Boolean visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher$ExpressionWithConstValueMatcher$1: java.lang.Boolean visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher$ExpressionWithConstValueMatcher$1: java.lang.Boolean visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher$ExpressionWithConstValueMatcher$1: java.lang.Boolean visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher$ExpressionWithConstValueMatcher$1: java.lang.Boolean visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher$ExpressionWithConstValueMatcher$1: java.lang.Boolean reduce(java.lang.Boolean,java.lang.Boolean)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher$ExpressionWithConstValueMatcher$1: java.lang.Boolean reduce(java.lang.Boolean,java.lang.Boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher$ExpressionWithConstValueMatcher$1: java.lang.Boolean reduce(java.lang.Boolean,java.lang.Boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher$ExpressionWithConstValueMatcher$1: java.lang.Boolean reduce(java.lang.Boolean,java.lang.Boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.MethodVisibility$Visibility: com.google.errorprone.matchers.MethodVisibility$Visibility valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.matchers.ChildMultiMatcher$ListMatcher: com.google.errorprone.matchers.ChildMultiMatcher$ListMatcher create(com.google.errorprone.matchers.ChildMultiMatcher$MatchType)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.ChildMultiMatcher$ListMatcher: com.google.errorprone.matchers.ChildMultiMatcher$ListMatcher create(com.google.errorprone.matchers.ChildMultiMatcher$MatchType)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.StringLiteral: void <init>(java.lang.String)> => <java.util.regex.Pattern: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.StringLiteral: void <init>(java.lang.String)> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>
Found compile-time invoke: <com.google.errorprone.matchers.AnnotationMatcherUtils: com.sun.source.tree.ExpressionTree getArgument(com.sun.source.tree.AnnotationTree,java.lang.String)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers$2: java.lang.Boolean visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers$2: java.lang.Boolean visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers$2: java.lang.Boolean visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers$2: java.lang.Boolean visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers$2: java.lang.Boolean reduce(java.lang.Boolean,java.lang.Boolean)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers$2: java.lang.Boolean reduce(java.lang.Boolean,java.lang.Boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers$2: java.lang.Boolean reduce(java.lang.Boolean,java.lang.Boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers$2: java.lang.Boolean reduce(java.lang.Boolean,java.lang.Boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.Contains$FirstMatchingScanner: java.lang.Boolean scan(com.sun.source.tree.Tree,java.lang.Boolean)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Contains$FirstMatchingScanner: java.lang.Boolean scan(com.sun.source.tree.Tree,java.lang.Boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.Contains$FirstMatchingScanner: java.lang.Boolean scan(com.sun.source.tree.Tree,java.lang.Boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.Contains$FirstMatchingScanner: java.lang.Boolean scan(com.sun.source.tree.Tree,java.lang.Boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.Contains$FirstMatchingScanner: java.lang.Boolean scan(com.sun.source.tree.Tree,java.lang.Boolean)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Contains$FirstMatchingScanner: java.lang.Boolean scan(com.sun.source.tree.Tree,java.lang.Boolean)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Contains$FirstMatchingScanner: java.lang.Boolean reduce(java.lang.Boolean,java.lang.Boolean)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Contains$FirstMatchingScanner: java.lang.Boolean reduce(java.lang.Boolean,java.lang.Boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: com.google.errorprone.matchers.Matcher anyOf(com.google.errorprone.matchers.Matcher[])> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: com.google.errorprone.matchers.Matcher anyOf(com.google.errorprone.matchers.Matcher[])> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: com.google.errorprone.matchers.CompoundAssignment compoundAssignment(com.sun.source.tree.Tree$Kind,com.google.errorprone.matchers.Matcher,com.google.errorprone.matchers.Matcher)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: com.google.errorprone.matchers.Matcher hasAnyAnnotation(java.lang.Class[])> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: com.google.errorprone.matchers.Matcher hasAnyAnnotation(java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.ChildMultiMatcher$MatchType: com.google.errorprone.matchers.ChildMultiMatcher$MatchType valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.matchers.AutoValue_MultiMatcher_MultiMatchResult: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodInvocationMatcher_Token_ReceiverSupertype: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodInvocationMatcher_Rule: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodInvocationMatcher_Token_Kind: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodMatchState: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodInvocationMatcher_Token_MethodName: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodInvocationMatcher$Context: java.util.Optional create(com.sun.source.tree.ExpressionTree)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodInvocationMatcher$Context: java.util.Optional create(com.sun.source.tree.ExpressionTree)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodInvocationMatcher$Context: java.util.Optional create(com.sun.source.tree.ExpressionTree)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodInvocationMatcher$Context: java.util.Optional create(com.sun.source.tree.ExpressionTree)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodInvocationMatcher_Token_ReceiverType: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodInvocationMatcher$MethodKind: com.google.errorprone.matchers.method.MethodInvocationMatcher$MethodKind valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodInvocationMatcher: com.google.errorprone.matchers.Matcher compile(java.lang.Iterable)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodInvocationMatcher: com.google.errorprone.matchers.Matcher compile(java.lang.Iterable)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodInvocationMatcher: com.google.errorprone.matchers.Matcher compile(java.lang.Iterable)> => <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodInvocationMatcher: com.google.errorprone.matchers.Matcher compile(java.lang.Iterable)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodInvocationMatcher: com.google.errorprone.matchers.Matcher compile(java.lang.Iterable)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_ConstructorMatchState: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodInvocationMatcher_Token_DefinedIn: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodInvocationMatcher$TokenType: com.google.errorprone.matchers.method.MethodInvocationMatcher$TokenType valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodMatcherImpl$OpaqueConstraint: java.util.Optional asRulePart()> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodMatcherImpl$OpaqueConstraint: java.util.Optional asRulePart()> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodInvocationMatcher_Token_ParameterTypes: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodMatcherImpl: com.google.errorprone.matchers.method.MethodMatchers$ParameterMatcher withParameters(java.lang.Iterable)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodMatcherImpl: com.google.errorprone.matchers.method.MethodMatchers$ParameterMatcher withParameters(java.lang.Iterable)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodMatcherImpl: com.google.errorprone.matchers.method.MethodMatchers$ParameterMatcher withParametersOfType(java.lang.Iterable)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodMatcherImpl: com.google.errorprone.matchers.method.MethodMatchers$ParameterMatcher withParametersOfType(java.lang.Iterable)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodMatcherImpl: java.util.Optional asRule()> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodMatcherImpl: java.util.Optional asRule()> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodMatcherImpl: java.util.Optional asRule()> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodMatcherImpl: java.util.Optional asRule()> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.AnnotationType: boolean matches(com.sun.source.tree.AnnotationTree,com.google.errorprone.VisitorState)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Contains: boolean matches(com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Contains: boolean matches(com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers: boolean containsTestMethod(com.sun.source.tree.Tree)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers: boolean containsTestMethod(com.sun.source.tree.Tree)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher: void <init>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.AutoValue_ChildMultiMatcher_Matchable: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher$ExpressionWithConstValueMatcher: boolean matches(com.sun.source.tree.ExpressionTree,com.google.errorprone.VisitorState)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher$ExpressionWithConstValueMatcher: boolean matches(com.sun.source.tree.ExpressionTree,com.google.errorprone.VisitorState)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.Enclosing$EnclosingMatcher: boolean matches(com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.CompoundAssignment: void <init>(java.util.Set,com.google.errorprone.matchers.Matcher,com.google.errorprone.matchers.Matcher)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.CompoundAssignment: void <init>(java.util.Set,com.google.errorprone.matchers.Matcher,com.google.errorprone.matchers.Matcher)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.HasIdentifier: boolean matches(com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.HasIdentifier: boolean matches(com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher$FinalCompileTimeConstantIdentifierMatcher: boolean matches(com.sun.source.tree.ExpressionTree,com.google.errorprone.VisitorState)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.CompileTimeConstantExpressionMatcher$FinalCompileTimeConstantIdentifierMatcher: boolean matches(com.sun.source.tree.ExpressionTree,com.google.errorprone.VisitorState)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Description: java.lang.String getMessage()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Description: java.lang.String getMessage()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.matchers.Description: java.lang.String getMessageWithoutCheckName()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.matchers.Description: java.lang.String getMessageWithoutCheckName()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.matchers.Description: java.lang.String getMessageWithoutCheckName()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Description: java.lang.String getMessageWithoutCheckName()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.AutoValue_ChildMultiMatcher_MatchResult: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection$RefactoringResultType: com.google.errorprone.RefactoringCollection$RefactoringResultType valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.dataflow.AccessPath: boolean isAutoValueAccessor(com.sun.source.tree.Tree)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.AccessPath: boolean isAutoValueAccessor(com.sun.source.tree.Tree)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.AccessPath: com.google.errorprone.dataflow.AccessPath fromFieldAccess(org.checkerframework.shaded.dataflow.cfg.node.FieldAccessNode)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.AccessPath: com.google.errorprone.dataflow.AccessPath fromFieldAccess(org.checkerframework.shaded.dataflow.cfg.node.FieldAccessNode)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.AccessPath: com.google.errorprone.dataflow.AccessPath fromFieldAccess(org.checkerframework.shaded.dataflow.cfg.node.FieldAccessNode)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.AutoValue_DataFlow_CfgParams: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.AutoValue_DataFlow_AnalysisParams: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.AccessPathStore: java.lang.String visualize(org.checkerframework.shaded.dataflow.cfg.visualize.CFGVisualizer)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.Nullness: com.google.errorprone.dataflow.nullnesspropagation.Nullness valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.Nullness: com.google.errorprone.dataflow.nullnesspropagation.Nullness deducedValueWhenNotEqual()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.Nullness: com.google.errorprone.dataflow.nullnesspropagation.Nullness deducedValueWhenNotEqual()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.InferredNullability: com.google.common.collect.ImmutableMap getNullnessGenerics(com.sun.source.tree.MethodInvocationTree)> => <com.sun.tools.javac.tree.TreeInfo: com.sun.tools.javac.code.Symbol symbol(com.sun.tools.javac.tree.JCTree)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.InferredNullability: java.util.Optional getExprNullness(com.sun.source.tree.ExpressionTree)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.InferredNullability: java.util.Optional getExprNullness(com.sun.source.tree.ExpressionTree)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: java.lang.Void visitAssignment(com.sun.source.tree.AssignmentTree,java.lang.Void)> => <com.sun.tools.javac.tree.TreeInfo: com.sun.tools.javac.code.Symbol symbol(com.sun.tools.javac.tree.JCTree)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: java.lang.Void visitVariable(com.sun.source.tree.VariableTree,java.lang.Void)> => <com.sun.tools.javac.tree.TreeInfo: com.sun.tools.javac.code.Symbol symbolFor(com.sun.tools.javac.tree.JCTree)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: java.lang.Void visitReturn(com.sun.source.tree.ReturnTree,java.lang.Void)> => <com.sun.tools.javac.tree.TreeInfo: com.sun.tools.javac.code.Symbol symbolFor(com.sun.tools.javac.tree.JCTree)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: java.lang.Void visitMethodInvocation(com.sun.source.tree.MethodInvocationTree,java.lang.Void)> => <com.sun.tools.javac.tree.TreeInfo: com.sun.tools.javac.code.Symbol symbol(com.sun.tools.javac.tree.JCTree)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.AutoValue_TypeVariableInferenceVar: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.ProperInferenceVar: com.google.errorprone.dataflow.nullnesspropagation.inference.ProperInferenceVar valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.AutoValue_TypeArgInferenceVar: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.AutoValue_NullnessQualifierInference_TypeAndSymbol: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.TrustingNullnessAnalysis: com.google.errorprone.dataflow.nullnesspropagation.Nullness getFieldInitializerNullness(com.sun.source.util.TreePath,com.sun.tools.javac.util.Context)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.TrustingNullnessAnalysis: com.google.errorprone.dataflow.nullnesspropagation.Nullness getFieldInitializerNullness(com.sun.source.util.TreePath,com.sun.tools.javac.util.Context)> => <com.sun.tools.javac.processing.JavacProcessingEnvironment: com.sun.tools.javac.processing.JavacProcessingEnvironment instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.TrustingNullnessAnalysis: com.google.errorprone.dataflow.nullnesspropagation.Nullness getFieldInitializerNullness(com.sun.source.util.TreePath,com.sun.tools.javac.util.Context)> => <com.sun.source.util.TreePath: com.sun.source.util.TreePath getPath(com.sun.source.util.TreePath,com.sun.source.tree.Tree)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.TrustingNullnessAnalysis: com.google.errorprone.dataflow.nullnesspropagation.Nullness getFieldInitializerNullness(com.sun.source.util.TreePath,com.sun.tools.javac.util.Context)> => <com.sun.tools.javac.processing.JavacProcessingEnvironment: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer$MemberName: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessAnnotations: java.util.Optional fromAnnotationsOn(com.sun.tools.javac.code.Symbol)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessAnnotations: java.util.Optional fromAnnotationsOn(com.sun.tools.javac.code.Symbol)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessAnnotations: java.util.Optional fromAnnotationsOn(javax.lang.model.type.TypeMirror)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessAnnotations: java.util.Optional fromAnnotationsOn(javax.lang.model.type.TypeMirror)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessAnnotations: java.util.Optional fromDefaultAnnotations(javax.lang.model.element.Element)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessAnnotations: java.util.Optional fromDefaultAnnotations(javax.lang.model.element.Element)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessAnnotations: java.util.Optional fromDefaultAnnotations(javax.lang.model.element.Element)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessAnnotations: java.util.Optional fromDefaultAnnotations(javax.lang.model.element.Element)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessAnnotations: java.util.Optional getUpperBound(javax.lang.model.type.TypeVariable)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.TrustingNullnessPropagation$TrustReturnAnnotation: com.google.errorprone.dataflow.nullnesspropagation.TrustingNullnessPropagation$TrustReturnAnnotation valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.dataflow.AutoValue_AccessPathStore: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.AutoValue_AccessPath: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.suppliers.Suppliers$21: com.sun.tools.javac.code.Type get(com.google.errorprone.VisitorState)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.suppliers.Suppliers: com.google.errorprone.suppliers.Supplier typeFromString(java.lang.String)> => <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.suppliers.Suppliers$22: com.sun.tools.javac.code.Type get(com.google.errorprone.VisitorState)> => <com.sun.tools.javac.code.Type: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.names.LevenshteinEditDistance: int getWorstCaseEditDistance(int,int)> => <java.lang.Math: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.names.LevenshteinEditDistance: int getWorstCaseEditDistance(int,int)> => <java.lang.Math: int max(int,int)>
Found compile-time invoke: <com.google.errorprone.names.NamingConventions: java.lang.String convertToLowerUnderscore(java.lang.String)> => <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
Found compile-time invoke: <com.google.errorprone.names.NamingConventions: java.lang.String convertToLowerUnderscore(java.lang.String)> => <java.util.stream.Collectors: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.names.NeedlemanWunschEditDistance: int getEditDistance(java.lang.String,java.lang.String,boolean,int,int,int)> => <java.lang.Math: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.names.NeedlemanWunschEditDistance: int getEditDistance(java.lang.String,java.lang.String,boolean,int,int,int)> => <java.lang.Math: int min(int,int)>
Found compile-time invoke: <com.google.errorprone.names.NeedlemanWunschEditDistance: int getEditDistance(java.lang.String,java.lang.String,boolean,int,int,int)> => <java.lang.Math: int min(int,int)>
Found compile-time invoke: <com.google.errorprone.names.NeedlemanWunschEditDistance: int getWorstCaseEditDistance(int,int,int,int,int)> => <java.lang.Math: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.names.NeedlemanWunschEditDistance: int getWorstCaseEditDistance(int,int,int,int,int)> => <java.lang.Math: int min(int,int)>
Found compile-time invoke: <com.google.errorprone.names.NeedlemanWunschEditDistance: int getWorstCaseEditDistance(int,int,int,int,int)> => <java.lang.Math: int min(int,int)>
Found compile-time invoke: <com.google.errorprone.names.NeedlemanWunschEditDistance: int getWorstCaseEditDistance(int,int,int,int,int)> => <java.lang.Math: int max(int,int)>
Found compile-time invoke: <com.google.errorprone.JavacErrorDescriptionListener: void onDescribed(com.google.errorprone.matchers.Description)> => <com.sun.tools.javac.util.JCDiagnostic$Factory: com.sun.tools.javac.util.JCDiagnostic$Factory instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.JavacErrorDescriptionListener: void onDescribed(com.google.errorprone.matchers.Description)> => <com.sun.tools.javac.util.JCDiagnostic$DiagnosticType: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.JavacErrorDescriptionListener: void onDescribed(com.google.errorprone.matchers.Description)> => <com.sun.tools.javac.util.JCDiagnostic$Factory: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneAnalyzer: java.lang.Object getDetailValue(com.sun.tools.javac.code.Symbol$CompletionFailure)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneAnalyzer: java.lang.Object getDetailValue(com.sun.tools.javac.code.Symbol$CompletionFailure)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: java.lang.String inferBinaryName(java.lang.String)> => <java.lang.Character: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: java.lang.String inferBinaryName(java.lang.String)> => <java.lang.Character: boolean isUpperCase(char)>
Found compile-time invoke: <com.google.errorprone.VisitorState: java.lang.String inferBinaryName(java.lang.String)> => <java.lang.Character: boolean isUpperCase(char)>
Found compile-time invoke: <com.google.errorprone.VisitorState: java.lang.String inferBinaryName(java.lang.String)> => <java.lang.Character: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: java.lang.String inferBinaryName(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: void <clinit>()> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: void <clinit>()> => <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum,java.lang.Enum)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFix$Builder: void checkNotSyntheticConstructor(com.sun.source.tree.Tree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: void addRemainingModifiers(com.sun.source.tree.Tree,com.google.errorprone.VisitorState,com.sun.source.tree.ModifiersTree,java.util.Collection,com.google.errorprone.fixes.SuggestedFix$Builder)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: void addRemainingModifiers(com.sun.source.tree.Tree,com.google.errorprone.VisitorState,com.sun.source.tree.ModifiersTree,java.util.Collection,com.google.errorprone.fixes.SuggestedFix$Builder)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: javax.lang.model.element.Modifier getTokModifierKind(com.google.errorprone.util.ErrorProneToken)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: javax.lang.model.element.Modifier getTokModifierKind(com.google.errorprone.util.ErrorProneToken)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: javax.lang.model.element.Modifier getTokModifierKind(com.google.errorprone.util.ErrorProneToken)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: javax.lang.model.element.Modifier getTokModifierKind(com.google.errorprone.util.ErrorProneToken)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: javax.lang.model.element.Modifier getTokModifierKind(com.google.errorprone.util.ErrorProneToken)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: javax.lang.model.element.Modifier getTokModifierKind(com.google.errorprone.util.ErrorProneToken)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: javax.lang.model.element.Modifier getTokModifierKind(com.google.errorprone.util.ErrorProneToken)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: javax.lang.model.element.Modifier getTokModifierKind(com.google.errorprone.util.ErrorProneToken)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: javax.lang.model.element.Modifier getTokModifierKind(com.google.errorprone.util.ErrorProneToken)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: javax.lang.model.element.Modifier getTokModifierKind(com.google.errorprone.util.ErrorProneToken)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: javax.lang.model.element.Modifier getTokModifierKind(com.google.errorprone.util.ErrorProneToken)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: javax.lang.model.element.Modifier getTokModifierKind(com.google.errorprone.util.ErrorProneToken)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: boolean variableClashInScope(com.google.errorprone.VisitorState,com.sun.tools.javac.code.Symbol)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.IllegalStateException malformedMethodInvocationTree(com.sun.source.tree.MethodInvocationTree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.IllegalStateException malformedMethodInvocationTree(com.sun.source.tree.MethodInvocationTree)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.IllegalStateException malformedMethodInvocationTree(com.sun.source.tree.MethodInvocationTree)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: int getThrowsPosition(com.sun.source.tree.MethodTree,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: int getThrowsPosition(com.sun.source.tree.MethodTree,com.google.errorprone.VisitorState)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.sun.source.tree.Tree suppressibleNode(com.sun.source.util.TreePath)> => <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String newArgument(java.util.Collection)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional findArgument(com.sun.source.tree.AnnotationTree,java.lang.String)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional findArgument(com.sun.source.tree.AnnotationTree,java.lang.String)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional findArgument(com.sun.source.tree.AnnotationTree,java.lang.String)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional findArgument(com.sun.source.tree.AnnotationTree,java.lang.String)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.Optional findArgument(com.sun.source.tree.AnnotationTree,java.lang.String)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: boolean compilesWithFix(com.google.errorprone.fixes.Fix,com.google.errorprone.VisitorState,com.google.common.collect.ImmutableList,boolean,int,int)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: boolean compilesWithFix(com.google.errorprone.fixes.Fix,com.google.errorprone.VisitorState,com.google.common.collect.ImmutableList,boolean,int,int)> => <com.sun.tools.javac.api.JavacTool: com.sun.tools.javac.api.JavacTool create()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: boolean compilesWithFix(com.google.errorprone.fixes.Fix,com.google.errorprone.VisitorState,com.google.common.collect.ImmutableList,boolean,int,int)> => <com.sun.tools.javac.util.Options: com.sun.tools.javac.util.Options instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: boolean compilesWithFix(com.google.errorprone.fixes.Fix,com.google.errorprone.VisitorState,com.google.common.collect.ImmutableList,boolean,int,int)> => <com.sun.tools.javac.util.Options: com.sun.tools.javac.util.Options instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: boolean compilesWithFix(com.google.errorprone.fixes.Fix,com.google.errorprone.VisitorState,com.google.common.collect.ImmutableList,boolean,int,int)> => <com.sun.tools.javac.main.Arguments: com.sun.tools.javac.main.Arguments instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: boolean compilesWithFix(com.google.errorprone.fixes.Fix,com.google.errorprone.VisitorState,com.google.common.collect.ImmutableList,boolean,int,int)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: boolean compilesWithFix(com.google.errorprone.fixes.Fix,com.google.errorprone.VisitorState,com.google.common.collect.ImmutableList,boolean,int,int)> => <com.sun.tools.javac.util.Options: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: boolean compilesWithFix(com.google.errorprone.fixes.Fix,com.google.errorprone.VisitorState,com.google.common.collect.ImmutableList,boolean,int,int)> => <javax.tools.JavaFileObject$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: boolean compilesWithFix(com.google.errorprone.fixes.Fix,com.google.errorprone.VisitorState,com.google.common.collect.ImmutableList,boolean,int,int)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: boolean compilesWithFix(com.google.errorprone.fixes.Fix,com.google.errorprone.VisitorState,com.google.common.collect.ImmutableList,boolean,int,int)> => <com.sun.tools.javac.main.Arguments: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: int findOptionOrAppend(com.google.common.collect.ImmutableList$Builder,com.google.common.collect.ImmutableList,java.lang.String,int)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: int findOptionOrAppend(com.google.common.collect.ImmutableList$Builder,com.google.common.collect.ImmutableList,java.lang.String,int)> => <java.lang.Integer: int parseInt(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: int findOptionOrAppend(com.google.common.collect.ImmutableList$Builder,com.google.common.collect.ImmutableList,java.lang.String,int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.common.collect.ImmutableSet supportedTreeTypes(javax.lang.model.element.Element)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.common.collect.ImmutableSet supportedTreeTypes(javax.lang.model.element.Element)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.util.List getTokensAfterOpeningBrace(java.util.List)> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DiscardingFileDestination: void <clinit>()> => <java.util.logging.Logger: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DiscardingFileDestination: void <clinit>()> => <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier: void <clinit>()> => <java.util.logging.Logger: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier: void <clinit>()> => <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.apply.StaticOrder: void <clinit>()> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: void addTaskListener(com.sun.source.util.JavacTask,com.google.errorprone.scanner.ScannerSupplier,com.google.errorprone.ErrorProneOptions)> => <com.sun.tools.javac.util.Options: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: void addTaskListener(com.sun.source.util.JavacTask,com.google.errorprone.scanner.ScannerSupplier,com.google.errorprone.ErrorProneOptions)> => <com.sun.tools.javac.util.Options: com.sun.tools.javac.util.Options instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: com.google.common.collect.ImmutableList defaultToLatestSupportedLanguageLevel(com.google.common.collect.ImmutableList)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState,com.sun.tools.javac.code.Kinds$KindSelector,com.sun.tools.javac.comp.Env)> => <com.sun.tools.javac.comp.Resolve: com.sun.tools.javac.comp.Resolve instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState,com.sun.tools.javac.code.Kinds$KindSelector,com.sun.tools.javac.comp.Env)> => <com.sun.tools.javac.comp.Resolve: com.sun.tools.javac.comp.Resolve instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState,com.sun.tools.javac.code.Kinds$KindSelector,com.sun.tools.javac.comp.Env)> => <com.sun.tools.javac.comp.Resolve: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState,com.sun.tools.javac.code.Kinds$KindSelector,com.sun.tools.javac.comp.Env)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState,com.sun.tools.javac.code.Kinds$KindSelector,com.sun.tools.javac.comp.Env)> => <com.sun.tools.javac.comp.Resolve: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: com.sun.tools.javac.code.Symbol findIdent(java.lang.String,com.google.errorprone.VisitorState,com.sun.tools.javac.code.Kinds$KindSelector,com.sun.tools.javac.comp.Env)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <javax.lang.model.element.ElementKind: javax.lang.model.element.ElementKind[] values()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: void addIfVariable(com.sun.source.tree.Tree,com.google.common.collect.ImmutableSet$Builder)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.SourceCodeEscapers: void <clinit>()> => <java.lang.Character: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.SourceCodeEscapers: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.SourceCodeEscapers: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.SourceCodeEscapers: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.SourceCodeEscapers: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.SourceCodeEscapers: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.SourceCodeEscapers: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.SourceCodeEscapers: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.SourceCodeEscapers: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.tools.javac.code.TypeTag: com.sun.tools.javac.code.TypeTag[] values()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$2: void <clinit>()> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$TargetTypeVisitor: boolean typeIsBoolean(com.sun.tools.javac.code.Type)> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments: com.google.common.collect.ImmutableList findCommentsForArguments(com.sun.source.tree.Tree,java.util.List,int,com.google.errorprone.VisitorState)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments: com.google.common.collect.ImmutableList findCommentsForArguments(com.sun.source.tree.Tree,java.util.List,int,com.google.errorprone.VisitorState)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.util.Comments: com.google.common.collect.ImmutableList findCommentsForArguments(com.sun.source.tree.Tree,java.util.List,int,com.google.errorprone.VisitorState)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.util.Comments: com.google.common.collect.ImmutableList findCommentsForArguments(com.sun.source.tree.Tree,java.util.List,int,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$Comment$CommentStyle: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$Comment$CommentStyle: com.sun.tools.javac.parser.Tokens$Comment$CommentStyle[] values()>
Found compile-time invoke: <com.google.errorprone.util.Comments$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$Comment$CommentStyle: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$Comment$CommentStyle: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$ScanThrownTypes: java.util.Optional getCloseMethod(com.sun.tools.javac.code.Symbol$ClassSymbol,com.google.errorprone.VisitorState)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$ScanThrownTypes: java.util.Optional getCloseMethod(com.sun.tools.javac.code.Symbol$ClassSymbol,com.google.errorprone.VisitorState)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Regexes: void <clinit>()> => <java.lang.Character: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Regexes: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.Regexes: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.Regexes: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.Regexes: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.Regexes: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.Regexes: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.Regexes: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.Regexes: void <clinit>()> => <java.lang.Character: java.lang.Character valueOf(char)>
Found compile-time invoke: <com.google.errorprone.util.SideEffectAnalysis$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.SideEffectAnalysis$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found compile-time invoke: <com.google.errorprone.util.SideEffectAnalysis$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.SideEffectAnalysis$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.SideEffectAnalysis$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations$2: void <clinit>()> => <com.sun.tools.javac.code.TargetType: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations$2: void <clinit>()> => <javax.lang.model.element.ElementKind: javax.lang.model.element.ElementKind[] values()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations$2: void <clinit>()> => <com.sun.tools.javac.code.TargetType: com.sun.tools.javac.code.TargetType[] values()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations$2: void <clinit>()> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.Set directAnnotationsAmong(com.sun.tools.javac.code.Symbol,java.util.Set)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers: void <clinit>()> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers: void <clinit>()> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers: void <clinit>()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers: void <clinit>()> => <javax.lang.model.element.NestingKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.JUnitMatchers: void <clinit>()> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.OperatorPrecedence$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneError: java.lang.String formatMessage(java.lang.String,javax.tools.JavaFileObject,com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.Throwable)> => <com.sun.tools.javac.util.DiagnosticSource: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneError: java.lang.String formatMessage(java.lang.String,javax.tools.JavaFileObject,com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.Throwable)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.ErrorProneError: java.lang.String formatMessage(java.lang.String,javax.tools.JavaFileObject,com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.Throwable)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.ErrorProneError: java.lang.String formatMessage(java.lang.String,javax.tools.JavaFileObject,com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.Throwable)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneError: java.lang.String formatMessage(java.lang.String,javax.tools.JavaFileObject,com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.Throwable)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneError: java.lang.String formatMessage(java.lang.String,javax.tools.JavaFileObject,com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition,java.lang.Throwable)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: void <clinit>()> => <java.util.logging.Logger: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: void <clinit>()> => <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.matchers.MethodVisibility$Visibility: void <clinit>()> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: void <clinit>()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.CompoundAssignment: void <clinit>()> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.CompoundAssignment: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodMatcherImpl$RulePart: java.util.Optional of(com.google.errorprone.matchers.method.MethodInvocationMatcher$TokenType,com.google.common.collect.ImmutableSet)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodMatcherImpl$RulePart: java.util.Optional of(com.google.errorprone.matchers.method.MethodInvocationMatcher$TokenType,com.google.common.collect.ImmutableSet)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.matchers.CompoundAssignment: java.util.Set validateOperators(java.util.Set)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.CompoundAssignment: java.util.Set validateOperators(java.util.Set)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Description: java.lang.String linkTextForDiagnostic(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessAnnotations: void <clinit>()> => <java.util.regex.Pattern: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessAnnotations: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessAnnotations: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer$ReturnValueIsNonNull: void <clinit>()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: void <clinit>()> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.DataFlow: com.google.errorprone.dataflow.DataFlow$Result methodDataflow(com.sun.source.util.TreePath,com.sun.tools.javac.util.Context,org.checkerframework.shaded.dataflow.analysis.ForwardTransferFunction)> => <com.sun.tools.javac.processing.JavacProcessingEnvironment: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.DataFlow: com.google.errorprone.dataflow.DataFlow$Result methodDataflow(com.sun.source.util.TreePath,com.sun.tools.javac.util.Context,org.checkerframework.shaded.dataflow.analysis.ForwardTransferFunction)> => <com.sun.tools.javac.processing.JavacProcessingEnvironment: com.sun.tools.javac.processing.JavacProcessingEnvironment instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.names.NamingConventions: void <clinit>()> => <java.util.regex.Pattern: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.names.NamingConventions: void <clinit>()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.names.NamingConventions: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.names.NamingConventions: void <clinit>()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.names.TermEditDistance: double computeCost(int[],double[][],double[],double[])> => <java.util.stream.DoubleStream: java.util.stream.DoubleStream of(double[])>
Found compile-time invoke: <com.google.errorprone.JavacErrorDescriptionListener: java.lang.String messageForFixes(com.google.errorprone.matchers.Description,java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.lang.reflect.Method getIsLocal()> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.lang.reflect.Method getIsLocal()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.lang.reflect.Method getIsLocal()> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <java.lang.'annotation'.ElementType: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: com.sun.tools.javac.parser.Tokens$TokenKind[] values()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <javax.tools.Diagnostic$Kind: javax.tools.Diagnostic$Kind[] values()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <java.lang.'annotation'.ElementType: java.lang.'annotation'.ElementType[] values()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <javax.tools.Diagnostic$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <javax.tools.Diagnostic$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$11: void <clinit>()> => <java.lang.'annotation'.ElementType: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.net.URI sourceURI(java.net.URI)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.net.URI sourceURI(java.net.URI)> => <java.net.URI: java.net.URI create(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.net.URI sourceURI(java.net.URI)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.net.URI sourceURI(java.net.URI)> => <java.net.URI: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: void checkCompilePolicy(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: void checkCompilePolicy(java.lang.String)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: void checkCompilePolicy(java.lang.String)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BaseErrorProneJavaCompiler: void checkCompilePolicy(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Type binaryNumericPromotion(com.sun.tools.javac.code.Type,com.sun.tools.javac.code.Type,com.google.errorprone.VisitorState)> => <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Type binaryNumericPromotion(com.sun.tools.javac.code.Type,com.sun.tools.javac.code.Type,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Type unaryNumericPromotion(com.sun.tools.javac.code.Type,com.google.errorprone.VisitorState)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: com.sun.tools.javac.code.Type unaryNumericPromotion(com.sun.tools.javac.code.Type,com.google.errorprone.VisitorState)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Comments: java.util.Optional computeEndPosition(com.sun.source.tree.Tree,java.lang.CharSequence,com.google.errorprone.VisitorState)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.RuntimeVersion: int getMajor()> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.RuntimeVersion: int getMajor()> => <java.lang.System: java.lang.String getProperty(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.util.RuntimeVersion: int getMajor()> => <java.lang.Double: double parseDouble(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.util.RuntimeVersion: int getMajor()> => <java.lang.System: java.lang.String getProperty(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.util.RuntimeVersion: int getMajor()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.RuntimeVersion: int getMajor()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.RuntimeVersion: int getMajor()> => <java.lang.Double: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.RuntimeVersion: int getMajor()> => <java.lang.System: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: void writePatchFile(java.util.concurrent.atomic.AtomicBoolean,java.net.URI,com.google.errorprone.apply.PatchFileDestination,java.nio.file.Path)> => <java.nio.file.Files: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: void writePatchFile(java.util.concurrent.atomic.AtomicBoolean,java.net.URI,com.google.errorprone.apply.PatchFileDestination,java.nio.file.Path)> => <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,byte[],java.nio.file.OpenOption[])>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: void writePatchFile(java.util.concurrent.atomic.AtomicBoolean,java.net.URI,com.google.errorprone.apply.PatchFileDestination,java.nio.file.Path)> => <java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: void writePatchFile(java.util.concurrent.atomic.AtomicBoolean,java.net.URI,com.google.errorprone.apply.PatchFileDestination,java.nio.file.Path)> => <java.nio.file.Files: boolean deleteIfExists(java.nio.file.Path)>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: void writePatchFile(java.util.concurrent.atomic.AtomicBoolean,java.net.URI,com.google.errorprone.apply.PatchFileDestination,java.nio.file.Path)> => <java.nio.file.StandardOpenOption: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: void writePatchFile(java.util.concurrent.atomic.AtomicBoolean,java.net.URI,com.google.errorprone.apply.PatchFileDestination,java.nio.file.Path)> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: void writePatchFile(java.util.concurrent.atomic.AtomicBoolean,java.net.URI,com.google.errorprone.apply.PatchFileDestination,java.nio.file.Path)> => <java.nio.file.Files: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: void writePatchFile(java.util.concurrent.atomic.AtomicBoolean,java.net.URI,com.google.errorprone.apply.PatchFileDestination,java.nio.file.Path)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: void visitTypeVarRefs(com.sun.tools.javac.code.Symbol$TypeVariableSymbol,com.sun.tools.javac.code.Type,java.util.ArrayDeque,com.sun.tools.javac.code.Type,com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference$TypeComponentConsumer)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: void visitTypeVarRefs(com.sun.tools.javac.code.Symbol$TypeVariableSymbol,com.sun.tools.javac.code.Type,java.util.ArrayDeque,com.sun.tools.javac.code.Type,com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference$TypeComponentConsumer)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer$ClassAndMethod: com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer$ClassAndMethod make(com.sun.tools.javac.code.Symbol$MethodSymbol,com.sun.tools.javac.code.Types)> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: java.nio.file.Path buildRootPath()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: java.nio.file.Path buildRootPath()> => <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>
Found compile-time invoke: <com.google.errorprone.ErrorProneAnalyzer: void <init>(com.google.common.base.Supplier,com.google.errorprone.ErrorProneOptions,com.sun.tools.javac.util.Context,com.google.errorprone.DescriptionListener$Factory)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneAnalyzer$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneAnalyzer$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found compile-time invoke: <com.google.errorprone.ErrorProneAnalyzer$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.JavacErrorDescriptionListener: java.util.EnumSet lambda$static$0()> => <com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.JavacErrorDescriptionListener: java.util.EnumSet lambda$static$0()> => <java.util.EnumSet: java.util.EnumSet noneOf(java.lang.Class)>
Found compile-time invoke: <com.google.errorprone.JavacErrorDescriptionListener: java.util.EnumSet lambda$static$0()> => <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum)>
Found compile-time invoke: <com.google.errorprone.JavacErrorDescriptionListener: java.util.EnumSet lambda$static$0()> => <com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag: com.sun.tools.javac.util.JCDiagnostic$DiagnosticFlag valueOf(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.CodeTransformer lambda$processArgs$0(java.lang.String)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.CodeTransformer lambda$processArgs$0(java.lang.String)> => <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.CodeTransformer lambda$processArgs$0(java.lang.String)> => <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.CodeTransformer lambda$processArgs$0(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.CodeTransformer lambda$processArgs$0(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.CodeTransformer lambda$processArgs$0(java.lang.String)> => <java.io.ObjectInputStream: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions: com.google.errorprone.CodeTransformer lambda$processArgs$0(java.lang.String)> => <java.nio.file.Files: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneAnalyzer: com.google.errorprone.CodeTransformer lambda$scansPlugins$0(com.google.errorprone.scanner.ScannerSupplier,com.sun.tools.javac.util.Context,com.google.errorprone.ErrorProneOptions)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: java.lang.String statsKey(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneFlags$parseBoolean__74: java.lang.Object apply(java.lang.Object)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneFlags$parseBoolean__74: java.lang.Object apply(java.lang.Object)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.ErrorProneFlags$valueOf__77: java.lang.Object apply(java.lang.Object)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneFlags$valueOf__77: java.lang.Object apply(java.lang.Object)> => <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: java.lang.String lambda$addSuppressWarnings$7(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: java.lang.Boolean lambda$methodCallInDeclarationOfThrowingRunnable$4(com.google.errorprone.VisitorState,com.sun.source.tree.Tree)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: java.lang.Boolean lambda$methodCallInDeclarationOfThrowingRunnable$4(com.google.errorprone.VisitorState,com.sun.source.tree.Tree)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneFlags: boolean parseBoolean(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneFlags: boolean parseBoolean(java.lang.String)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.ErrorProneFlags: boolean parseBoolean(java.lang.String)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.lang.Boolean lambda$isInherited$6(com.google.errorprone.VisitorState,com.sun.tools.javac.util.Name)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.lang.Boolean lambda$isInherited$6(com.google.errorprone.VisitorState,com.sun.tools.javac.util.Name)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.lang.Boolean lambda$isInherited$6(com.google.errorprone.VisitorState,com.sun.tools.javac.util.Name)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.lang.Boolean lambda$isInherited$6(com.google.errorprone.VisitorState,com.sun.tools.javac.util.Name)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.names.TermEditDistance: java.lang.Integer lambda$getNormalizedEditDistance$5(java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.names.TermEditDistance: java.lang.Integer lambda$getNormalizedEditDistance$5(java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.stream.Stream lambda$matchingMethods$5(com.sun.tools.javac.util.Name,com.sun.tools.javac.util.Filter,com.sun.tools.javac.code.Type)> => <com.sun.tools.javac.code.Scope$LookupKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: java.util.stream.Stream lambda$matchingMethods$5(com.sun.tools.javac.util.Name,com.sun.tools.javac.util.Filter,com.sun.tools.javac.code.Type)> => <java.util.stream.Stream: java.util.stream.Stream empty()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: com.google.errorprone.fixes.SuggestedFix lambda$suggestExemptingAnnotation$11(com.google.errorprone.fixes.SuggestedFix$Builder,java.lang.String,com.sun.source.tree.Tree)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: com.google.errorprone.RefactoringCollection$RefactoringResult lambda$refactor$0(java.net.URI)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: com.google.errorprone.RefactoringCollection$RefactoringResult lambda$refactor$0(java.net.URI)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.ErrorProneFlags: java.lang.Enum asEnumValue(java.lang.String,java.lang.String,java.lang.Class)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneFlags: java.lang.Enum asEnumValue(java.lang.String,java.lang.String,java.lang.Class)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.ErrorProneFlags: java.lang.Enum asEnumValue(java.lang.String,java.lang.String,java.lang.Class)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found compile-time invoke: <com.google.errorprone.ErrorProneFlags: java.lang.Enum asEnumValue(java.lang.String,java.lang.String,java.lang.Class)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: com.google.common.collect.ImmutableSet lambda$static$ed23e71$1(com.google.errorprone.VisitorState)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: com.google.common.collect.ImmutableSet lambda$static$ed23e71$1(com.google.errorprone.VisitorState)> => <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.SuppressionInfo: com.google.common.collect.ImmutableSet lambda$static$8396bbc7$1(com.google.errorprone.VisitorState)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.SuppressionInfo: com.google.common.collect.ImmutableSet lambda$static$8396bbc7$1(com.google.errorprone.VisitorState)> => <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$isVariable$1(com.sun.tools.javac.code.Symbol,com.google.errorprone.VisitorState)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.bugpatterns.BugChecker: boolean lambda$suppressionPredicate$2(com.google.errorprone.suppliers.Supplier,java.util.Set,com.google.errorprone.VisitorState)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.bugpatterns.BugChecker: boolean lambda$suppressionPredicate$2(com.google.errorprone.suppliers.Supplier,java.util.Set,com.google.errorprone.VisitorState)> => <java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$isInstanceField$0(com.sun.tools.javac.code.Symbol,com.google.errorprone.VisitorState)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.bugpatterns.BugChecker: boolean isSuppressed(java.lang.SuppressWarnings)> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.bugpatterns.BugChecker: boolean isSuppressed(java.lang.SuppressWarnings)> => <java.util.Collections: boolean disjoint(java.util.Collection,java.util.Collection)>
Found compile-time invoke: <com.google.errorprone.bugpatterns.BugChecker: boolean isSuppressed(java.lang.SuppressWarnings)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.bugpatterns.BugChecker: boolean isSuppressed(java.lang.SuppressWarnings)> => <java.util.Collections: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFix$Builder: void <init>()> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFix$Builder: void <init>()> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.AutoValue_Replacement: void <init>(com.google.common.collect.Range,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.AutoValue_Replacement: void <init>(com.google.common.collect.Range,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$3: void process(com.sun.source.tree.Tree,javax.lang.model.element.Name)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$AdditionPosition$1: int pos(com.sun.source.tree.ClassTree,com.google.errorprone.VisitorState)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$AdditionPosition$1: int pos(com.sun.source.tree.ClassTree,com.google.errorprone.VisitorState)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes$AdditionPosition$1: int pos(com.sun.source.tree.ClassTree,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DescriptionBasedDiff: void <init>(com.sun.tools.javac.tree.JCTree$JCCompilationUnit,boolean,com.google.errorprone.apply.ImportOrganizer)> => <java.nio.file.Paths: java.nio.file.Path get(java.net.URI)>
Found compile-time invoke: <com.google.errorprone.apply.DescriptionBasedDiff: void <init>(com.sun.tools.javac.tree.JCTree$JCCompilationUnit,boolean,com.google.errorprone.apply.ImportOrganizer)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.apply.DescriptionBasedDiff: void <init>(com.sun.tools.javac.tree.JCTree$JCCompilationUnit,boolean,com.google.errorprone.apply.ImportOrganizer)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: java.util.List getLines(int,int)> => <java.io.BufferedReader: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: java.util.List getLines(int,int)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.SourceFile: java.util.List getLines(int,int)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.AndroidImportOrganizer: void organizePartition(com.google.errorprone.apply.ImportOrganizer$OrganizedImports,java.util.List)> => <java.util.stream.Collectors: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.AndroidImportOrganizer: void organizePartition(com.google.errorprone.apply.ImportOrganizer$OrganizedImports,java.util.List)> => <java.util.stream.Collectors: java.util.stream.Collector groupingBy(java.util.function.Function,java.util.function.Supplier,java.util.stream.Collector)>
Found compile-time invoke: <com.google.errorprone.apply.AndroidImportOrganizer: void organizePartition(com.google.errorprone.apply.ImportOrganizer$OrganizedImports,java.util.List)> => <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>
Found compile-time invoke: <com.google.errorprone.apply.ImportStatements: void <init>(com.sun.tools.javac.tree.JCTree$JCExpression,java.util.List,com.sun.tools.javac.tree.EndPosTable,com.google.errorprone.apply.ImportOrganizer)> => <java.lang.Math: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.ImportStatements: void <init>(com.sun.tools.javac.tree.JCTree$JCExpression,java.util.List,com.sun.tools.javac.tree.EndPosTable,com.google.errorprone.apply.ImportOrganizer)> => <java.lang.Math: int max(int,int)>
Found compile-time invoke: <com.google.errorprone.apply.ImportStatements: void <init>(com.sun.tools.javac.tree.JCTree$JCExpression,java.util.List,com.sun.tools.javac.tree.EndPosTable,com.google.errorprone.apply.ImportOrganizer)> => <java.lang.Math: int min(int,int)>
Found compile-time invoke: <com.google.errorprone.apply.ImportStatements: void <init>(com.sun.tools.javac.tree.JCTree$JCExpression,java.util.List,com.sun.tools.javac.tree.EndPosTable,com.google.errorprone.apply.ImportOrganizer)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$TargetTypeVisitor: com.sun.tools.javac.code.Type visitMethodInvocationOrNewClass(java.util.List,com.sun.tools.javac.code.Symbol$MethodSymbol,com.sun.tools.javac.code.Type)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$TargetTypeVisitor: com.sun.tools.javac.code.Type visitMethodInvocationOrNewClass(java.util.List,com.sun.tools.javac.code.Symbol$MethodSymbol,com.sun.tools.javac.code.Type)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$TargetTypeVisitor: com.sun.tools.javac.code.Type visitMethodInvocationOrNewClass(java.util.List,com.sun.tools.javac.code.Symbol$MethodSymbol,com.sun.tools.javac.code.Type)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$TargetTypeVisitor: com.sun.tools.javac.code.Type visitMethodInvocationOrNewClass(java.util.List,com.sun.tools.javac.code.Symbol$MethodSymbol,com.sun.tools.javac.code.Type)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$TargetTypeVisitor: com.sun.tools.javac.code.Type visitMethodInvocationOrNewClass(java.util.List,com.sun.tools.javac.code.Symbol$MethodSymbol,com.sun.tools.javac.code.Type)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$TargetTypeVisitor: com.sun.tools.javac.code.Type visitMethodInvocationOrNewClass(java.util.List,com.sun.tools.javac.code.Symbol$MethodSymbol,com.sun.tools.javac.code.Type)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: com.sun.source.tree.Tree skipLabel(com.sun.tools.javac.tree.JCTree)> => <com.sun.tools.javac.tree.JCTree$Tag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$parentNode$eb1b4d6c$1(com.google.errorprone.matchers.Matcher,com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$classLiteral$454231c9$1(com.google.errorprone.matchers.Matcher,com.sun.source.tree.ExpressionTree,com.google.errorprone.VisitorState)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$booleanLiteral$a43f0f38$1(boolean,com.sun.source.tree.ExpressionTree,com.google.errorprone.VisitorState)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$binaryTree$fc48e611$1(com.google.errorprone.matchers.Matcher,com.google.errorprone.matchers.Matcher,com.sun.source.tree.BinaryTree,com.google.errorprone.VisitorState)> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$binaryTree$fc48e611$1(com.google.errorprone.matchers.Matcher,com.google.errorprone.matchers.Matcher,com.sun.source.tree.BinaryTree,com.google.errorprone.VisitorState)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$isLastStatementInBlock$611ce5a$1(com.sun.source.tree.StatementTree,com.google.errorprone.VisitorState)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$hasAnnotation$ca1806b3$1(javax.lang.model.type.TypeMirror,java.lang.String,com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.processing.JavacProcessingEnvironment: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$hasAnnotation$ca1806b3$1(javax.lang.model.type.TypeMirror,java.lang.String,com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.processing.JavacProcessingEnvironment: com.sun.tools.javac.processing.JavacProcessingEnvironment instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$isTransient$cce5db2a$1(com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$intLiteral$e68fca9a$1(int,com.sun.source.tree.ExpressionTree,com.google.errorprone.VisitorState)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$isEnum$2753b31$1(com.sun.source.tree.ClassTree,com.google.errorprone.VisitorState)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$isField$52a390bd$1(com.sun.source.tree.VariableTree,com.google.errorprone.VisitorState)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$booleanConstant$a43f0f38$1(boolean,com.sun.source.tree.ExpressionTree,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.code.TypeTag: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$inSynchronized$cce5db2a$1(com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$nullLiteral$40f42321$1(com.sun.source.tree.ExpressionTree,com.google.errorprone.VisitorState)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean siblingStatement(int,com.google.errorprone.matchers.Matcher,com.sun.source.tree.StatementTree,com.google.errorprone.VisitorState)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions$PatchingOptions$Builder: com.google.errorprone.ErrorProneOptions$PatchingOptions build()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BugCheckerInfo: void <init>(java.lang.Class,com.google.errorprone.BugPattern)> => <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.BugCheckerInfo: void <init>(java.lang.Class,com.google.errorprone.BugPattern)> => <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.BugCheckerInfo: java.lang.String createLinkUrl(com.google.errorprone.BugPattern)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.BugCheckerInfo: java.lang.String createLinkUrl(com.google.errorprone.BugPattern)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BugCheckerInfo: java.lang.String createLinkUrl(com.google.errorprone.BugPattern)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BugCheckerInfo: java.lang.String createLinkUrl(com.google.errorprone.BugPattern)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.BugCheckerInfo: java.lang.String createLinkUrl(com.google.errorprone.BugPattern)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.AutoValue_ErrorProneOptions_PatchingOptions$Builder: com.google.errorprone.ErrorProneOptions$PatchingOptions$Builder inPlace(boolean)> => <java.lang.Boolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.AutoValue_ErrorProneOptions_PatchingOptions$Builder: com.google.errorprone.ErrorProneOptions$PatchingOptions$Builder inPlace(boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found compile-time invoke: <com.google.errorprone.AutoValue_ErrorProneOptions_PatchingOptions$Builder: com.google.errorprone.ErrorProneOptions$PatchingOptions$Builder baseDirectory(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.AutoValue_ErrorProneOptions_PatchingOptions$Builder: com.google.errorprone.ErrorProneOptions$PatchingOptions$Builder namedCheckers(com.google.common.collect.ImmutableSet)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.AutoValue_ErrorProneOptions_PatchingOptions$Builder: com.google.errorprone.ErrorProneOptions$PatchingOptions$Builder importOrganizer(com.google.errorprone.apply.ImportOrganizer)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.AutoValue_ErrorProneScannerTransformer: void <init>(com.google.errorprone.scanner.Scanner)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.ErrorProneScannerTransformer: com.google.errorprone.VisitorState createVisitorState(com.sun.tools.javac.util.Context,com.google.errorprone.DescriptionListener)> => <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.scanner.InstanceReturningScannerSupplierImpl: com.google.common.collect.ImmutableSet disabled()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.AutoValue_CompositeCodeTransformer: void <init>(com.google.common.collect.ImmutableList)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodInvocationMatcher_Token_MethodName: void <init>(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers: boolean lambda$isBoxedPrimitiveType$2a1768db$1(com.sun.tools.javac.code.Type,com.google.errorprone.VisitorState)> => <com.sun.tools.javac.code.Type: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodInvocationMatcher_Token_ParameterTypes: void <init>(com.google.common.collect.ImmutableList)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodInvocationMatcher_Token_DefinedIn: void <init>(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodInvocationMatcher_Token_ReceiverSupertype: void <init>(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodInvocationMatcher_Token_ReceiverType: void <init>(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodInvocationMatcher_Token_Kind: void <init>(com.google.errorprone.matchers.method.MethodInvocationMatcher$MethodKind)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.BaseMethodMatcher$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.BaseMethodMatcher$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found compile-time invoke: <com.google.errorprone.matchers.method.BaseMethodMatcher$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.BaseMethodMatcher$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodInvocationMatcher_Rule: void <init>(com.google.common.collect.ImmutableMap)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.AutoValue_ChildMultiMatcher_Matchable: void <init>(com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.AutoValue_ChildMultiMatcher_Matchable: void <init>(com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.AnnotationMatcher: java.lang.Iterable getChildNodes(com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.AnnotationMatcher: java.lang.Iterable getChildNodes(com.sun.source.tree.Tree,com.google.errorprone.VisitorState)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: void <init>(com.google.errorprone.dataflow.nullnesspropagation.Nullness,com.google.common.base.Predicate)> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.InferredNullability: java.util.Optional getNullness(com.google.errorprone.dataflow.nullnesspropagation.inference.InferenceVariable)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.InferredNullability: java.util.Optional getNullness(com.google.errorprone.dataflow.nullnesspropagation.inference.InferenceVariable)> => <java.util.Optional: java.util.Optional empty()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.InferredNullability: java.util.Optional getNullness(com.google.errorprone.dataflow.nullnesspropagation.inference.InferenceVariable)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.InferredNullability: java.util.Optional getNullness(com.google.errorprone.dataflow.nullnesspropagation.inference.InferenceVariable)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: void generateConstraintsFromAnnotations(com.sun.tools.javac.code.Type,com.sun.tools.javac.code.Symbol,com.sun.tools.javac.code.Type,com.sun.source.tree.Tree,java.util.ArrayDeque)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: void generateConstraintsFromAnnotations(com.sun.tools.javac.code.Type,com.sun.tools.javac.code.Symbol,com.sun.tools.javac.code.Type,com.sun.source.tree.Tree,java.util.ArrayDeque)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: void generateConstraintsForWrite(com.sun.tools.javac.code.Type,com.sun.tools.javac.code.Symbol,com.sun.source.tree.ExpressionTree,com.sun.source.tree.Tree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: com.google.errorprone.dataflow.nullnesspropagation.Nullness visitMethodInvocation(org.checkerframework.shaded.dataflow.cfg.node.MethodInvocationNode,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates)> => <com.sun.tools.javac.code.Types: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: com.google.errorprone.dataflow.nullnesspropagation.Nullness visitMethodInvocation(org.checkerframework.shaded.dataflow.cfg.node.MethodInvocationNode,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates)> => <com.sun.tools.javac.code.Symtab: com.sun.tools.javac.code.Symtab instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: com.google.errorprone.dataflow.nullnesspropagation.Nullness visitMethodInvocation(org.checkerframework.shaded.dataflow.cfg.node.MethodInvocationNode,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates)> => <com.sun.tools.javac.code.Types: com.sun.tools.javac.code.Types instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: com.google.errorprone.dataflow.nullnesspropagation.Nullness visitMethodInvocation(org.checkerframework.shaded.dataflow.cfg.node.MethodInvocationNode,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates)> => <com.sun.tools.javac.code.Types: com.sun.tools.javac.code.Types instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: com.google.errorprone.dataflow.nullnesspropagation.Nullness visitMethodInvocation(org.checkerframework.shaded.dataflow.cfg.node.MethodInvocationNode,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates)> => <com.sun.tools.javac.code.Symtab: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: void setConditionalArgumentNullness(com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates,java.util.List,com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer$ClassAndMethod,com.sun.tools.javac.code.Types,com.sun.tools.javac.code.Symtab)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: void setConditionalArgumentNullness(com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates,com.google.errorprone.dataflow.nullnesspropagation.AbstractNullnessPropagationTransfer$Updates,java.util.List,com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer$ClassAndMethod,com.sun.tools.javac.code.Types,com.sun.tools.javac.code.Symtab)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: java.util.List variablesAtIndexes(java.util.Set,java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: java.util.List variablesAtIndexes(java.util.Set,java.util.List)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: java.util.List variablesAtIndexes(java.util.Set,java.util.List)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: boolean isEqualsMethod(com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer$MemberName,java.util.List,com.sun.tools.javac.code.Types,com.sun.tools.javac.code.Symtab)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: boolean isEqualsMethod(com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer$MemberName,java.util.List,com.sun.tools.javac.code.Types,com.sun.tools.javac.code.Symtab)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: boolean isCatchVariable(org.checkerframework.shaded.dataflow.cfg.node.VariableDeclarationNode)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.ProperInferenceVar: com.google.errorprone.dataflow.nullnesspropagation.inference.InferenceVariable create(com.google.errorprone.dataflow.nullnesspropagation.Nullness)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.ProperInferenceVar: com.google.errorprone.dataflow.nullnesspropagation.inference.InferenceVariable create(com.google.errorprone.dataflow.nullnesspropagation.Nullness)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.AndroidImportOrganizer$init__417: java.lang.Object get()> => <java.util.TreeMap: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.IdeaImportOrganizer$init__22: java.lang.Object get()> => <java.util.TreeMap: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$init__48: java.lang.Object get()> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.names.TermEditDistance: java.lang.Double lambda$new$0(java.lang.String,java.lang.String)> => <java.lang.Double: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.names.TermEditDistance: java.lang.Double lambda$new$0(java.lang.String,java.lang.String)> => <java.lang.Double: java.lang.Double valueOf(double)>
Found compile-time invoke: <com.google.errorprone.names.TermEditDistance: java.lang.Double lambda$new$1(java.lang.Integer,java.lang.Integer)> => <java.lang.Double: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.names.TermEditDistance: java.lang.Double lambda$new$1(java.lang.Integer,java.lang.Integer)> => <java.lang.Double: java.lang.Double valueOf(double)>
Found compile-time invoke: <com.google.errorprone.util.Comments: void lambda$findCommentsForArguments$0(com.google.common.collect.TreeRangeSet,int,com.google.errorprone.VisitorState,com.sun.source.tree.ExpressionTree)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.util.Comments: void lambda$findCommentsForArguments$0(com.google.common.collect.TreeRangeSet,int,com.google.errorprone.VisitorState,com.sun.source.tree.ExpressionTree)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.util.Comments: void lambda$findCommentsForArguments$0(com.google.common.collect.TreeRangeSet,int,com.google.errorprone.VisitorState,com.sun.source.tree.ExpressionTree)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier: void decrementTasks()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier: void decrementTasks()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier: void decrementTasks()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier: void decrementTasks()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier: void decrementTasks()> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier: void decrementTasks()> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.DiffApplier: void decrementTasks()> => <java.util.logging.Level: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.AutoValue_ASTHelpers_TargetType: void <init>(com.sun.tools.javac.code.Type,com.sun.source.util.TreePath)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.AutoValue_ASTHelpers_TargetType: void <init>(com.sun.tools.javac.code.Type,com.sun.source.util.TreePath)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions$Builder: void parseSeverity(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions$Builder: void parseSeverity(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions$Builder: void parseSeverity(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.ErrorProneOptions$Builder: void parseSeverity(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.AutoValue_ChildMultiMatcher_MatchResult: void <init>(com.google.common.collect.ImmutableList,boolean)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.AutoValue_MultiMatcher_MultiMatchResult: void <init>(boolean,com.google.common.collect.ImmutableList)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.AutoValue_AccessPath: void <init>(javax.lang.model.element.Element,com.google.common.collect.ImmutableList)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.AutoValue_AccessPathStore: void <init>(com.google.common.collect.ImmutableMap)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.AutoValue_TypeArgInferenceVar: void <init>(com.google.common.collect.ImmutableList,com.sun.source.tree.Tree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.AutoValue_TypeArgInferenceVar: void <init>(com.google.common.collect.ImmutableList,com.sun.source.tree.Tree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.AutoValue_TypeVariableInferenceVar: void <init>(com.sun.tools.javac.code.Symbol$TypeVariableSymbol,com.sun.source.tree.MethodInvocationTree,com.google.common.collect.ImmutableList)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.AutoValue_TypeVariableInferenceVar: void <init>(com.sun.tools.javac.code.Symbol$TypeVariableSymbol,com.sun.source.tree.MethodInvocationTree,com.google.common.collect.ImmutableList)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.AutoValue_TypeVariableInferenceVar: void <init>(com.sun.tools.javac.code.Symbol$TypeVariableSymbol,com.sun.source.tree.MethodInvocationTree,com.google.common.collect.ImmutableList)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.AutoValue_RefactoringCollection_RefactoringResult: void <init>(java.lang.String,com.google.errorprone.RefactoringCollection$RefactoringResultType)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.AutoValue_RefactoringCollection_RefactoringResult: void <init>(java.lang.String,com.google.errorprone.RefactoringCollection$RefactoringResultType)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.AutoValue_NullnessQualifierInference_TypeAndSymbol: void <init>(com.sun.tools.javac.code.Type,com.sun.tools.javac.code.Symbol$VarSymbol)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection$1: void <init>(com.google.errorprone.apply.PatchFileDestination,java.nio.file.Path)> => <java.util.concurrent.atomic.AtomicBoolean: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.AutoValue_DataFlow_AnalysisParams: void <init>(org.checkerframework.shaded.dataflow.analysis.ForwardTransferFunction,org.checkerframework.shaded.dataflow.cfg.ControlFlowGraph)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.AutoValue_DataFlow_AnalysisParams: void <init>(org.checkerframework.shaded.dataflow.analysis.ForwardTransferFunction,org.checkerframework.shaded.dataflow.cfg.ControlFlowGraph)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.AutoValue_DataFlow_CfgParams: void <init>(com.sun.source.util.TreePath)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.JavacErrorDescriptionListener: void <init>(com.sun.tools.javac.util.Log,com.sun.tools.javac.tree.EndPosTable,javax.tools.JavaFileObject,com.sun.tools.javac.util.Context,boolean)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState$SharedState: void <init>(com.sun.tools.javac.util.Context,com.google.errorprone.DescriptionListener,com.google.errorprone.StatisticsCollector,java.util.Map,com.google.errorprone.ErrorProneOptions)> => <com.sun.tools.javac.comp.Modules: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState$SharedState: void <init>(com.sun.tools.javac.util.Context,com.google.errorprone.DescriptionListener,com.google.errorprone.StatisticsCollector,java.util.Map,com.google.errorprone.ErrorProneOptions)> => <com.sun.tools.javac.tree.TreeMaker: com.sun.tools.javac.tree.TreeMaker instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.VisitorState$SharedState: void <init>(com.sun.tools.javac.util.Context,com.google.errorprone.DescriptionListener,com.google.errorprone.StatisticsCollector,java.util.Map,com.google.errorprone.ErrorProneOptions)> => <com.sun.tools.javac.code.Types: com.sun.tools.javac.code.Types instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.VisitorState$SharedState: void <init>(com.sun.tools.javac.util.Context,com.google.errorprone.DescriptionListener,com.google.errorprone.StatisticsCollector,java.util.Map,com.google.errorprone.ErrorProneOptions)> => <com.sun.tools.javac.code.Symtab: com.sun.tools.javac.code.Symtab instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.VisitorState$SharedState: void <init>(com.sun.tools.javac.util.Context,com.google.errorprone.DescriptionListener,com.google.errorprone.StatisticsCollector,java.util.Map,com.google.errorprone.ErrorProneOptions)> => <com.sun.tools.javac.util.Names: com.sun.tools.javac.util.Names instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.VisitorState$SharedState: void <init>(com.sun.tools.javac.util.Context,com.google.errorprone.DescriptionListener,com.google.errorprone.StatisticsCollector,java.util.Map,com.google.errorprone.ErrorProneOptions)> => <com.sun.tools.javac.comp.Modules: com.sun.tools.javac.comp.Modules instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.VisitorState$SharedState: void <init>(com.sun.tools.javac.util.Context,com.google.errorprone.DescriptionListener,com.google.errorprone.StatisticsCollector,java.util.Map,com.google.errorprone.ErrorProneOptions)> => <com.sun.tools.javac.tree.TreeMaker: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState$SharedState: void <init>(com.sun.tools.javac.util.Context,com.google.errorprone.DescriptionListener,com.google.errorprone.StatisticsCollector,java.util.Map,com.google.errorprone.ErrorProneOptions)> => <com.sun.tools.javac.code.Types: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState$SharedState: void <init>(com.sun.tools.javac.util.Context,com.google.errorprone.DescriptionListener,com.google.errorprone.StatisticsCollector,java.util.Map,com.google.errorprone.ErrorProneOptions)> => <com.sun.tools.javac.code.Symtab: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState$SharedState: void <init>(com.sun.tools.javac.util.Context,com.google.errorprone.DescriptionListener,com.google.errorprone.StatisticsCollector,java.util.Map,com.google.errorprone.ErrorProneOptions)> => <com.sun.tools.javac.util.Names: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.ScannerSupplierImpl: com.google.errorprone.bugpatterns.BugChecker instantiateChecker(com.google.errorprone.BugCheckerInfo)> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.ScannerSupplierImpl: com.google.errorprone.bugpatterns.BugChecker instantiateChecker(com.google.errorprone.BugCheckerInfo)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.scanner.ScannerSupplierImpl: com.google.errorprone.bugpatterns.BugChecker instantiateChecker(com.google.errorprone.BugCheckerInfo)> => <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.scanner.ScannerSupplierImpl: com.google.errorprone.bugpatterns.BugChecker instantiateChecker(com.google.errorprone.BugCheckerInfo)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.ScannerSupplierImpl: com.google.errorprone.bugpatterns.BugChecker instantiateChecker(com.google.errorprone.BugCheckerInfo)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.ScannerSupplierImpl: com.google.errorprone.bugpatterns.BugChecker instantiateChecker(com.google.errorprone.BugCheckerInfo)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.ScannerSupplierImpl: com.google.errorprone.bugpatterns.BugChecker instantiateChecker(com.google.errorprone.BugCheckerInfo)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.ScannerSupplierImpl: com.google.errorprone.bugpatterns.BugChecker instantiateChecker(com.google.errorprone.BugCheckerInfo)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: java.util.Optional lambda$getTypeFromString$0(java.lang.String)> => <java.util.Optional: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: java.util.Optional lambda$getTypeFromString$0(java.lang.String)> => <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.matchers.Matchers$nonNull__409: boolean test(java.lang.Object)> => <java.util.Objects: boolean nonNull(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.JavacErrorDescriptionListener$nonNull__269: boolean test(java.lang.Object)> => <java.util.Objects: boolean nonNull(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers$nonNull__343: boolean test(java.lang.Object)> => <java.util.Objects: boolean nonNull(java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.ASTHelpers: boolean lambda$requiresParentheses$0(com.google.errorprone.util.ErrorProneToken)> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.ScannerSupplierImpl: boolean lambda$instantiateChecker$0(java.lang.reflect.Constructor)> => <java.lang.Class: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.ScannerSupplierImpl: boolean lambda$instantiateChecker$0(java.lang.reflect.Constructor)> => <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.scanner.ScannerSupplierImpl: boolean lambda$instantiateChecker$0(java.lang.reflect.Constructor)> => <java.util.Arrays: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.fixes.SuggestedFixes: boolean lambda$addRemainingModifiers$1(com.google.errorprone.util.ErrorProneToken)> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: boolean isAnnotationOnType(com.sun.tools.javac.code.Symbol,com.sun.tools.javac.code.TypeAnnotationPosition)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: boolean isAnnotationOnType(com.sun.tools.javac.code.Symbol,com.sun.tools.javac.code.TypeAnnotationPosition)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: boolean isAnnotationOnType(com.sun.tools.javac.code.Symbol,com.sun.tools.javac.code.TypeAnnotationPosition)> => <com.sun.tools.javac.code.TargetType: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: boolean isAnnotationOnType(com.sun.tools.javac.code.Symbol,com.sun.tools.javac.code.TypeAnnotationPosition)> => <com.sun.tools.javac.code.TargetType: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.MoreAnnotations: boolean isAnnotationOnType(com.sun.tools.javac.code.Symbol,com.sun.tools.javac.code.TypeAnnotationPosition)> => <com.sun.tools.javac.code.TargetType: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: boolean isVisible(com.sun.tools.javac.code.Symbol$VarSymbol,com.sun.source.util.TreePath)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: boolean isVisible(com.sun.tools.javac.code.Symbol$VarSymbol,com.sun.source.util.TreePath)> => <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: boolean isVisible(com.sun.tools.javac.code.Symbol$VarSymbol,com.sun.source.util.TreePath)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: boolean isVisible(com.sun.tools.javac.code.Symbol$VarSymbol,com.sun.source.util.TreePath)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: boolean isVisible(com.sun.tools.javac.code.Symbol$VarSymbol,com.sun.source.util.TreePath)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: boolean isVisible(com.sun.tools.javac.code.Symbol$VarSymbol,com.sun.source.util.TreePath)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.JavacErrorDescriptionListener: boolean shouldSkipImportTreeFix(com.sun.tools.javac.util.JCDiagnostic$DiagnosticPosition,com.google.errorprone.fixes.Fix)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: boolean inStaticContext(com.sun.source.util.TreePath)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: boolean inStaticContext(com.sun.source.util.TreePath)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: boolean inStaticContext(com.sun.source.util.TreePath)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: boolean inStaticContext(com.sun.source.util.TreePath)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.apply.AutoValue_ImportOrganizer_Import: void <init>(boolean,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.AutoValue_Commented$Builder: com.google.errorprone.util.Commented$Builder setTree(com.sun.source.tree.Tree)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.AutoValue_Commented$Builder: com.google.errorprone.util.Commented build()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.AutoValue_Commented$Builder: com.google.errorprone.util.Commented build()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.AutoValue_Commented$Builder: com.google.errorprone.util.Commented build()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState$Cache: void <init>(com.google.errorprone.suppliers.Supplier)> => <java.lang.ref.Reference: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.MethodInvocationMatcher$TokenType$1: com.google.errorprone.matchers.method.MethodInvocationMatcher$MethodKind extract(com.google.errorprone.matchers.method.MethodInvocationMatcher$Context,com.google.errorprone.VisitorState)> => <javax.lang.model.element.ElementKind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: boolean lambda$isVisible$8(com.sun.source.tree.Tree,com.sun.source.tree.Tree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.util.FindIdentifiers: boolean lambda$isVisible$9(com.sun.tools.javac.code.Symbol$VarSymbol,com.sun.source.tree.Tree,com.sun.source.tree.Tree)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: void doApplyProcess(com.google.errorprone.apply.FileDestination,com.google.errorprone.apply.FileSource,java.util.Collection)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.RefactoringCollection: void doApplyProcess(com.google.errorprone.apply.FileDestination,com.google.errorprone.apply.FileSource,java.util.Collection)> => <java.util.logging.Level: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.names.TermEditDistance: java.lang.Integer lambda$null$6(java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.names.TermEditDistance: java.lang.Integer lambda$null$6(java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.util.Reachability$CanCompleteNormallyVisitor: void <init>()> => <java.util.HashSet: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.AutoValue_ErrorProneOptions_PatchingOptions$Builder: com.google.errorprone.ErrorProneOptions$PatchingOptions autoBuild()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.AutoValue_ErrorProneOptions_PatchingOptions$Builder: com.google.errorprone.ErrorProneOptions$PatchingOptions autoBuild()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.AutoValue_ErrorProneOptions_PatchingOptions$Builder: com.google.errorprone.ErrorProneOptions$PatchingOptions autoBuild()> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.AutoValue_ErrorProneOptions_PatchingOptions$Builder: com.google.errorprone.ErrorProneOptions$PatchingOptions autoBuild()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.AutoValue_ErrorProneOptions_PatchingOptions$Builder: com.google.errorprone.ErrorProneOptions$PatchingOptions autoBuild()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.AutoValue_ErrorProneOptions_PatchingOptions$Builder: com.google.errorprone.ErrorProneOptions$PatchingOptions autoBuild()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.scanner.ErrorProneScanner: void handleError(com.google.errorprone.matchers.Suppressible,java.lang.Throwable)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_ConstructorMatchState: void <init>(com.sun.tools.javac.code.Symbol$MethodSymbol)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodMatchState: void <init>(com.sun.source.tree.ExpressionTree,com.sun.tools.javac.code.Symbol$MethodSymbol)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.matchers.method.AutoValue_MethodMatchState: void <init>(com.sun.source.tree.ExpressionTree,com.sun.tools.javac.code.Symbol$MethodSymbol)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: void generateConstraintsForWrite(com.sun.tools.javac.code.Type,com.sun.tools.javac.code.Symbol,com.sun.source.tree.ExpressionTree,com.sun.source.tree.Tree,java.util.ArrayDeque)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: void generateConstraintsForWrite(com.sun.tools.javac.code.Type,com.sun.tools.javac.code.Symbol,com.sun.source.tree.ExpressionTree,com.sun.source.tree.Tree,java.util.ArrayDeque)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: void lambda$visitUnannotatedTypeVarRefsAndEquateInferredComponents$13(com.sun.tools.javac.code.Type,com.sun.tools.javac.code.Symbol,java.util.function.Consumer,com.sun.source.tree.Tree,com.google.errorprone.dataflow.nullnesspropagation.inference.TypeVariableInferenceVar,com.sun.tools.javac.code.Type,java.util.ArrayDeque,com.sun.tools.javac.code.Type)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: void lambda$visitUnannotatedTypeVarRefsAndEquateInferredComponents$13(com.sun.tools.javac.code.Type,com.sun.tools.javac.code.Symbol,java.util.function.Consumer,com.sun.source.tree.Tree,com.google.errorprone.dataflow.nullnesspropagation.inference.TypeVariableInferenceVar,com.sun.tools.javac.code.Type,java.util.ArrayDeque,com.sun.tools.javac.code.Type)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: void validateTypeStr(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: void validateTypeStr(java.lang.String)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.VisitorState: void validateTypeStr(java.lang.String)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found compile-time invoke: <com.google.errorprone.VisitorState: void validateTypeStr(java.lang.String)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: void validateTypeStr(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.VisitorState: void validateTypeStr(java.lang.String)> => <java.lang.String: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: com.google.errorprone.dataflow.nullnesspropagation.Nullness fieldInitializerNullnessIfAvailable(com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer$ClassAndField)> => <com.sun.source.util.TreePath: com.sun.source.util.TreePath getPath(com.sun.source.util.TreePath,com.sun.source.tree.Tree)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: com.google.errorprone.dataflow.nullnesspropagation.Nullness fieldInitializerNullnessIfAvailable(com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer$ClassAndField)> => <com.sun.source.util.Trees: com.sun.source.util.Trees instance(javax.'annotation'.processing.ProcessingEnvironment)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: com.google.errorprone.dataflow.nullnesspropagation.Nullness fieldInitializerNullnessIfAvailable(com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer$ClassAndField)> => <com.sun.tools.javac.processing.JavacProcessingEnvironment: com.sun.tools.javac.processing.JavacProcessingEnvironment instance(com.sun.tools.javac.util.Context)>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer: com.google.errorprone.dataflow.nullnesspropagation.Nullness fieldInitializerNullnessIfAvailable(com.google.errorprone.dataflow.nullnesspropagation.NullnessPropagationTransfer$ClassAndField)> => <com.sun.tools.javac.processing.JavacProcessingEnvironment: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: void visitTypeComponents(com.sun.tools.javac.code.Type,java.util.ArrayDeque,com.sun.source.tree.Tree,java.util.function.Consumer)> => <java.lang.Integer: void <clinit>()>
Found compile-time invoke: <com.google.errorprone.dataflow.nullnesspropagation.inference.NullnessQualifierInference: void visitTypeComponents(com.sun.tools.javac.code.Type,java.util.ArrayDeque,com.sun.source.tree.Tree,java.util.function.Consumer)> => <java.lang.Integer: java.lang.Integer valueOf(int)>

Total compile-time calls: 1277
