All Static Calls invokes JDK:
Found static invoke: <com.google.googlejavaformat.Doc$FillMode: com.google.googlejavaformat.Doc$FillMode valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.SnippetFormatter$SnippetKind: com.google.googlejavaformat.java.SnippetFormatter$SnippetKind valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine: com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.JavaFormatterOptions$Style: com.google.googlejavaformat.java.JavaFormatterOptions$Style valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList getTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <java.util.HashSet: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList getTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList getTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList getTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList getTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$ReceiverParameter: com.google.googlejavaformat.java.JavaInputAstVisitor$ReceiverParameter valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.JavaCommentsHelper: java.lang.String rewrite(com.google.googlejavaformat.Input$Tok,int,int)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.GoogleJavaFormatTool: java.util.Set getSourceVersions()> => <javax.lang.model.SourceVersion: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.GoogleJavaFormatTool: java.util.Set getSourceVersions()> => <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.java.GoogleJavaFormatTool: java.util.Set getSourceVersions()> => <javax.lang.model.SourceVersion: javax.lang.model.SourceVersion[] values()>
Found static invoke: <com.google.googlejavaformat.java.GoogleJavaFormatTool: java.util.Set getSourceVersions()> => <java.util.Arrays: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower$LongStringsAndTextBlockScanner: java.lang.Void visitLiteral(com.sun.source.tree.LiteralTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower$LongStringsAndTextBlockScanner: java.lang.Void visitLiteral(com.sun.source.tree.LiteralTree,java.lang.Void)> => <java.lang.Math: int min(int,int)>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower$LongStringsAndTextBlockScanner: java.lang.Void visitLiteral(com.sun.source.tree.LiteralTree,java.lang.Void)> => <java.lang.Math: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.DimensionHelpers$SortedDims: com.google.googlejavaformat.java.DimensionHelpers$SortedDims valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$VarArgsOrNot: com.google.googlejavaformat.java.JavaInputAstVisitor$VarArgsOrNot valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.SnippetFormatter: java.lang.String createIndentationString(int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.SnippetFormatter: com.google.common.collect.ImmutableList format(com.google.googlejavaformat.java.SnippetFormatter$SnippetKind,java.lang.String,java.util.List,int,boolean)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: java.lang.String removeUnusedImports(java.lang.String)> => <com.sun.tools.javac.api.JavacTrees: com.sun.tools.javac.api.JavacTrees instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$Direction: com.google.googlejavaformat.java.JavaInputAstVisitor$Direction valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void <init>(com.google.googlejavaformat.OpsBuilder,int)> => <java.util.HashSet: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void <init>(com.google.googlejavaformat.OpsBuilder,int)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void <init>(com.google.googlejavaformat.OpsBuilder,int)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void scan(com.sun.source.tree.Tree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void scan(com.sun.source.tree.Tree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void scan(com.sun.source.tree.Tree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitCompilationUnit(com.sun.source.tree.CompilationUnitTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitClass(com.sun.source.tree.ClassTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean visitArrayInitializer(java.util.List)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean visitArrayInitializer(java.util.List)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean visitArrayInitializer(java.util.List)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean visitArrayInitializer(java.util.List)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitNewClass(com.sun.source.tree.NewClassTree,java.lang.Void)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitNewClass(com.sun.source.tree.NewClassTree,java.lang.Void)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitDoWhileLoop(com.sun.source.tree.DoWhileLoopTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitEnhancedForLoop(com.sun.source.tree.EnhancedForLoopTree,java.lang.Void)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean visitEnumDeclaration(com.sun.source.tree.ClassTree)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean visitEnumDeclaration(com.sun.source.tree.ClassTree)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean visitEnumDeclaration(com.sun.source.tree.ClassTree)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean visitEnumDeclaration(com.sun.source.tree.ClassTree)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean visitEnumDeclaration(com.sun.source.tree.ClassTree)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitMemberReference(com.sun.source.tree.MemberReferenceTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitForLoop(com.sun.source.tree.ForLoopTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitForLoop(com.sun.source.tree.ForLoopTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitIf(com.sun.source.tree.IfTree,java.lang.Void)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitIf(com.sun.source.tree.IfTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitIf(com.sun.source.tree.IfTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitBinary(com.sun.source.tree.BinaryTree,java.lang.Void)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitLambdaExpression(com.sun.source.tree.LambdaExpressionTree,java.lang.Void)> => <com.sun.source.tree.LambdaExpressionTree$BodyKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitLambdaExpression(com.sun.source.tree.LambdaExpressionTree,java.lang.Void)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitLambdaExpression(com.sun.source.tree.LambdaExpressionTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitLambdaExpression(com.sun.source.tree.LambdaExpressionTree,java.lang.Void)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitAnnotation(com.sun.source.tree.AnnotationTree,java.lang.Void)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitAnnotation(com.sun.source.tree.AnnotationTree,java.lang.Void)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitAnnotationArgument(com.sun.source.tree.AssignmentTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitMethod(com.sun.source.tree.MethodTree,java.lang.Void)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitMethod(com.sun.source.tree.MethodTree,java.lang.Void)> => <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitMethod(com.sun.source.tree.MethodTree,java.lang.Void)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitMethod(com.sun.source.tree.MethodTree,java.lang.Void)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitMethod(com.sun.source.tree.MethodTree,java.lang.Void)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitMethod(com.sun.source.tree.MethodTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitMethod(com.sun.source.tree.MethodTree,java.lang.Void)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitPrimitiveType(com.sun.source.tree.PrimitiveTypeTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitTry(com.sun.source.tree.TryTree,java.lang.Void)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitClassDeclaration(com.sun.source.tree.ClassTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitUnionType(com.sun.source.tree.UnionTypeTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitWildcard(com.sun.source.tree.WildcardTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitModifiers(com.sun.source.tree.ModifiersTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitCatch(com.sun.source.tree.CatchTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitModule(com.sun.source.tree.ModuleTree,java.lang.Void)> => <com.sun.source.tree.ModuleTree$ModuleKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitModule(com.sun.source.tree.ModuleTree,java.lang.Void)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitModule(com.sun.source.tree.ModuleTree,java.lang.Void)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitModule(com.sun.source.tree.ModuleTree,java.lang.Void)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitModule(com.sun.source.tree.ModuleTree,java.lang.Void)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitModule(com.sun.source.tree.ModuleTree,java.lang.Void)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitRequires(com.sun.source.tree.RequiresTree,java.lang.Void)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitRequires(com.sun.source.tree.RequiresTree,java.lang.Void)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Void visitRequires(com.sun.source.tree.RequiresTree,java.lang.Void)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.FormatterException: com.google.googlejavaformat.java.FormatterException fromJavacDiagnostics(java.lang.Iterable)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier$TyParseState$5: com.google.googlejavaformat.java.TypeNameClassifier$TyParseState next(com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaInputAstVisitor_DeclarationModifiersAndTypeAnnotations: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaInputAstVisitor_DeclarationModifiersAndTypeAnnotations: java.lang.String toString()> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaInputAstVisitor_DeclarationModifiersAndTypeAnnotations: java.lang.String toString()> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$Import: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: java.lang.String formatSource(java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: java.lang.String formatSource(java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: java.lang.String formatSource(java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: com.google.common.collect.ImmutableList getFormatReplacements(java.lang.String,java.util.Collection)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: com.google.common.collect.RangeSet lineRangesToCharRanges(java.lang.String,com.google.common.collect.RangeSet)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: com.google.common.collect.RangeSet lineRangesToCharRanges(java.lang.String,com.google.common.collect.RangeSet)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: com.google.common.collect.RangeSet lineRangesToCharRanges(java.lang.String,com.google.common.collect.RangeSet)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: com.google.common.collect.RangeSet lineRangesToCharRanges(java.lang.String,com.google.common.collect.RangeSet)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: com.google.common.collect.RangeSet lineRangesToCharRanges(java.lang.String,com.google.common.collect.RangeSet)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: com.google.common.collect.RangeSet lineRangesToCharRanges(java.lang.String,com.google.common.collect.RangeSet)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: com.google.common.collect.RangeSet lineRangesToCharRanges(java.lang.String,com.google.common.collect.RangeSet)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$AnnotationOrModifier$Kind: com.google.googlejavaformat.java.JavaInputAstVisitor$AnnotationOrModifier$Kind valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$BracesOrNot: com.google.googlejavaformat.java.JavaInputAstVisitor$BracesOrNot valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat: com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.GoogleJavaFormatToolProvider: int run(java.io.PrintWriter,java.io.PrintWriter,java.lang.String[])> => <java.lang.System: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_FormatFileCallable_Result: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_FormatFileCallable_Result: java.lang.String toString()> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_FormatFileCallable_Result: java.lang.String toString()> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: void <init>(java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: void <init>(java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: void <init>(java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoOneOf_JavaInputAstVisitor_AnnotationOrModifier$Impl_annotation: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoOneOf_JavaInputAstVisitor_AnnotationOrModifier$Impl_annotation: java.lang.String toString()> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens$CommentWithTextAndPosition: java.lang.String getText()> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens$CommentWithTextAndPosition: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens$CommentWithTextAndPosition: java.lang.String toString()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.java.Main: void main(java.lang.String[])> => <java.lang.System: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: void main(java.lang.String[])> => <java.lang.System: void exit(int)>
Found static invoke: <com.google.googlejavaformat.java.Main: int format(java.lang.String[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: com.google.googlejavaformat.java.CommandLineOptions processArgs(java.lang.String[])> => <java.util.Arrays: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: com.google.googlejavaformat.java.CommandLineOptions processArgs(java.lang.String[])> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.java.Main: com.google.googlejavaformat.java.CommandLineOptions processArgs(java.lang.String[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: com.google.googlejavaformat.java.CommandLineOptions processArgs(java.lang.String[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: com.google.googlejavaformat.java.CommandLineOptions processArgs(java.lang.String[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: com.google.googlejavaformat.java.CommandLineOptions processArgs(java.lang.String[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: com.google.googlejavaformat.java.CommandLineOptions processArgs(java.lang.String[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: com.google.googlejavaformat.java.CommandLineOptions processArgs(java.lang.String[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: com.google.googlejavaformat.java.CommandLineOptions processArgs(java.lang.String[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: com.google.googlejavaformat.java.CommandLineOptions processArgs(java.lang.String[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: com.google.googlejavaformat.java.CommandLineOptions processArgs(java.lang.String[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind: com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void <init>(java.lang.String,com.google.googlejavaformat.Input,com.google.googlejavaformat.CommentsHelper)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void <init>(java.lang.String,com.google.googlejavaformat.Input,com.google.googlejavaformat.CommentsHelper)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void blankLine(int,com.google.googlejavaformat.OpsBuilder$BlankLineWanted)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void blankLine(int,com.google.googlejavaformat.OpsBuilder$BlankLineWanted)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void blankLine(int,com.google.googlejavaformat.OpsBuilder$BlankLineWanted)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void blankLine(int,com.google.googlejavaformat.OpsBuilder$BlankLineWanted)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void blankLine(int,com.google.googlejavaformat.OpsBuilder$BlankLineWanted)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void markForPartialFormat(com.google.googlejavaformat.Input$Token,com.google.googlejavaformat.Input$Token)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void markForPartialFormat(com.google.googlejavaformat.Input$Token,com.google.googlejavaformat.Input$Token)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void markForPartialFormat(com.google.googlejavaformat.Input$Token,com.google.googlejavaformat.Input$Token)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void append(java.lang.String,com.google.common.collect.Range)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void append(java.lang.String,com.google.common.collect.Range)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void append(java.lang.String,com.google.common.collect.Range)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void append(java.lang.String,com.google.common.collect.Range)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void append(java.lang.String,com.google.common.collect.Range)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void append(java.lang.String,com.google.common.collect.Range)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void append(java.lang.String,com.google.common.collect.Range)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void append(java.lang.String,com.google.common.collect.Range)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void flush()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void flush()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: void flush()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.ImmutableList getFormatReplacements(com.google.common.collect.RangeSet)> => <java.lang.Math: int min(int,int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.ImmutableList getFormatReplacements(com.google.common.collect.RangeSet)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.ImmutableList getFormatReplacements(com.google.common.collect.RangeSet)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.ImmutableList getFormatReplacements(com.google.common.collect.RangeSet)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.ImmutableList getFormatReplacements(com.google.common.collect.RangeSet)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.ImmutableList getFormatReplacements(com.google.common.collect.RangeSet)> => <java.lang.Math: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.ImmutableList getFormatReplacements(com.google.common.collect.RangeSet)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.ImmutableList getFormatReplacements(com.google.common.collect.RangeSet)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.ImmutableList getFormatReplacements(com.google.common.collect.RangeSet)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.ImmutableList getFormatReplacements(com.google.common.collect.RangeSet)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: java.lang.String applyReplacements(java.lang.String,java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: java.lang.String applyReplacements(java.lang.String,java.util.List)> => <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: java.lang.String applyReplacements(java.lang.String,java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: int startPosition(com.google.googlejavaformat.Input$Token)> => <java.lang.Math: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: int startPosition(com.google.googlejavaformat.Input$Token)> => <java.lang.Math: int min(int,int)>
Found static invoke: <com.google.googlejavaformat.java.AutoOneOf_JavaInputAstVisitor_AnnotationOrModifier$Impl_modifier: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoOneOf_JavaInputAstVisitor_AnnotationOrModifier$Impl_modifier: java.lang.String toString()> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$1: void scan(com.sun.tools.javac.tree.JCTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.Token: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.Token: java.lang.String toString()> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.Token$Type: com.google.googlejavaformat.java.javadoc.Token$Type valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocWriter$AutoIndent: com.google.googlejavaformat.java.javadoc.JavadocWriter$AutoIndent valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocWriter$RequestedWhitespace: com.google.googlejavaformat.java.javadoc.JavadocWriter$RequestedWhitespace valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier$TyParseState$2: com.google.googlejavaformat.java.TypeNameClassifier$TyParseState next(com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$FirstDeclarationsOrNot: com.google.googlejavaformat.java.JavaInputAstVisitor$FirstDeclarationsOrNot valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$DimensionsOrNot: com.google.googlejavaformat.java.JavaInputAstVisitor$DimensionsOrNot valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier$TyParseState: com.google.googlejavaformat.java.TypeNameClassifier$TyParseState valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.filer.FormattingJavaFileObject: java.io.Writer openWriter()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.filer.FormattingJavaFileObject$1: void close()> => <javax.tools.Diagnostic$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaFormatterOptions$Builder: com.google.googlejavaformat.java.JavaFormatterOptions$Builder formatJavadoc(boolean)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaFormatterOptions$Builder: com.google.googlejavaformat.java.JavaFormatterOptions$Builder formatJavadoc(boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaFormatterOptions$Builder: com.google.googlejavaformat.java.JavaFormatterOptions$Builder reorderModifiers(boolean)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaFormatterOptions$Builder: com.google.googlejavaformat.java.JavaFormatterOptions$Builder reorderModifiers(boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaFormatterOptions$Builder: com.google.googlejavaformat.java.JavaFormatterOptions$Builder style(com.google.googlejavaformat.java.JavaFormatterOptions$Style)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaFormatterOptions$Builder: com.google.googlejavaformat.java.JavaFormatterOptions build()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaFormatterOptions$Builder: com.google.googlejavaformat.java.JavaFormatterOptions build()> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaFormatterOptions$Builder: com.google.googlejavaformat.java.JavaFormatterOptions build()> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaFormatterOptions$Builder: com.google.googlejavaformat.java.JavaFormatterOptions build()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: java.lang.Void visitClass(com.sun.source.tree.ClassTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: void visitRecordDeclaration(com.sun.source.tree.ClassTree)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: void visitRecordDeclaration(com.sun.source.tree.ClassTree)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: java.lang.Void visitCase(com.sun.source.tree.CaseTree,java.lang.Void)> => <com.sun.source.tree.CaseTree$CaseKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: java.lang.Void visitCase(com.sun.source.tree.CaseTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: java.lang.Void visitCase(com.sun.source.tree.CaseTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: java.lang.Void visitCase(com.sun.source.tree.CaseTree,java.lang.Void)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$CollapseEmptyOrNot: com.google.googlejavaformat.java.JavaInputAstVisitor$CollapseEmptyOrNot valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaFormatterOptions: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaFormatterOptions: java.lang.String toString()> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier$TyParseState$1: com.google.googlejavaformat.java.TypeNameClassifier$TyParseState next(com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$BreakOrNot: com.google.googlejavaformat.java.JavaInputAstVisitor$BreakOrNot valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner: java.lang.Void visitCase(com.sun.source.tree.CaseTree,java.lang.Void)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$AllowLeadingBlankLine: com.google.googlejavaformat.java.JavaInputAstVisitor$AllowLeadingBlankLine valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner$DocTreeScanner$ReferenceScanner: java.lang.Void visitIdentifier(com.sun.source.tree.IdentifierTree,java.lang.Void)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner$DocTreeScanner$ReferenceScanner: java.lang.Void visitIdentifier(com.sun.source.tree.IdentifierTree,java.lang.Void)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner$DocTreeScanner$ReferenceScanner: java.lang.Void visitIdentifier(com.sun.source.tree.IdentifierTree,java.lang.Void)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.Replacement: com.google.googlejavaformat.java.Replacement create(int,int,java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Replacement: com.google.googlejavaformat.java.Replacement create(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.Replacement: com.google.googlejavaformat.java.Replacement create(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.Replacement: int hashCode()> => <java.util.Objects: int hash(java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.FormatterDiagnostic: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder$BlankLineWanted$ConditionalBlankLine: java.util.Optional wanted()> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder$BlankLineWanted$ConditionalBlankLine: java.util.Optional wanted()> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder$BlankLineWanted$ConditionalBlankLine: java.util.Optional wanted()> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder$BlankLineWanted$ConditionalBlankLine: java.util.Optional wanted()> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder$BlankLineWanted$ConditionalBlankLine: java.util.Optional wanted()> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder$BlankLineWanted$ConditionalBlankLine: java.util.Optional wanted()> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Newlines$LineIterator: void remove()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.CloseOp: com.google.googlejavaformat.CloseOp valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.Newlines$LineOffsetIterator: java.lang.Integer next()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Newlines$LineOffsetIterator: java.lang.Integer next()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.Newlines$LineOffsetIterator: java.lang.Integer next()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Newlines$LineOffsetIterator: void remove()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.InputOutput: void <init>()> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.InputOutput: java.util.Map makeKToIJ(com.google.googlejavaformat.InputOutput)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.InputOutput: java.util.Map makeKToIJ(com.google.googlejavaformat.InputOutput)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.InputOutput: java.util.Map makeKToIJ(com.google.googlejavaformat.InputOutput)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.InputOutput: java.util.Map makeKToIJ(com.google.googlejavaformat.InputOutput)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.InputOutput: java.util.Map makeKToIJ(com.google.googlejavaformat.InputOutput)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.InputOutput: java.util.Map makeKToIJ(com.google.googlejavaformat.InputOutput)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.InputOutput: java.util.Map makeKToIJ(com.google.googlejavaformat.InputOutput)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.InputOutput: java.util.Map makeKToIJ(com.google.googlejavaformat.InputOutput)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.InputOutput: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.InputOutput: java.lang.String toString()> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.InputOutput: java.lang.String toString()> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: int actualSize(int,int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: int actualSize(int,int)> => <java.lang.Math: int max(int,int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: int actualSize(int,int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: int actualSize(int,int)> => <java.lang.Math: int min(int,int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: int actualSize(int,int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: int actualSize(int,int)> => <java.lang.Math: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: int actualSize(int,int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: int actualSize(int,int)> => <java.lang.Math: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: java.lang.Integer actualStartColumn(int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: java.lang.Integer actualStartColumn(int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: java.lang.Integer actualStartColumn(int)> => <java.lang.Math: int min(int,int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: java.lang.Integer actualStartColumn(int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: java.lang.Integer actualStartColumn(int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: java.lang.Integer actualStartColumn(int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: java.lang.Integer actualStartColumn(int)> => <java.lang.Math: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: java.lang.Integer actualStartColumn(int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void add(com.google.googlejavaformat.Op)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void <init>(com.google.googlejavaformat.Input,com.google.googlejavaformat.Output)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void checkClosed(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void checkClosed(int)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void checkClosed(int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void checkClosed(int)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void checkClosed(int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void sync(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void sync(int)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void sync(int)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void drain()> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void drain()> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: java.util.Optional peekToken(int)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: java.util.Optional peekToken(int)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: java.util.Optional peekToken(int)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: java.util.Optional peekToken(int)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void guessToken(java.lang.String)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void guessToken(java.lang.String)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void token(java.lang.String,com.google.googlejavaformat.Doc$Token$RealOrImaginary,com.google.googlejavaformat.Indent,java.util.Optional)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void token(java.lang.String,com.google.googlejavaformat.Doc$Token$RealOrImaginary,com.google.googlejavaformat.Indent,java.util.Optional)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void token(java.lang.String,com.google.googlejavaformat.Doc$Token$RealOrImaginary,com.google.googlejavaformat.Indent,java.util.Optional)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void op(java.lang.String)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void op(java.lang.String)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void breakOp(com.google.googlejavaformat.Doc$FillMode,java.lang.String,com.google.googlejavaformat.Indent)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: void breakOp(com.google.googlejavaformat.Doc$FillMode,java.lang.String,com.google.googlejavaformat.Indent)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder: com.google.common.collect.ImmutableList build()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Doc$Token$RealOrImaginary: com.google.googlejavaformat.Doc$Token$RealOrImaginary valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <com.google.googlejavaformat.CommentsHelper: java.util.Optional reformatParameterComment(com.google.googlejavaformat.Input$Tok)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.CommentsHelper: java.util.Optional reformatParameterComment(com.google.googlejavaformat.Input$Tok)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.CommentsHelper: java.util.Optional reformatParameterComment(com.google.googlejavaformat.Input$Tok)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.CommentsHelper: java.util.Optional reformatParameterComment(com.google.googlejavaformat.Input$Tok)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.CommentsHelper: java.util.Optional reformatParameterComment(com.google.googlejavaformat.Input$Tok)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.CommentsHelper: java.util.Optional reformatParameterComment(com.google.googlejavaformat.Input$Tok)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.CommentsHelper: java.util.Optional reformatParameterComment(com.google.googlejavaformat.Input$Tok)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.CommentsHelper: java.util.Optional reformatParameterComment(com.google.googlejavaformat.Input$Tok)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Doc$Break: com.google.googlejavaformat.Doc$Break make(com.google.googlejavaformat.Doc$FillMode,java.lang.String,com.google.googlejavaformat.Indent)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.Doc$Break: com.google.googlejavaformat.Doc$Break make(com.google.googlejavaformat.Doc$FillMode,java.lang.String,com.google.googlejavaformat.Indent)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Doc$Break: com.google.googlejavaformat.Doc$State computeBreaks(com.google.googlejavaformat.Doc$State,int,boolean)> => <java.lang.Math: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Doc$Break: com.google.googlejavaformat.Doc$State computeBreaks(com.google.googlejavaformat.Doc$State,int,boolean)> => <java.lang.Math: int max(int,int)>
Found static invoke: <com.google.googlejavaformat.Doc$Break: com.google.googlejavaformat.Doc$State computeBreaks(com.google.googlejavaformat.CommentsHelper,int,com.google.googlejavaformat.Doc$State)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Output$BreakTag: void <init>()> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Output$BreakTag: void <init>()> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.Output$BreakTag: void recordBroken(boolean)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Output$BreakTag: void recordBroken(boolean)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.Output$BreakTag: void recordBroken(boolean)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.Output$BreakTag: void recordBroken(boolean)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Output$BreakTag: boolean wasBreakTaken()> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Output$BreakTag: boolean wasBreakTaken()> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: boolean isStringFragment(com.sun.tools.javac.parser.Tokens$TokenKind)> => <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens$CommentSavingTokenizer: int commentLength(com.sun.tools.javac.parser.Tokens$Comment)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList readAllTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <com.sun.tools.javac.parser.ScannerFactory: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList readAllTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList readAllTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList readAllTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <java.lang.Runtime: java.lang.Runtime$Version version()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList readAllTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList readAllTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList readAllTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <com.sun.tools.javac.parser.ScannerFactory: com.sun.tools.javac.parser.ScannerFactory instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList readAllTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <java.util.Collections: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList readAllTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <java.lang.Runtime: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList readAllTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList readAllTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList readAllTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: com.google.common.collect.ImmutableList readAllTokens(java.lang.String,com.sun.tools.javac.util.Context,java.util.Set)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: void <clinit>()> => <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: com.sun.tools.javac.parser.Tokens$TokenKind[] values()>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens: void <clinit>()> => <java.util.Arrays: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocFormatter: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocFormatter: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocFormatter: void <clinit>()> => <java.util.regex.Pattern: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.CommentsHelper: void <clinit>()> => <java.util.regex.Pattern: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.CommentsHelper: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.Main: int main(java.io.InputStream,java.io.PrintStream,java.io.PrintStream,java.lang.String[])> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void <clinit>()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.SnippetFormatter: java.util.List toReplacements(java.lang.String,java.lang.String)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.SnippetFormatter: java.util.List toReplacements(java.lang.String,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.SnippetFormatter: java.util.List offsetRanges(java.util.List,int)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: java.lang.String applyReplacements(java.lang.String,com.google.common.collect.RangeMap)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: java.lang.String applyReplacements(java.lang.String,com.google.common.collect.RangeMap)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: java.lang.String applyReplacements(java.lang.String,com.google.common.collect.RangeMap)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: java.lang.String applyReplacements(java.lang.String,com.google.common.collect.RangeMap)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.google.common.collect.RangeMap buildReplacements(java.lang.String,com.sun.tools.javac.tree.JCTree$JCCompilationUnit,java.util.Set,com.google.common.collect.Multimap)> => <java.lang.Math: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.google.common.collect.RangeMap buildReplacements(java.lang.String,com.sun.tools.javac.tree.JCTree$JCCompilationUnit,java.util.Set,com.google.common.collect.Multimap)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.google.common.collect.RangeMap buildReplacements(java.lang.String,com.sun.tools.javac.tree.JCTree$JCCompilationUnit,java.util.Set,com.google.common.collect.Multimap)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.google.common.collect.RangeMap buildReplacements(java.lang.String,com.sun.tools.javac.tree.JCTree$JCCompilationUnit,java.util.Set,com.google.common.collect.Multimap)> => <java.lang.Math: int max(int,int)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.google.common.collect.RangeMap buildReplacements(java.lang.String,com.sun.tools.javac.tree.JCTree$JCCompilationUnit,java.util.Set,com.google.common.collect.Multimap)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <com.sun.tools.javac.util.Options: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <com.sun.tools.javac.parser.ParserFactory: com.sun.tools.javac.parser.ParserFactory instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <com.sun.tools.javac.util.Log: com.sun.tools.javac.util.Log instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <java.net.URI: java.net.URI create(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <com.sun.tools.javac.util.Options: com.sun.tools.javac.util.Options instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <com.sun.tools.javac.util.Options: com.sun.tools.javac.util.Options instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <com.sun.tools.javac.parser.ParserFactory: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <com.sun.tools.javac.util.Log: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <javax.tools.JavaFileObject$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <java.net.URI: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <javax.tools.StandardLocation: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <com.sun.tools.javac.file.BaseFileManager: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(com.sun.tools.javac.util.Context,java.lang.String)> => <com.sun.tools.javac.file.JavacFileManager: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder$BlankLineWanted: void <clinit>()> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder$BlankLineWanted: void <clinit>()> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.OpsBuilder$BlankLineWanted: void <clinit>()> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder$BlankLineWanted: void <clinit>()> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder$BlankLineWanted: void <clinit>()> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder$BlankLineWanted: void <clinit>()> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.OpsBuilder$BlankLineWanted: void <clinit>()> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.MemberReferenceTree$ReferenceMode: com.sun.source.tree.MemberReferenceTree$ReferenceMode[] values()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <javax.lang.model.type.TypeKind: javax.lang.model.type.TypeKind[] values()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.MemberReferenceTree$ReferenceMode: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <com.sun.source.tree.MemberReferenceTree$ReferenceMode: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$2: void <clinit>()> => <javax.lang.model.type.TypeKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void <clinit>()> => <java.util.regex.Pattern: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void <clinit>()> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Trees: java.lang.String operatorName(com.sun.source.tree.ExpressionTree)> => <com.sun.tools.javac.tree.JCTree$Tag: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.util.List variableFragments(com.google.common.collect.PeekingIterator,com.sun.source.tree.Tree)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.util.List variableFragments(com.google.common.collect.PeekingIterator,com.sun.source.tree.Tree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Trees: int precedence(com.sun.source.tree.ExpressionTree)> => <com.sun.tools.javac.tree.TreeInfo: int opPrec(com.sun.tools.javac.tree.JCTree$Tag)>
Found static invoke: <com.google.googlejavaformat.java.Trees: java.lang.String getSourceForNode(com.sun.source.tree.Tree,com.sun.source.util.TreePath)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: void <clinit>()> => <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function,java.util.Comparator)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: void <clinit>()> => <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function,java.util.Comparator)>
Found static invoke: <com.google.googlejavaformat.InputOutput: void <clinit>()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.InputOutput: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.InputOutput: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <com.sun.tools.javac.util.Options: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.Runtime: java.lang.Runtime$Version version()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.Runtime: java.lang.Runtime$Version version()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <com.sun.tools.javac.parser.ParserFactory: com.sun.tools.javac.parser.ParserFactory instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <com.sun.tools.javac.util.Log: com.sun.tools.javac.util.Log instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.net.URI: java.net.URI create(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <com.sun.tools.javac.util.Options: com.sun.tools.javac.util.Options instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <com.sun.tools.javac.util.Options: com.sun.tools.javac.util.Options instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.Runtime: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <com.sun.tools.javac.parser.ParserFactory: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <com.sun.tools.javac.util.Log: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <javax.tools.JavaFileObject$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.net.URI: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <javax.tools.StandardLocation: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <com.sun.tools.javac.file.BaseFileManager: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: void format(com.google.googlejavaformat.java.JavaInput,com.google.googlejavaformat.java.JavaOutput,com.google.googlejavaformat.java.JavaFormatterOptions)> => <com.sun.tools.javac.file.JavacFileManager: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: com.google.googlejavaformat.java.JavaInput reorderModifiers(com.google.googlejavaformat.java.JavaInput,java.util.Collection)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: com.google.googlejavaformat.java.JavaInput reorderModifiers(com.google.googlejavaformat.java.JavaInput,java.util.Collection)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: com.google.googlejavaformat.java.JavaInput reorderModifiers(com.google.googlejavaformat.java.JavaInput,java.util.Collection)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: com.google.googlejavaformat.java.JavaInput reorderModifiers(com.google.googlejavaformat.java.JavaInput,java.util.Collection)> => <java.util.Collections: void sort(java.util.List)>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: com.google.googlejavaformat.java.JavaInput reorderModifiers(com.google.googlejavaformat.java.JavaInput,java.util.Collection)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: com.google.googlejavaformat.java.JavaInput reorderModifiers(com.google.googlejavaformat.java.JavaInput,java.util.Collection)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: com.google.googlejavaformat.java.JavaInput reorderModifiers(com.google.googlejavaformat.java.JavaInput,java.util.Collection)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: com.google.googlejavaformat.java.JavaInput reorderModifiers(com.google.googlejavaformat.java.JavaInput,java.util.Collection)> => <java.util.Collections: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: com.google.googlejavaformat.java.JavaInput reorderModifiers(com.google.googlejavaformat.java.JavaInput,java.util.Collection)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaCommentsHelper: void <clinit>()> => <java.util.regex.Pattern: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaCommentsHelper: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor$AnnotationOrModifier: void <clinit>()> => <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableMap makePositionToColumnMap(java.util.List)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableMap makePositionToColumnMap(java.util.List)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableMap makePositionToColumnMap(java.util.List)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.UsageException: void <clinit>()> => <java.lang.System: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.UsageException: void <clinit>()> => <java.lang.System: java.lang.String lineSeparator()>
Found static invoke: <com.google.googlejavaformat.java.UsageException: void <clinit>()> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.UsageException: void <clinit>()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: com.google.googlejavaformat.java.CommandLineOptions parse(java.lang.Iterable)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: com.google.googlejavaformat.java.CommandLineOptions parse(java.lang.Iterable)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.String wrap(int,java.lang.String,com.google.googlejavaformat.java.Formatter)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.String wrap(int,java.lang.String,com.google.googlejavaformat.java.Formatter)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.String wrap(int,java.lang.String,com.google.googlejavaformat.java.Formatter)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: void <clinit>()> => <java.util.regex.Pattern: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: void <clinit>()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocFormatter: java.lang.String render(java.util.List,int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocFormatter: java.lang.String render(java.util.List,int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <java.lang.String: java.lang.String valueOf(char)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <java.lang.Character: boolean isDigit(char)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <java.lang.Character: boolean isDigit(char)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <java.lang.Character: boolean isJavaIdentifierStart(char)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <java.lang.Character: boolean isWhitespace(char)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <java.net.URI: java.net.URI create(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <com.sun.tools.javac.util.Log: com.sun.tools.javac.util.Log instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <com.sun.tools.javac.util.Options: com.sun.tools.javac.util.Options instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <java.lang.Character: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <javax.tools.JavaFileObject$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <java.net.URI: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <com.sun.tools.javac.util.Log: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <com.sun.tools.javac.file.BaseFileManager: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <com.sun.tools.javac.file.JavacFileManager: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.ImmutableList buildToks(java.lang.String,com.google.common.collect.ImmutableSet)> => <com.sun.tools.javac.util.Options: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor$1: void <clinit>()> => <com.sun.source.tree.CaseTree$CaseKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor$1: void <clinit>()> => <com.sun.source.tree.CaseTree$CaseKind: com.sun.source.tree.CaseTree$CaseKind[] values()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor$1: void <clinit>()> => <com.sun.source.tree.CaseTree$CaseKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: com.google.common.collect.ImmutableList recordVariables(com.sun.source.tree.ClassTree)> => <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: com.google.common.collect.ImmutableList recordVariables(com.sun.source.tree.ClassTree)> => <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.Doc: void <clinit>()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Doc: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.Doc: void <clinit>()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavacTokens$CommentSavingTokenizer: java.lang.reflect.Method getRawCharactersMethod()> => <java.lang.Class: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.reflect.Method getStripIndent()> => <java.lang.Runtime: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.reflect.Method getStripIndent()> => <java.lang.Runtime: java.lang.Runtime$Version version()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.reflect.Method getStripIndent()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.reflect.Method getStripIndent()> => <java.lang.Class: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.SnippetFormatter: com.google.common.collect.Range offsetRange(com.google.common.collect.Range,int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.SnippetFormatter: com.google.common.collect.Range offsetRange(com.google.common.collect.Range,int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.SnippetFormatter: com.google.common.collect.Range offsetRange(com.google.common.collect.Range,int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner: java.lang.reflect.Method caseTreeGetLabels()> => <java.lang.Class: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.DimensionHelpers: java.lang.Iterable reorderBySourcePosition(java.util.Deque)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.DimensionHelpers: java.lang.Iterable reorderBySourcePosition(java.util.Deque)> => <java.util.Collections: void rotate(java.util.List,int)>
Found static invoke: <com.google.googlejavaformat.java.DimensionHelpers: java.lang.Iterable reorderBySourcePosition(java.util.Deque)> => <java.util.Collections: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.DimensionHelpers: com.sun.source.tree.Tree extractDims(java.util.Deque,com.sun.source.tree.Tree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: com.google.googlejavaformat.java.JavaInputAstVisitor createVisitor(java.lang.String,com.google.googlejavaformat.OpsBuilder,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.Class: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: com.google.googlejavaformat.java.JavaInputAstVisitor createVisitor(java.lang.String,com.google.googlejavaformat.OpsBuilder,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: com.google.googlejavaformat.java.JavaInputAstVisitor createVisitor(java.lang.String,com.google.googlejavaformat.OpsBuilder,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.Formatter: com.google.googlejavaformat.java.JavaInputAstVisitor createVisitor(java.lang.String,com.google.googlejavaformat.OpsBuilder,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Formatter: com.google.googlejavaformat.java.JavaInputAstVisitor createVisitor(java.lang.String,com.google.googlejavaformat.OpsBuilder,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: com.google.googlejavaformat.java.JavaInput applyReplacements(com.google.googlejavaformat.java.JavaInput,com.google.common.collect.TreeRangeMap)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: javax.lang.model.element.Modifier valueOf(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: javax.lang.model.element.Modifier valueOf(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer: javax.lang.model.element.Modifier asModifier(com.google.googlejavaformat.Input$Token)> => <javax.lang.model.element.Modifier: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: java.lang.String getValue(java.lang.String,java.util.Iterator,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: java.lang.Integer parseInteger(java.util.Iterator,java.lang.String,java.lang.String)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: java.lang.Integer parseInteger(java.util.Iterator,java.lang.String,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: java.lang.Integer parseInteger(java.util.Iterator,java.lang.String,java.lang.String)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: java.lang.Integer parseInteger(java.util.Iterator,java.lang.String,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: java.lang.Integer parseInteger(java.util.Iterator,java.lang.String,java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: void expandParamsFiles(java.lang.Iterable,java.util.List)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: void expandParamsFiles(java.lang.Iterable,java.util.List)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: void expandParamsFiles(java.lang.Iterable,java.util.List)> => <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: void expandParamsFiles(java.lang.Iterable,java.util.List)> => <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: void expandParamsFiles(java.lang.Iterable,java.util.List)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: void expandParamsFiles(java.lang.Iterable,java.util.List)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: void expandParamsFiles(java.lang.Iterable,java.util.List)> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: void expandParamsFiles(java.lang.Iterable,java.util.List)> => <java.nio.file.Files: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <com.sun.tools.javac.util.Options: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <com.sun.tools.javac.parser.ParserFactory: com.sun.tools.javac.parser.ParserFactory instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <com.sun.tools.javac.util.Log: com.sun.tools.javac.util.Log instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <java.net.URI: java.net.URI create(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <java.lang.Boolean: java.lang.String toString(boolean)>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <com.sun.tools.javac.util.Options: com.sun.tools.javac.util.Options instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <com.sun.tools.javac.util.Options: com.sun.tools.javac.util.Options instance(com.sun.tools.javac.util.Context)>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <com.sun.tools.javac.parser.ParserFactory: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <com.sun.tools.javac.util.Log: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <javax.tools.JavaFileObject$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <java.net.URI: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <javax.tools.StandardLocation: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <com.sun.tools.javac.file.BaseFileManager: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <com.sun.tools.javac.file.JavacFileManager: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.sun.tools.javac.tree.JCTree$JCCompilationUnit parse(java.lang.String,boolean)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.String applyReplacements(java.lang.String,com.google.common.collect.TreeRangeMap)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: java.util.regex.Pattern openTagPattern(java.lang.String)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: java.util.regex.Pattern openTagPattern(java.lang.String)> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: java.util.regex.Pattern openTagPattern(java.lang.String)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: java.util.regex.Pattern openTagPattern(java.lang.String)> => <java.util.regex.Pattern: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: java.util.regex.Pattern closeTagPattern(java.lang.String)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: java.util.regex.Pattern closeTagPattern(java.lang.String)> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: java.util.regex.Pattern closeTagPattern(java.lang.String)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: java.util.regex.Pattern closeTagPattern(java.lang.String)> => <java.util.regex.Pattern: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: java.util.regex.Pattern fullCommentPattern()> => <java.util.regex.Pattern: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: java.util.regex.Pattern fullCommentPattern()> => <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCFieldAccess getQualifiedIdentifier(com.sun.tools.javac.tree.JCTree$JCImport)> => <java.lang.Class: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports: com.sun.tools.javac.tree.JCTree$JCFieldAccess getQualifiedIdentifier(com.sun.tools.javac.tree.JCTree$JCImport)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.DimensionHelpers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.DimensionHelpers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: com.sun.source.tree.Tree$Kind[] values()>
Found static invoke: <com.google.googlejavaformat.java.DimensionHelpers$1: void <clinit>()> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: com.sun.tools.javac.parser.Tokens$TokenKind[] values()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ModifierOrderer$1: void <clinit>()> => <com.sun.tools.javac.parser.Tokens$TokenKind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: com.google.common.collect.Range parseRange(java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: com.google.common.collect.Range parseRange(java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: com.google.common.collect.Range parseRange(java.lang.String)> => <java.lang.Integer: int parseInt(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: com.google.common.collect.Range parseRange(java.lang.String)> => <java.lang.Integer: int parseInt(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: com.google.common.collect.Range parseRange(java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: com.google.common.collect.Range parseRange(java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: com.google.common.collect.Range parseRange(java.lang.String)> => <java.lang.Integer: int parseInt(java.lang.String)>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: com.google.common.collect.Range parseRange(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: com.google.common.collect.Range parseRange(java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptionsParser: com.google.common.collect.Range parseRange(java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void token(java.lang.String)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void token(java.lang.String)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaCommentsHelper: java.lang.String indentLineComments(java.util.List,int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.SnippetFormatter: com.google.googlejavaformat.java.SnippetFormatter$SnippetWrapper snippetWrapper(com.google.googlejavaformat.java.SnippetFormatter$SnippetKind,java.lang.String,int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.SnippetFormatter: com.google.googlejavaformat.java.SnippetFormatter$SnippetWrapper snippetWrapper(com.google.googlejavaformat.java.SnippetFormatter$SnippetKind,java.lang.String,int)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.SnippetFormatter: com.google.googlejavaformat.java.SnippetFormatter$SnippetWrapper snippetWrapper(com.google.googlejavaformat.java.SnippetFormatter$SnippetKind,java.lang.String,int)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.RemoveUnusedImports$UnusedImportScanner: void <init>(com.sun.tools.javac.api.JavacTrees)> => <java.util.HashSet: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void dropEmptyDeclarations()> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void dropEmptyDeclarations()> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void dropEmptyDeclarations()> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void typeDeclarationModifiers(com.sun.source.tree.ModifiersTree)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void typeDeclarationModifiers(com.sun.source.tree.ModifiersTree)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void addBodyDeclarations(java.util.List,com.google.googlejavaformat.java.JavaInputAstVisitor$BracesOrNot,com.google.googlejavaformat.java.JavaInputAstVisitor$FirstDeclarationsOrNot)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitDot(com.sun.source.tree.ExpressionTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitDot(com.sun.source.tree.ExpressionTree)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitDot(com.sun.source.tree.ExpressionTree)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitDot(com.sun.source.tree.ExpressionTree)> => <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitDot(com.sun.source.tree.ExpressionTree)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitDot(com.sun.source.tree.ExpressionTree)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitDot(com.sun.source.tree.ExpressionTree)> => <java.util.HashSet: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitDot(com.sun.source.tree.ExpressionTree)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.util.List handleStream(java.util.List)> => <java.util.stream.Collectors: java.util.stream.Collector toList()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.util.List handleStream(java.util.List)> => <java.util.stream.Collectors: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier: java.util.Optional typePrefixLength(java.util.List)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier: java.util.Optional typePrefixLength(java.util.List)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier: java.util.Optional typePrefixLength(java.util.List)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier: java.util.Optional typePrefixLength(java.util.List)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier: java.util.Optional typePrefixLength(java.util.List)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier: java.util.Optional typePrefixLength(java.util.List)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: com.google.common.collect.ImmutableList simpleNames(java.util.Deque)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat: com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat 'from'(java.lang.String)> => <java.lang.Character: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat: com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat 'from'(java.lang.String)> => <java.lang.Character: boolean isLowerCase(char)>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat: com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat 'from'(java.lang.String)> => <java.lang.Character: boolean isUpperCase(char)>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat: com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat 'from'(java.lang.String)> => <java.lang.Character: boolean isUpperCase(char)>
Found static invoke: <com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat: com.google.googlejavaformat.java.TypeNameClassifier$JavaCaseFormat 'from'(java.lang.String)> => <java.lang.Character: boolean isAlphabetic(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void tokenBreakTrailingComment(java.lang.String,com.google.googlejavaformat.Indent)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void tokenBreakTrailingComment(java.lang.String,com.google.googlejavaformat.Indent)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void token(java.lang.String,com.google.googlejavaformat.Indent)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void token(java.lang.String,com.google.googlejavaformat.Indent)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: int argumentsAreTabular(java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: int argumentsAreTabular(java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: int rowLength(java.util.List)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.util.Optional getNextToken(com.google.googlejavaformat.Input,int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.util.Optional getNextToken(com.google.googlejavaformat.Input,int)> => <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.util.Optional getNextToken(com.google.googlejavaformat.Input,int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.util.Optional getNextToken(com.google.googlejavaformat.Input,int)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void splitToken(java.lang.String)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void splitToken(java.lang.String)> => <java.lang.String: java.lang.String valueOf(char)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitBlock(com.sun.source.tree.BlockTree,com.google.googlejavaformat.java.JavaInputAstVisitor$CollapseEmptyOrNot,com.google.googlejavaformat.java.JavaInputAstVisitor$AllowLeadingBlankLine,com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitBlock(com.sun.source.tree.BlockTree,com.google.googlejavaformat.java.JavaInputAstVisitor$CollapseEmptyOrNot,com.google.googlejavaformat.java.JavaInputAstVisitor$AllowLeadingBlankLine,com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitToDeclare(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,com.sun.source.tree.VariableTree,java.util.Optional,java.lang.String,java.util.Optional)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitToDeclare(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,com.sun.source.tree.VariableTree,java.util.Optional,java.lang.String,java.util.Optional)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitToDeclare(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,com.sun.source.tree.VariableTree,java.util.Optional,java.lang.String,java.util.Optional)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitToDeclare(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,com.sun.source.tree.VariableTree,java.util.Optional,java.lang.String,java.util.Optional)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitToDeclare(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,com.sun.source.tree.VariableTree,java.util.Optional,java.lang.String,java.util.Optional)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitToDeclare(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,com.sun.source.tree.VariableTree,java.util.Optional,java.lang.String,java.util.Optional)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitVariables(java.util.List,com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitVariables(java.util.List,com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction)> => <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitVariables(java.util.List,com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitVariables(java.util.List,com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitVariables(java.util.List,com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction)> => <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitVariables(java.util.List,com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean visitSingleMemberAnnotation(com.sun.source.tree.AnnotationTree)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitFormals(java.util.Optional,java.util.List)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitFormals(java.util.Optional,java.util.List)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitFormals(java.util.Optional,java.util.List)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitFormals(java.util.Optional,java.util.List)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitFormals(java.util.Optional,java.util.List)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitFormals(java.util.Optional,java.util.List)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitFormals(java.util.Optional,java.util.List)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitFormals(java.util.Optional,java.util.List)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitFormals(java.util.Optional,java.util.List)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitFormals(java.util.Optional,java.util.List)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitFormals(java.util.Optional,java.util.List)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean handleLogStatement(com.sun.source.tree.MethodInvocationTree)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean handleLogStatement(com.sun.source.tree.MethodInvocationTree)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: int declareOne(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,java.util.Optional,com.sun.source.tree.Tree,javax.lang.model.element.Name,java.lang.String,java.lang.String,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: int declareOne(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,java.util.Optional,com.sun.source.tree.Tree,javax.lang.model.element.Name,java.lang.String,java.lang.String,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: int declareOne(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,java.util.Optional,com.sun.source.tree.Tree,javax.lang.model.element.Name,java.lang.String,java.lang.String,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: int declareOne(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationKind,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,java.util.Optional,com.sun.source.tree.Tree,javax.lang.model.element.Name,java.lang.String,java.lang.String,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitCatchClause(com.sun.source.tree.CatchTree,com.google.googlejavaformat.java.JavaInputAstVisitor$AllowTrailingBlankLine)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$Import: boolean isAndroid()> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$Import: boolean isAndroid()> => <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$Import: boolean isAndroid()> => <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.Range characterRangeToTokenRange(com.google.common.collect.Range)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.Range characterRangeToTokenRange(com.google.common.collect.Range)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.Range characterRangeToTokenRange(com.google.common.collect.Range)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.Range characterRangeToTokenRange(com.google.common.collect.Range)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.Range characterRangeToTokenRange(com.google.common.collect.Range)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.Range characterRangeToTokenRange(com.google.common.collect.Range)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.Range characterRangeToTokenRange(com.google.common.collect.Range)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.Range characterRangeToTokenRange(com.google.common.collect.Range)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.Range characterRangeToTokenRange(com.google.common.collect.Range)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.Range characterRangeToTokenRange(com.google.common.collect.Range)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInput: com.google.common.collect.Range characterRangeToTokenRange(com.google.common.collect.Range)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoOneOf_JavaInputAstVisitor_AnnotationOrModifier$Parent_: com.sun.source.tree.AnnotationTree 'annotation'()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.UsageException: void <init>()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatStdin(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatStdin(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatStdin(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatStdin(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.Math: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.time.Duration: java.time.Duration ofSeconds(long)>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.nio.file.Files: java.nio.file.Path write(java.nio.file.Path,byte[],java.nio.file.OpenOption[])>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int)>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.Math: int min(int,int)>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.time.Duration: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.nio.file.Files: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.util.Collections: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.nio.charset.StandardCharsets: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.nio.file.Files: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.Main: int formatFiles(com.google.googlejavaformat.java.CommandLineOptions,com.google.googlejavaformat.java.JavaFormatterOptions)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.UsageException: java.lang.String buildMessage(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.UsageException: java.lang.String buildMessage(java.lang.String)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.UsageException: java.lang.String buildMessage(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.UsageException: void appendLines(java.lang.StringBuilder,java.lang.String[])> => <java.lang.System: java.lang.String lineSeparator()>
Found static invoke: <com.google.googlejavaformat.java.UsageException: void appendLines(java.lang.StringBuilder,java.lang.String[])> => <java.lang.System: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.UsageException: void appendLines(java.lang.StringBuilder,java.lang.String[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.UsageException: void appendLine(java.lang.StringBuilder,java.lang.String)> => <java.lang.System: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.UsageException: void appendLine(java.lang.StringBuilder,java.lang.String)> => <java.lang.System: java.lang.String lineSeparator()>
Found static invoke: <com.google.googlejavaformat.java.UsageException: void <init>(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.Range expandToBreakableRegions(com.google.common.collect.Range)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.Range expandToBreakableRegions(com.google.common.collect.Range)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.Range expandToBreakableRegions(com.google.common.collect.Range)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.Range expandToBreakableRegions(com.google.common.collect.Range)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.Range expandToBreakableRegions(com.google.common.collect.Range)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.Range expandToBreakableRegions(com.google.common.collect.Range)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaOutput: com.google.common.collect.Range expandToBreakableRegions(com.google.common.collect.Range)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.AutoOneOf_JavaInputAstVisitor_AnnotationOrModifier$Parent_: com.google.googlejavaformat.Input$Tok modifier()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.FormatFileCallable: com.google.common.collect.RangeSet characterRanges(java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.FormatFileCallable: com.google.common.collect.RangeSet characterRanges(java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.FormatFileCallable: com.google.common.collect.RangeSet characterRanges(java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.FormatFileCallable: com.google.common.collect.RangeSet characterRanges(java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.FormatFileCallable: com.google.common.collect.RangeSet characterRanges(java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.FormatFileCallable: com.google.common.collect.RangeSet characterRanges(java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.FormatFileCallable: com.google.common.collect.RangeSet characterRanges(java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: void <init>(java.lang.String,com.google.common.collect.ImmutableList,com.google.googlejavaformat.java.JavaFormatterOptions$Style)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: void <init>(java.lang.String,com.google.common.collect.ImmutableList,com.google.googlejavaformat.java.JavaFormatterOptions$Style)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: void <init>(java.lang.String,com.google.common.collect.ImmutableList,com.google.googlejavaformat.java.JavaFormatterOptions$Style)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: java.lang.String reorderImports()> => <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: java.lang.String reorderImports()> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: java.lang.String reorderImports()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: java.lang.String reorderImports()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: void visitBindingPattern(com.sun.source.tree.ModifiersTree,com.sun.source.tree.Tree,javax.lang.model.element.Name)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: void visitBindingPattern(com.sun.source.tree.ModifiersTree,com.sun.source.tree.Tree,javax.lang.model.element.Name)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: void visitBindingPattern(com.sun.source.tree.ModifiersTree,com.sun.source.tree.Tree,javax.lang.model.element.Name)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: void visitBindingPattern(com.sun.source.tree.ModifiersTree,com.sun.source.tree.Tree,javax.lang.model.element.Name)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: void visitBindingPattern(com.sun.source.tree.ModifiersTree,com.sun.source.tree.Tree,javax.lang.model.element.Name)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.java17.Java17InputAstVisitor: void visitBindingPattern(com.sun.source.tree.ModifiersTree,com.sun.source.tree.Tree,javax.lang.model.element.Name)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Newlines$LineIterator: void advance()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Doc$Level: com.google.googlejavaformat.Doc$State computeBroken(com.google.googlejavaformat.CommentsHelper,int,com.google.googlejavaformat.Doc$State)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.Doc$Level: com.google.googlejavaformat.Doc$State computeBroken(com.google.googlejavaformat.CommentsHelper,int,com.google.googlejavaformat.Doc$State)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.Doc$Level: com.google.googlejavaformat.Doc$State computeBroken(com.google.googlejavaformat.CommentsHelper,int,com.google.googlejavaformat.Doc$State)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Doc$Level: void splitByBreaks(java.util.List,java.util.List,java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Doc$Level: void splitByBreaks(java.util.List,java.util.List,java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$isAndroid__68: java.lang.Object apply(java.lang.Object)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$isAndroid__68: java.lang.Object apply(java.lang.Object)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$isThirdParty__69: java.lang.Object apply(java.lang.Object)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$isThirdParty__69: java.lang.Object apply(java.lang.Object)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$isJava__70: java.lang.Object apply(java.lang.Object)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$isJava__70: java.lang.Object apply(java.lang.Object)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$isStatic__65: java.lang.Object apply(java.lang.Object)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$isStatic__65: java.lang.Object apply(java.lang.Object)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$isStatic__67: java.lang.Object apply(java.lang.Object)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$isStatic__67: java.lang.Object apply(java.lang.Object)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Boolean lambda$visitModule$5(com.sun.source.tree.DirectiveTree,com.sun.source.tree.Tree$Kind)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: java.lang.Boolean lambda$visitModule$5(com.sun.source.tree.DirectiveTree,com.sun.source.tree.Tree$Kind)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$shouldInsertBlankLineGoogle__117: java.lang.Object apply(java.lang.Object,java.lang.Object)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$shouldInsertBlankLineGoogle__117: java.lang.Object apply(java.lang.Object,java.lang.Object)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$shouldInsertBlankLineAosp__116: java.lang.Object apply(java.lang.Object,java.lang.Object)> => <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer$shouldInsertBlankLineAosp__116: java.lang.Object apply(java.lang.Object,java.lang.Object)> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void lambda$visitDot$6(java.util.Set,java.lang.Long)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void lambda$visitDot$6(java.util.Set,java.lang.Long)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptions$Builder: com.google.googlejavaformat.java.CommandLineOptions$Builder assumeFilename(java.lang.String)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptions$Builder: com.google.googlejavaformat.java.CommandLineOptions$Builder assumeFilename(java.lang.String)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocWriter: void <init>(int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: com.google.common.collect.ImmutableList deindentPreCodeBlocks(java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: com.google.common.collect.ImmutableList joinAdjacentLiteralsAndAdjacentWhitespace(java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: com.google.common.collect.ImmutableList joinAdjacentLiteralsAndAdjacentWhitespace(java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_FormatFileCallable_Result: void <init>(java.nio.file.Path,java.lang.String,java.lang.String,com.google.googlejavaformat.java.FormatterException)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.Doc$Level: void <init>(com.google.googlejavaformat.Indent)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptions$Builder: void <init>()> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.CommandLineOptions$Builder: void <init>()> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower: com.google.common.collect.TreeRangeMap getReflowReplacements()> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaCommentsHelper: java.util.List wrapLineComments(java.util.List,int)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.SnippetFormatter$SnippetWrapper: void <init>(com.google.googlejavaformat.java.SnippetFormatter)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean hasJavaDoc(com.sun.source.tree.Tree)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean hasJavaDoc(com.sun.source.tree.Tree)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitDotWithPrefix(java.util.List,boolean,java.util.Collection,com.google.googlejavaformat.Doc$FillMode)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitDotWithPrefix(java.util.List,boolean,java.util.Collection,com.google.googlejavaformat.Doc$FillMode)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitDotWithPrefix(java.util.List,boolean,java.util.Collection,com.google.googlejavaformat.Doc$FillMode)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitDotWithPrefix(java.util.List,boolean,java.util.Collection,com.google.googlejavaformat.Doc$FillMode)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitRegularDot(java.util.List,boolean)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitRegularDot(java.util.List,boolean)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void declareMany(java.util.List,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void declareMany(java.util.List,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationModifiersAndTypeAnnotations splitModifiers(com.sun.source.tree.ModifiersTree,java.util.List)> => <java.util.stream.Collectors: java.util.stream.Collector toList()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationModifiersAndTypeAnnotations splitModifiers(com.sun.source.tree.ModifiersTree,java.util.List)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationModifiersAndTypeAnnotations splitModifiers(com.sun.source.tree.ModifiersTree,java.util.List)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationModifiersAndTypeAnnotations splitModifiers(com.sun.source.tree.ModifiersTree,java.util.List)> => <java.util.stream.Collectors: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationModifiersAndTypeAnnotations splitModifiers(com.sun.source.tree.ModifiersTree,java.util.List)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: com.google.common.collect.ImmutableList visitModifiers(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationModifiersAndTypeAnnotations,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,java.util.Optional)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: com.google.common.collect.ImmutableList visitModifiers(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationModifiersAndTypeAnnotations,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,java.util.Optional)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: com.google.common.collect.ImmutableList visitModifiers(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationModifiersAndTypeAnnotations,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,java.util.Optional)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: com.google.common.collect.ImmutableList visitModifiers(com.google.googlejavaformat.java.JavaInputAstVisitor$DeclarationModifiersAndTypeAnnotations,com.google.googlejavaformat.java.JavaInputAstVisitor$Direction,java.util.Optional)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: com.sun.tools.javac.tree.JCTree$Tag unaryTag(com.sun.source.tree.ExpressionTree)> => <com.sun.tools.javac.tree.JCTree$Tag: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitUnionType(com.sun.source.tree.VariableTree)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitUnionType(com.sun.source.tree.VariableTree)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitUnionType(com.sun.source.tree.VariableTree)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitUnionType(com.sun.source.tree.VariableTree)> => <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitUnionType(com.sun.source.tree.VariableTree)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitUnionType(com.sun.source.tree.VariableTree)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitUnionType(com.sun.source.tree.VariableTree)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: void visitUnionType(com.sun.source.tree.VariableTree)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaInputAstVisitor_DeclarationModifiersAndTypeAnnotations: void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableList)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoValue_JavaInputAstVisitor_DeclarationModifiersAndTypeAnnotations: void <init>(com.google.common.collect.ImmutableList,com.google.common.collect.ImmutableList)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.InputOutput: void addToRanges(java.util.List,int,int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.InputOutput: void addToRanges(java.util.List,int,int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.InputOutput: void addToRanges(java.util.List,int,int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: java.util.Optional findIdentifier(int,com.google.common.collect.ImmutableSet)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: java.util.Optional findIdentifier(int,com.google.common.collect.ImmutableSet)> => <java.util.Optional: java.util.Optional empty()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: java.util.Optional findIdentifier(int,com.google.common.collect.ImmutableSet)> => <java.util.Optional: java.util.Optional of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: java.util.Optional findIdentifier(int,com.google.common.collect.ImmutableSet)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: java.util.Optional findIdentifier(int,com.google.common.collect.ImmutableSet)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: java.util.Optional findIdentifier(int,com.google.common.collect.ImmutableSet)> => <java.util.Optional: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: com.google.googlejavaformat.java.ImportOrderer$ImportsAndIndex scanImports(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: com.google.googlejavaformat.java.ImportOrderer$ImportsAndIndex scanImports(int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: com.google.googlejavaformat.java.ImportOrderer$ImportsAndIndex scanImports(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: java.lang.String tokString(int,int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: java.lang.String reorderedImportsString(com.google.common.collect.ImmutableSortedSet)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoOneOf_JavaInputAstVisitor_AnnotationOrModifier: com.google.googlejavaformat.java.JavaInputAstVisitor$AnnotationOrModifier 'annotation'(com.sun.source.tree.AnnotationTree)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.AutoOneOf_JavaInputAstVisitor_AnnotationOrModifier: com.google.googlejavaformat.java.JavaInputAstVisitor$AnnotationOrModifier modifier(com.google.googlejavaformat.Input$Tok)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: void checkMatchingTags()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower: void indentTextBlocks(com.google.common.collect.TreeRangeMap,java.util.List)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower: void indentTextBlocks(com.google.common.collect.TreeRangeMap,java.util.List)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower: void indentTextBlocks(com.google.common.collect.TreeRangeMap,java.util.List)> => <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower: void indentTextBlocks(com.google.common.collect.TreeRangeMap,java.util.List)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower: void indentTextBlocks(com.google.common.collect.TreeRangeMap,java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower: void indentTextBlocks(com.google.common.collect.TreeRangeMap,java.util.List)> => <java.util.stream.Collectors: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower: void wrapLongStrings(com.google.common.collect.TreeRangeMap,java.util.List)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower: void wrapLongStrings(com.google.common.collect.TreeRangeMap,java.util.List)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower: void wrapLongStrings(com.google.common.collect.TreeRangeMap,java.util.List)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower: void wrapLongStrings(com.google.common.collect.TreeRangeMap,java.util.List)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper$Reflower: void wrapLongStrings(com.google.common.collect.TreeRangeMap,java.util.List)> => <java.util.concurrent.atomic.AtomicBoolean: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.String stripIndent(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.String reflow(java.lang.String,int,int,int,com.google.common.collect.ImmutableList,boolean)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.String reflow(java.lang.String,int,int,int,com.google.common.collect.ImmutableList,boolean)> => <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence)>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.String reflow(java.lang.String,int,int,int,com.google.common.collect.ImmutableList,boolean)> => <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.String reflow(java.lang.String,int,int,int,com.google.common.collect.ImmutableList,boolean)> => <java.util.stream.Collectors: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.String reflow(java.lang.String,int,int,int,com.google.common.collect.ImmutableList,boolean)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.lang.String reflow(java.lang.String,int,int,int,com.google.common.collect.ImmutableList,boolean)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.google.common.collect.ImmutableList stringComponents(java.lang.String,com.sun.tools.javac.tree.JCTree$JCCompilationUnit,java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.google.common.collect.ImmutableList stringComponents(java.lang.String,com.sun.tools.javac.tree.JCTree$JCCompilationUnit,java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: com.google.common.collect.ImmutableList stringComponents(java.lang.String,com.sun.tools.javac.tree.JCTree$JCCompilationUnit,java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.util.List flatten(java.lang.String,com.sun.tools.javac.tree.JCTree$JCCompilationUnit,com.sun.source.util.TreePath,com.sun.source.util.TreePath,java.util.concurrent.atomic.AtomicBoolean)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.util.List flatten(java.lang.String,com.sun.tools.javac.tree.JCTree$JCCompilationUnit,com.sun.source.util.TreePath,com.sun.source.util.TreePath,java.util.concurrent.atomic.AtomicBoolean)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.util.List flatten(java.lang.String,com.sun.tools.javac.tree.JCTree$JCCompilationUnit,com.sun.source.util.TreePath,com.sun.source.util.TreePath,java.util.concurrent.atomic.AtomicBoolean)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: java.util.List flatten(java.lang.String,com.sun.tools.javac.tree.JCTree$JCCompilationUnit,com.sun.source.util.TreePath,com.sun.source.util.TreePath,java.util.concurrent.atomic.AtomicBoolean)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: int hasEscapedNewlineAt(java.lang.String,int)> => <java.lang.String: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: int hasEscapedNewlineAt(java.lang.String,int)> => <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>
Found static invoke: <com.google.googlejavaformat.java.StringWrapper: int hasEscapedWhitespaceAt(java.lang.String,int)> => <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object)>
Found static invoke: <com.google.googlejavaformat.java.JavaInputAstVisitor: boolean fillFirstArgument(com.sun.source.tree.ExpressionTree,java.util.List,com.google.googlejavaformat.Indent)> => <com.sun.source.tree.Tree$Kind: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: boolean isIdentifierToken(int)> => <java.lang.Character: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: boolean isIdentifierToken(int)> => <java.lang.Character: boolean isJavaIdentifierStart(int)>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: com.google.googlejavaformat.java.ImportOrderer$StringAndIndex scanImported(int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.ImportOrderer: com.google.googlejavaformat.java.ImportOrderer$StringAndIndex scanImported(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaCommentsHelper: java.lang.String indentJavadoc(java.util.List,int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.JavaCommentsHelper: java.lang.String preserveIndentation(java.util.List,int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <com.google.googlejavaformat.java.javadoc.JavadocLexer: com.google.googlejavaformat.java.javadoc.Token$Type consumeToken()> => <java.lang.Throwable: void <clinit>()>

Total static calls: 910
