All Static Calls invokes JDK:
Found static invoke: <org.msgpack.core.ExtensionTypeHeader: java.lang.String toString()> => <java.lang.Byte: void <clinit>()>
Found static invoke: <org.msgpack.core.ExtensionTypeHeader: java.lang.String toString()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <org.msgpack.core.ExtensionTypeHeader: java.lang.String toString()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.ExtensionTypeHeader: java.lang.String toString()> => <java.lang.Byte: java.lang.Byte valueOf(byte)>
Found static invoke: <org.msgpack.core.ExtensionTypeHeader: java.lang.String toString()> => <java.lang.String: void <clinit>()>
Found static invoke: <org.msgpack.core.ExtensionTypeHeader: java.lang.String toString()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageBufferPacker: org.msgpack.core.buffer.MessageBufferOutput reset(org.msgpack.core.buffer.MessageBufferOutput)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageBufferPacker: byte[] toByteArray()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageBufferPacker: org.msgpack.core.buffer.MessageBuffer toMessageBuffer()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageBufferPacker: java.util.List toBufferList()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageFormat: org.msgpack.core.MessageFormat valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <org.msgpack.core.MessageFormat: org.msgpack.value.ValueType getValueType()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageIntegerOverflowException: void <init>(long)> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageIntegerOverflowException: void <init>(long)> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessagePack$UnpackerConfig: void <init>()> => <java.nio.charset.CodingErrorAction: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePackException: java.lang.UnsupportedOperationException UNSUPPORTED(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePacker: org.msgpack.core.MessagePacker packBigInteger(java.math.BigInteger)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePacker: org.msgpack.core.MessagePacker packString(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePacker: org.msgpack.core.MessagePacker packString(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePacker: org.msgpack.core.MessagePacker packTimestamp(long)> => <java.time.Instant: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePacker: org.msgpack.core.MessagePacker packTimestamp(long)> => <java.time.Instant: java.time.Instant ofEpochMilli(long)>
Found static invoke: <org.msgpack.core.MessagePacker: org.msgpack.core.MessagePacker packTimestamp(long,int)> => <java.lang.Math: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePacker: org.msgpack.core.MessagePacker packTimestamp(long,int)> => <java.lang.Math: long floorMod(long,long)>
Found static invoke: <org.msgpack.core.MessagePacker: org.msgpack.core.MessagePacker packTimestamp(long,int)> => <java.lang.Math: long addExact(long,long)>
Found static invoke: <org.msgpack.core.MessagePacker: org.msgpack.core.MessagePacker packTimestamp(long,int)> => <java.lang.Math: long floorDiv(long,long)>
Found static invoke: <org.msgpack.core.MessagePacker: org.msgpack.core.MessagePacker packArrayHeader(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePacker: org.msgpack.core.MessagePacker packMapHeader(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageFormat getNextFormat()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: void skipValue(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.value.ImmutableValue unpackValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.value.Variable unpackValue(org.msgpack.value.Variable)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: boolean tryUnpackNil()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.math.BigInteger unpackBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String unpackString()> => <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String unpackString()> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String unpackString()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String unpackString()> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String unpackString()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String unpackString()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String unpackString()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String unpackString()> => <java.nio.Buffer: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String unpackString()> => <java.nio.ByteBuffer: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String unpackString()> => <java.lang.String: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String unpackString()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String unpackString()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.time.Instant unpackTimestamp(org.msgpack.core.ExtensionTypeHeader)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.time.Instant unpackTimestamp(org.msgpack.core.ExtensionTypeHeader)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.time.Instant unpackTimestamp(org.msgpack.core.ExtensionTypeHeader)> => <java.lang.Byte: java.lang.Byte valueOf(byte)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.time.Instant unpackTimestamp(org.msgpack.core.ExtensionTypeHeader)> => <java.time.Instant: java.time.Instant ofEpochSecond(long,long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.time.Instant unpackTimestamp(org.msgpack.core.ExtensionTypeHeader)> => <java.time.Instant: java.time.Instant ofEpochSecond(long,long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.time.Instant unpackTimestamp(org.msgpack.core.ExtensionTypeHeader)> => <java.time.Instant: java.time.Instant ofEpochSecond(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.time.Instant unpackTimestamp(org.msgpack.core.ExtensionTypeHeader)> => <java.lang.String: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.time.Instant unpackTimestamp(org.msgpack.core.ExtensionTypeHeader)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.time.Instant unpackTimestamp(org.msgpack.core.ExtensionTypeHeader)> => <java.lang.Byte: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.time.Instant unpackTimestamp(org.msgpack.core.ExtensionTypeHeader)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.time.Instant unpackTimestamp(org.msgpack.core.ExtensionTypeHeader)> => <java.time.Instant: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.time.Instant unpackTimestamp(org.msgpack.core.ExtensionTypeHeader)> => <java.time.Instant: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.time.Instant unpackTimestamp(org.msgpack.core.ExtensionTypeHeader)> => <java.time.Instant: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: void checkArgument(boolean)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: void checkArgument(boolean,java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: void checkArgument(boolean,java.lang.Object)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <org.msgpack.core.Preconditions: void checkArgument(boolean,java.lang.Object)> => <java.lang.String: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: void checkState(boolean)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: void checkState(boolean,java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: void checkState(boolean,java.lang.Object)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <org.msgpack.core.Preconditions: void checkState(boolean,java.lang.Object)> => <java.lang.String: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.Object checkNotNull(java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)> => <java.lang.String: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: int checkElementIndex(int,int,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: int checkPositionIndex(int,int,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: void checkPositionIndexes(int,int,int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.ArrayBufferOutput: void <init>(int)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.ArrayBufferOutput: java.util.List toBufferList()> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.ArrayBufferOutput: org.msgpack.core.buffer.MessageBuffer next(int)> => <java.lang.Math: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.ArrayBufferOutput: org.msgpack.core.buffer.MessageBuffer next(int)> => <java.lang.Math: int max(int,int)>
Found static invoke: <org.msgpack.core.buffer.ChannelBufferInput: void <init>(java.nio.channels.ReadableByteChannel,int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.ChannelBufferOutput: void write(byte[],int,int)> => <java.nio.ByteBuffer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.ChannelBufferOutput: void write(byte[],int,int)> => <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
Found static invoke: <org.msgpack.core.buffer.ChannelBufferOutput: void write(byte[],int,int)> => <java.nio.Buffer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess$DirectBufferConstructorType: org.msgpack.core.buffer.DirectBufferAccess$DirectBufferConstructorType valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: org.msgpack.core.buffer.MessageBuffer allocate(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: short getShort(int)> => <java.lang.Short: short reverseBytes(short)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: short getShort(int)> => <java.lang.Short: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: int getInt(int)> => <java.lang.Integer: int reverseBytes(int)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: int getInt(int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: float getFloat(int)> => <java.lang.Float: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: float getFloat(int)> => <java.lang.Float: float intBitsToFloat(int)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: long getLong(int)> => <java.lang.Long: long reverseBytes(long)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: long getLong(int)> => <java.lang.Long: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: double getDouble(int)> => <java.lang.Double: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: double getDouble(int)> => <java.lang.Double: double longBitsToDouble(long)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void getBytes(int,int,java.nio.ByteBuffer)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void putShort(int,short)> => <java.lang.Short: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void putShort(int,short)> => <java.lang.Short: short reverseBytes(short)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void putInt(int,int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void putInt(int,int)> => <java.lang.Integer: int reverseBytes(int)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void putFloat(int,float)> => <java.lang.Float: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void putFloat(int,float)> => <java.lang.Float: int floatToRawIntBits(float)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void putLong(int,long)> => <java.lang.Long: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void putLong(int,long)> => <java.lang.Long: long reverseBytes(long)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void putDouble(int,double)> => <java.lang.Double: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void putDouble(int,double)> => <java.lang.Double: long doubleToRawLongBits(double)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void putByteBuffer(int,java.nio.ByteBuffer,int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void putByteBuffer(int,java.nio.ByteBuffer,int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: java.nio.ByteBuffer sliceAsByteBuffer(int,int)> => <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: java.nio.ByteBuffer sliceAsByteBuffer(int,int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: java.nio.ByteBuffer sliceAsByteBuffer(int,int)> => <java.nio.Buffer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: java.nio.ByteBuffer sliceAsByteBuffer(int,int)> => <java.nio.ByteBuffer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: java.lang.String toHexString(int,int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: java.lang.String toHexString(int,int)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: java.lang.String toHexString(int,int)> => <java.lang.Byte: java.lang.Byte valueOf(byte)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: java.lang.String toHexString(int,int)> => <java.lang.String: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: java.lang.String toHexString(int,int)> => <java.lang.Byte: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBufferU: void putByteBuffer(int,java.nio.ByteBuffer,int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableBinaryValue newBinary(byte[],boolean)> => <java.util.Arrays: byte[] copyOf(byte[],int)>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableBinaryValue newBinary(byte[],boolean)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableBinaryValue newBinary(byte[],int,int,boolean)> => <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableBinaryValue newBinary(byte[],int,int,boolean)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableStringValue newString(byte[],boolean)> => <java.util.Arrays: byte[] copyOf(byte[],int)>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableStringValue newString(byte[],boolean)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableStringValue newString(byte[],int,int,boolean)> => <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableStringValue newString(byte[],int,int,boolean)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableArrayValue newArray(org.msgpack.value.Value[])> => <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableArrayValue newArray(org.msgpack.value.Value[])> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableArrayValue newArray(org.msgpack.value.Value[],boolean)> => <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableArrayValue newArray(org.msgpack.value.Value[],boolean)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableMapValue newMap(org.msgpack.value.Value[])> => <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableMapValue newMap(org.msgpack.value.Value[])> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableMapValue newMap(org.msgpack.value.Value[],boolean)> => <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableMapValue newMap(org.msgpack.value.Value[],boolean)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableTimestampValue newTimestamp(long)> => <java.time.Instant: void <clinit>()>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableTimestampValue newTimestamp(long)> => <java.time.Instant: java.time.Instant ofEpochMilli(long)>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableTimestampValue newTimestamp(long,int)> => <java.time.Instant: void <clinit>()>
Found static invoke: <org.msgpack.value.ValueFactory: org.msgpack.value.ImmutableTimestampValue newTimestamp(long,int)> => <java.time.Instant: java.time.Instant ofEpochSecond(long,long)>
Found static invoke: <org.msgpack.value.ValueType: org.msgpack.value.ValueType valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <org.msgpack.value.Variable$AbstractNumberValueAccessor: java.math.BigInteger toBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.value.Variable$AbstractNumberValueAccessor: java.math.BigInteger toBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractNumberValueAccessor: java.math.BigInteger toBigInteger()> => <java.math.BigDecimal: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractRawValueAccessor: java.nio.ByteBuffer asByteBuffer()> => <java.nio.ByteBuffer: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractRawValueAccessor: java.nio.ByteBuffer asByteBuffer()> => <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
Found static invoke: <org.msgpack.value.Variable$AbstractRawValueAccessor: java.nio.ByteBuffer asByteBuffer()> => <java.nio.Buffer: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractRawValueAccessor: java.lang.String asString()> => <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
Found static invoke: <org.msgpack.value.Variable$AbstractRawValueAccessor: java.lang.String asString()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractRawValueAccessor: java.lang.String asString()> => <java.nio.Buffer: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractRawValueAccessor: java.lang.String asString()> => <java.nio.ByteBuffer: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractRawValueAccessor: java.lang.String asString()> => <java.nio.charset.CodingErrorAction: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractRawValueAccessor: java.lang.String toString()> => <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
Found static invoke: <org.msgpack.value.Variable$AbstractRawValueAccessor: java.lang.String toString()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractRawValueAccessor: java.lang.String toString()> => <java.nio.Buffer: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractRawValueAccessor: java.lang.String toString()> => <java.nio.ByteBuffer: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractRawValueAccessor: java.lang.String toString()> => <java.nio.charset.CodingErrorAction: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractValueAccessor: org.msgpack.value.NilValue asNilValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractValueAccessor: org.msgpack.value.BooleanValue asBooleanValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractValueAccessor: org.msgpack.value.NumberValue asNumberValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractValueAccessor: org.msgpack.value.IntegerValue asIntegerValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractValueAccessor: org.msgpack.value.FloatValue asFloatValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractValueAccessor: org.msgpack.value.RawValue asRawValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractValueAccessor: org.msgpack.value.BinaryValue asBinaryValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractValueAccessor: org.msgpack.value.StringValue asStringValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractValueAccessor: org.msgpack.value.ArrayValue asArrayValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractValueAccessor: org.msgpack.value.MapValue asMapValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractValueAccessor: org.msgpack.value.ExtensionValue asExtensionValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$AbstractValueAccessor: org.msgpack.value.TimestampValue asTimestampValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$ArrayValueAccessor: java.util.List list()> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$ArrayValueAccessor: java.util.List list()> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found static invoke: <org.msgpack.value.Variable$IntegerValueAccessor: byte asByte()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$IntegerValueAccessor: short asShort()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$IntegerValueAccessor: int asInt()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$IntegerValueAccessor: long asLong()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$IntegerValueAccessor: java.math.BigInteger asBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.value.Variable$IntegerValueAccessor: java.math.BigInteger asBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable$Type: org.msgpack.value.Variable$Type valueOf(java.lang.String)> => <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
Found static invoke: <org.msgpack.value.Variable: org.msgpack.value.NilValue asNilValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable: org.msgpack.value.BooleanValue asBooleanValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable: org.msgpack.value.NumberValue asNumberValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable: org.msgpack.value.IntegerValue asIntegerValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable: org.msgpack.value.FloatValue asFloatValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable: org.msgpack.value.RawValue asRawValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable: org.msgpack.value.BinaryValue asBinaryValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable: org.msgpack.value.StringValue asStringValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable: org.msgpack.value.ArrayValue asArrayValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable: org.msgpack.value.MapValue asMapValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable: org.msgpack.value.ExtensionValue asExtensionValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable: org.msgpack.value.TimestampValue asTimestampValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableRawValue: byte[] asByteArray()> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableRawValue: byte[] asByteArray()> => <java.util.Arrays: byte[] copyOf(byte[],int)>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableRawValue: java.nio.ByteBuffer asByteBuffer()> => <java.nio.ByteBuffer: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableRawValue: java.nio.ByteBuffer asByteBuffer()> => <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableRawValue: java.nio.ByteBuffer asByteBuffer()> => <java.nio.Buffer: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableRawValue: java.lang.String asString()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableRawValue: java.lang.String toJson()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableValue: org.msgpack.value.ImmutableNilValue asNilValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableValue: org.msgpack.value.ImmutableBooleanValue asBooleanValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableValue: org.msgpack.value.ImmutableNumberValue asNumberValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableValue: org.msgpack.value.ImmutableIntegerValue asIntegerValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableValue: org.msgpack.value.ImmutableFloatValue asFloatValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableValue: org.msgpack.value.ImmutableRawValue asRawValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableValue: org.msgpack.value.ImmutableBinaryValue asBinaryValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableValue: org.msgpack.value.ImmutableStringValue asStringValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableValue: org.msgpack.value.ImmutableArrayValue asArrayValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableValue: org.msgpack.value.ImmutableMapValue asMapValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableValue: org.msgpack.value.ImmutableExtensionValue asExtensionValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableValue: org.msgpack.value.ImmutableTimestampValue asTimestampValue()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableArrayValueImpl$Ite: org.msgpack.value.Value next()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableArrayValueImpl$Ite: void remove()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableArrayValueImpl: boolean equals(java.lang.Object)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableArrayValueImpl: boolean equals(java.lang.Object)> => <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>
Found static invoke: <org.msgpack.value.impl.ImmutableArrayValueImpl: java.lang.String toJson()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableArrayValueImpl: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableBigIntegerValueImpl: byte asByte()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableBigIntegerValueImpl: short asShort()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableBigIntegerValueImpl: int asInt()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableBigIntegerValueImpl: long asLong()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableBinaryValueImpl: boolean equals(java.lang.Object)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableBinaryValueImpl: boolean equals(java.lang.Object)> => <java.util.Arrays: boolean equals(byte[],byte[])>
Found static invoke: <org.msgpack.value.impl.ImmutableBinaryValueImpl: boolean equals(java.lang.Object)> => <java.util.Arrays: boolean equals(byte[],byte[])>
Found static invoke: <org.msgpack.value.impl.ImmutableBinaryValueImpl: boolean equals(java.lang.Object)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableBinaryValueImpl: int hashCode()> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableBinaryValueImpl: int hashCode()> => <java.util.Arrays: int hashCode(byte[])>
Found static invoke: <org.msgpack.value.impl.ImmutableBooleanValueImpl: java.lang.String toJson()> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableBooleanValueImpl: java.lang.String toJson()> => <java.lang.Boolean: java.lang.String toString(boolean)>
Found static invoke: <org.msgpack.value.impl.ImmutableDoubleValueImpl: java.math.BigInteger toBigInteger()> => <java.math.BigDecimal: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableDoubleValueImpl: int hashCode()> => <java.lang.Double: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableDoubleValueImpl: int hashCode()> => <java.lang.Double: long doubleToLongBits(double)>
Found static invoke: <org.msgpack.value.impl.ImmutableDoubleValueImpl: java.lang.String toJson()> => <java.lang.Double: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableDoubleValueImpl: java.lang.String toJson()> => <java.lang.Double: java.lang.String toString(double)>
Found static invoke: <org.msgpack.value.impl.ImmutableDoubleValueImpl: java.lang.String toJson()> => <java.lang.Double: boolean isInfinite(double)>
Found static invoke: <org.msgpack.value.impl.ImmutableDoubleValueImpl: java.lang.String toJson()> => <java.lang.Double: boolean isNaN(double)>
Found static invoke: <org.msgpack.value.impl.ImmutableDoubleValueImpl: java.lang.String toString()> => <java.lang.Double: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableDoubleValueImpl: java.lang.String toString()> => <java.lang.Double: java.lang.String toString(double)>
Found static invoke: <org.msgpack.value.impl.ImmutableExtensionValueImpl: boolean equals(java.lang.Object)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableExtensionValueImpl: boolean equals(java.lang.Object)> => <java.util.Arrays: boolean equals(byte[],byte[])>
Found static invoke: <org.msgpack.value.impl.ImmutableExtensionValueImpl: java.lang.String toJson()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableExtensionValueImpl: java.lang.String toJson()> => <java.lang.Integer: java.lang.String toString(int,int)>
Found static invoke: <org.msgpack.value.impl.ImmutableExtensionValueImpl: java.lang.String toJson()> => <java.lang.Byte: java.lang.String toString(byte)>
Found static invoke: <org.msgpack.value.impl.ImmutableExtensionValueImpl: java.lang.String toJson()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableExtensionValueImpl: java.lang.String toJson()> => <java.lang.Byte: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableExtensionValueImpl: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableExtensionValueImpl: java.lang.String toString()> => <java.lang.Integer: java.lang.String toString(int,int)>
Found static invoke: <org.msgpack.value.impl.ImmutableExtensionValueImpl: java.lang.String toString()> => <java.lang.Byte: java.lang.String toString(byte)>
Found static invoke: <org.msgpack.value.impl.ImmutableExtensionValueImpl: java.lang.String toString()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableExtensionValueImpl: java.lang.String toString()> => <java.lang.Byte: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableLongValueImpl: java.math.BigInteger toBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableLongValueImpl: java.math.BigInteger toBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.value.impl.ImmutableLongValueImpl: byte asByte()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableLongValueImpl: short asShort()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableLongValueImpl: int asInt()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableLongValueImpl: java.math.BigInteger asBigInteger()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableLongValueImpl: java.math.BigInteger asBigInteger()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.value.impl.ImmutableLongValueImpl: java.lang.String toJson()> => <java.lang.Long: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableLongValueImpl: java.lang.String toJson()> => <java.lang.Long: java.lang.String toString(long)>
Found static invoke: <org.msgpack.value.impl.ImmutableMapValueImpl$EntryIterator: org.msgpack.value.Value next()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableMapValueImpl$EntryIterator: void remove()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableMapValueImpl$EntrySetIterator: java.util.Map$Entry next()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableMapValueImpl$EntrySetIterator: void remove()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableMapValueImpl: org.msgpack.value.Value[] getKeyValueArray()> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableMapValueImpl: org.msgpack.value.Value[] getKeyValueArray()> => <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
Found static invoke: <org.msgpack.value.impl.ImmutableMapValueImpl: java.lang.String toJson()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableMapValueImpl: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableStringValueImpl: boolean equals(java.lang.Object)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableStringValueImpl: boolean equals(java.lang.Object)> => <java.util.Arrays: boolean equals(byte[],byte[])>
Found static invoke: <org.msgpack.value.impl.ImmutableStringValueImpl: boolean equals(java.lang.Object)> => <java.util.Arrays: boolean equals(byte[],byte[])>
Found static invoke: <org.msgpack.value.impl.ImmutableStringValueImpl: boolean equals(java.lang.Object)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableStringValueImpl: int hashCode()> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableStringValueImpl: int hashCode()> => <java.util.Arrays: int hashCode(byte[])>
Found static invoke: <org.msgpack.value.impl.ImmutableTimestampValueImpl: boolean equals(java.lang.Object)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableTimestampValueImpl: boolean equals(java.lang.Object)> => <java.util.Arrays: boolean equals(byte[],byte[])>
Found static invoke: <org.msgpack.value.impl.ImmutableTimestampValueImpl: java.lang.String toJson()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePackException: void <clinit>()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePacker: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePacker: void <clinit>()> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found static invoke: <org.msgpack.core.MessagePack: void <clinit>()> => <java.nio.charset.Charset: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePack: void <clinit>()> => <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpected(java.lang.String,byte)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpected(java.lang.String,byte)> => <java.lang.Byte: java.lang.Byte valueOf(byte)>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpected(java.lang.String,byte)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpected(java.lang.String,byte)> => <java.lang.String: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpected(java.lang.String,byte)> => <java.lang.Byte: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpected(java.lang.String,byte)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpected(java.lang.String,byte)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpected(java.lang.String,byte)> => <java.lang.String: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpected(java.lang.String,byte)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowI64(long)> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowI64(long)> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowI64(long)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowI32(int)> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowI32(int)> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowI32(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowI16(short)> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowI16(short)> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowI16(short)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowU64(long)> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowU64(long)> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowU64(long)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowU32(int)> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowU32(int)> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowU32(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowU16(short)> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowU16(short)> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowU16(short)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowU8(byte)> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowU8(byte)> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageIntegerOverflowException overflowU8(byte)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: int utf8MultibyteCharacterSize(byte)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: int utf8MultibyteCharacterSize(byte)> => <java.lang.Integer: int numberOfLeadingZeros(int)>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpectedExtension(java.lang.String,int,int)> => <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpectedExtension(java.lang.String,int,int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpectedExtension(java.lang.String,int,int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpectedExtension(java.lang.String,int,int)> => <java.lang.String: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpectedExtension(java.lang.String,int,int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessagePackException unexpectedExtension(java.lang.String,int,int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.MessageSizeException overflowU32Size(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.System: java.lang.String getProperty(java.lang.String)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.System: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.nio.ByteOrder: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.System: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.nio.ByteOrder: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.System: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.System: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.nio.ByteOrder: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <clinit>()> => <java.lang.System: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])> => <java.lang.String: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])> => <java.lang.String: java.lang.String valueOf(java.lang.Object)>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String format(java.lang.String,java.lang.Object[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badElementIndex(int,int,java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badElementIndex(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badElementIndex(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badElementIndex(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badElementIndex(int,int,java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badElementIndex(int,int,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badElementIndex(int,int,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badPositionIndex(int,int,java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badPositionIndex(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badPositionIndex(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badPositionIndex(int,int,java.lang.String)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badPositionIndex(int,int,java.lang.String)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badPositionIndex(int,int,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badPositionIndex(int,int,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badPositionIndexes(int,int,int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badPositionIndexes(int,int,int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.Preconditions: java.lang.String badPositionIndexes(int,int,int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.nio.ByteBuffer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.lang.Long: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.lang.Long: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.lang.Long: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void <clinit>()> => <java.nio.Buffer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: org.msgpack.core.buffer.MessageBuffer newMessageBuffer(byte[],int,int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: org.msgpack.core.buffer.MessageBuffer newMessageBuffer(byte[],int,int)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: org.msgpack.core.buffer.MessageBuffer newMessageBuffer(byte[],int,int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void clean(java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: long getAddress(java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: long getAddress(java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Long: java.lang.Long valueOf(long)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Long: java.lang.Long valueOf(long)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Integer: java.lang.Integer valueOf(int)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Long: java.lang.Long valueOf(long)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Long: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Long: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.nio.ByteBuffer newByteBuffer(long,int,int,java.nio.ByteBuffer)> => <java.lang.Long: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableBigIntegerValueImpl: void <clinit>()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.ImmutableBigIntegerValueImpl: void <clinit>()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.value.impl.ImmutableBigIntegerValueImpl: void <clinit>()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.value.impl.ImmutableBigIntegerValueImpl: void <clinit>()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.value.impl.ImmutableBigIntegerValueImpl: void <clinit>()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.value.impl.ImmutableBigIntegerValueImpl: void <clinit>()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.value.impl.ImmutableBigIntegerValueImpl: void <clinit>()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.value.impl.ImmutableBigIntegerValueImpl: void <clinit>()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.value.impl.ImmutableBigIntegerValueImpl: void <clinit>()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.value.Variable: void <clinit>()> => <java.math.BigInteger: void <clinit>()>
Found static invoke: <org.msgpack.value.Variable: void <clinit>()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.value.Variable: void <clinit>()> => <java.math.BigInteger: java.math.BigInteger valueOf(long)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: int getJavaVersion()> => <java.lang.System: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: int getJavaVersion()> => <java.lang.Integer: int parseInt(java.lang.String)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: int getJavaVersion()> => <java.lang.Integer: int parseInt(java.lang.String)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: int getJavaVersion()> => <java.lang.Integer: int parseInt(java.lang.String)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: int getJavaVersion()> => <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: int getJavaVersion()> => <java.lang.System: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: int getJavaVersion()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: int getJavaVersion()> => <java.lang.System: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: int getJavaVersion()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void setupCleanerJava9(java.nio.ByteBuffer)> => <java.security.AccessController: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void setupCleanerJava9(java.nio.ByteBuffer)> => <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void setupCleanerJava9(java.nio.ByteBuffer)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void setupCleanerJava6(java.nio.ByteBuffer)> => <java.security.AccessController: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void setupCleanerJava6(java.nio.ByteBuffer)> => <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void setupCleanerJava6(java.nio.ByteBuffer)> => <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void setupCleanerJava6(java.nio.ByteBuffer)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: void setupCleanerJava6(java.nio.ByteBuffer)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.lang.Object getCleanerMethod(java.nio.ByteBuffer)> => <java.lang.Class: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.lang.Object getCleanMethod(java.nio.ByteBuffer,java.lang.reflect.Method)> => <java.lang.Class: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.DirectBufferAccess: java.lang.Object getInvokeCleanerMethod(java.nio.ByteBuffer)> => <java.lang.Class: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: org.msgpack.core.buffer.MessageBuffer newInstance(java.lang.reflect.Constructor,java.lang.Object[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: org.msgpack.core.buffer.MessageBuffer newInstance(java.lang.reflect.Constructor,java.lang.Object[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: org.msgpack.core.buffer.MessageBuffer newInstance(java.lang.reflect.Constructor,java.lang.Object[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePack$UnpackerConfig: void <init>(org.msgpack.core.MessagePack$UnpackerConfig)> => <java.nio.charset.CodingErrorAction: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePacker: int encodeStringToBufferAt(int,java.lang.String)> => <java.nio.CharBuffer: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePacker: int encodeStringToBufferAt(int,java.lang.String)> => <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>
Found static invoke: <org.msgpack.core.MessagePacker: int encodeStringToBufferAt(int,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePacker: int encodeStringToBufferAt(int,java.lang.String)> => <java.nio.Buffer: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: void skipPayload(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: void skipPayload(int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: void resetDecoder()> => <java.nio.CharBuffer: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: void resetDecoder()> => <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>
Found static invoke: <org.msgpack.core.MessageUnpacker: void resetDecoder()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: void resetDecoder()> => <java.nio.Buffer: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String decodeStringFastPath(int)> => <java.nio.charset.CodingErrorAction: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String decodeStringFastPath(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: java.lang.String decodeStringFastPath(int)> => <java.lang.String: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: void handleCoderError(java.nio.charset.CoderResult)> => <java.nio.charset.CodingErrorAction: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: void handleCoderError(java.nio.charset.CoderResult)> => <java.nio.charset.CodingErrorAction: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableRawValue: void decodeString()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableRawValue: void decodeString()> => <java.nio.charset.CodingErrorAction: void <clinit>()>
Found static invoke: <org.msgpack.value.impl.AbstractImmutableRawValue: void decodeString()> => <java.nio.charset.CodingErrorAction: void <clinit>()>
Found static invoke: <org.msgpack.core.buffer.MessageBuffer: void <init>(java.nio.ByteBuffer)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessagePacker: void prepareEncoder()> => <java.nio.charset.CodingErrorAction: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.buffer.MessageBuffer getNextBuffer()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <org.msgpack.core.MessageUnpacker: org.msgpack.core.buffer.MessageBuffer getNextBuffer()> => <java.lang.Throwable: void <clinit>()>

Total static calls: 491
