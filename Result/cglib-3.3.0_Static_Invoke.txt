All Static Calls invokes JDK:
Found static invoke: <net.sf.cglib.util.ParallelSorter$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.util.ParallelSorter$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.util.ParallelSorter$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.util.StringSwitcher$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found static invoke: <net.sf.cglib.util.StringSwitcher$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.FastClassEmitter$GetIndexCallback: void <init>(net.sf.cglib.core.CodeEmitter,java.util.List)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.FastClassEmitter: void <init>(org.objectweb.asm.ClassVisitor,java.lang.String,java.lang.Class)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found static invoke: <net.sf.cglib.reflect.FastClassEmitter: void <init>(org.objectweb.asm.ClassVisitor,java.lang.String,java.lang.Class)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.FastClassEmitter: void <init>(org.objectweb.asm.ClassVisitor,java.lang.String,java.lang.Class)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.FastClass: net.sf.cglib.reflect.FastMethod getMethod(java.lang.String,java.lang.Class[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.FastClass: net.sf.cglib.reflect.FastConstructor getConstructor(java.lang.Class[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.ConstructorDelegate$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.ConstructorDelegate$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.MulticastDelegate: java.util.List getTargets()> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.MulticastDelegate: java.util.List getTargets()> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found static invoke: <net.sf.cglib.reflect.MulticastDelegate: java.util.List getTargets()> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.MulticastDelegate: net.sf.cglib.reflect.MulticastDelegate remove(java.lang.Object)> => <java.lang.System: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.MulticastDelegate: net.sf.cglib.reflect.MulticastDelegate remove(java.lang.Object)> => <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
Found static invoke: <net.sf.cglib.reflect.MulticastDelegate: net.sf.cglib.reflect.MulticastDelegate remove(java.lang.Object)> => <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
Found static invoke: <net.sf.cglib.reflect.MethodDelegate$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.MethodDelegate$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.MethodDelegate$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.MethodWrapper: java.util.Set createSet(java.util.Collection)> => <java.util.HashSet: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CollectionUtils: java.util.List transform(java.util.Collection,net.sf.cglib.core.Transformer)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CollectionUtils: java.util.Map getIndexMap(java.util.List)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils$4: void processCase(int,org.objectweb.asm.Label)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils$13: java.lang.Object transform(java.lang.Object)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils$3: java.lang.Object transform(java.lang.Object)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils$2: void processCase(int,org.objectweb.asm.Label)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils$1: java.lang.Object run()> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils$1: java.lang.Object run()> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found static invoke: <net.sf.cglib.core.ReflectUtils$1: java.lang.Object run()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ClassNameReader: java.lang.String[] getClassInfo(org.objectweb.asm.ClassReader)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ClassNameReader: java.lang.String[] getClassInfo(org.objectweb.asm.ClassReader)> => <java.lang.String: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: org.objectweb.asm.Type getType(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: java.lang.String upperFirst(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: java.lang.String upperFirst(java.lang.String)> => <java.lang.Character: char toUpperCase(char)>
Found static invoke: <net.sf.cglib.core.TypeUtils: java.lang.String upperFirst(java.lang.String)> => <java.lang.Character: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: java.lang.String getClassName(org.objectweb.asm.Type)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: org.objectweb.asm.Type[] add(org.objectweb.asm.Type[],org.objectweb.asm.Type)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: org.objectweb.asm.Type[] add(org.objectweb.asm.Type[],org.objectweb.asm.Type)> => <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
Found static invoke: <net.sf.cglib.core.TypeUtils: org.objectweb.asm.Type[] add(org.objectweb.asm.Type[],org.objectweb.asm.Type)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found static invoke: <net.sf.cglib.core.TypeUtils: org.objectweb.asm.Type[] add(org.objectweb.asm.Type[],org.objectweb.asm.Type)> => <java.lang.System: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: org.objectweb.asm.Type[] add(org.objectweb.asm.Type[],org.objectweb.asm.Type[])> => <java.lang.System: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: org.objectweb.asm.Type[] add(org.objectweb.asm.Type[],org.objectweb.asm.Type[])> => <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
Found static invoke: <net.sf.cglib.core.TypeUtils: org.objectweb.asm.Type[] add(org.objectweb.asm.Type[],org.objectweb.asm.Type[])> => <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
Found static invoke: <net.sf.cglib.core.TypeUtils: org.objectweb.asm.Type fromInternalName(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: java.lang.String[] toInternalNames(org.objectweb.asm.Type[])> => <java.lang.String: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: net.sf.cglib.core.Signature parseSignature(java.lang.String)> => <java.lang.StringBuffer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: net.sf.cglib.core.Signature parseSignature(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: net.sf.cglib.core.Signature parseConstructor(org.objectweb.asm.Type[])> => <java.lang.StringBuffer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: net.sf.cglib.core.Signature parseConstructor(org.objectweb.asm.Type[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: net.sf.cglib.core.Signature parseConstructor(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: org.objectweb.asm.Type getComponentType(org.objectweb.asm.Type)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: org.objectweb.asm.Type getComponentType(org.objectweb.asm.Type)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: java.lang.String escapeType(java.lang.String)> => <java.lang.StringBuffer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: java.lang.String escapeType(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.Signature: void <init>(java.lang.String,java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.Signature: void <init>(java.lang.String,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.Signature: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.KeyFactory$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.Math: int abs(int)>
Found static invoke: <net.sf.cglib.core.KeyFactory$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.Math: int abs(int)>
Found static invoke: <net.sf.cglib.core.KeyFactory$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.Math: void <clinit>()>
Found static invoke: <net.sf.cglib.core.KeyFactory$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.Math: void <clinit>()>
Found static invoke: <net.sf.cglib.core.KeyFactory$Generator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.security.ProtectionDomain getProtectionDomain(java.lang.Class)> => <java.security.AccessController: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.security.ProtectionDomain getProtectionDomain(java.lang.Class)> => <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
Found static invoke: <net.sf.cglib.core.ReflectUtils: org.objectweb.asm.Type[] getExceptionTypes(java.lang.reflect.Member)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: net.sf.cglib.core.Signature getSignature(java.lang.reflect.Member)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Constructor findConstructor(java.lang.String,java.lang.ClassLoader)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Constructor findConstructor(java.lang.String,java.lang.ClassLoader)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method findMethod(java.lang.String,java.lang.ClassLoader)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method findMethod(java.lang.String,java.lang.ClassLoader)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Object newInstance(java.lang.reflect.Constructor,java.lang.Object[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Object newInstance(java.lang.reflect.Constructor,java.lang.Object[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Object newInstance(java.lang.reflect.Constructor,java.lang.Object[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.String[] getNames(java.lang.Class[])> => <java.lang.String: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class[] getClasses(java.lang.Object[])> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method findNewInstance(java.lang.Class)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method findNewInstance(java.lang.Class)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method[] getPropertyMethods(java.beans.PropertyDescriptor[],boolean,boolean)> => <java.util.HashSet: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method[] getPropertyMethods(java.beans.PropertyDescriptor[],boolean,boolean)> => <java.lang.reflect.AccessibleObject: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method findDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.util.List addAllMethods(java.lang.Class,java.util.List)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.util.List addAllMethods(java.lang.Class,java.util.List)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.util.List addAllInterfaces(java.lang.Class,java.util.List)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.util.List addAllInterfaces(java.lang.Class,java.util.List)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method findInterfaceMethod(java.lang.Class)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method findInterfaceMethod(java.lang.Class)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method findInterfaceMethod(java.lang.Class)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method findInterfaceMethod(java.lang.Class)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class defineClass(java.lang.String,byte[],java.lang.ClassLoader,java.security.ProtectionDomain)> => <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class defineClass(java.lang.String,byte[],java.lang.ClassLoader,java.security.ProtectionDomain)> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class defineClass(java.lang.String,byte[],java.lang.ClassLoader,java.security.ProtectionDomain)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class defineClass(java.lang.String,byte[],java.lang.ClassLoader,java.security.ProtectionDomain)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class defineClass(java.lang.String,byte[],java.lang.ClassLoader,java.security.ProtectionDomain)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: int findPackageProtected(java.lang.Class[])> => <java.lang.reflect.Modifier: boolean isPublic(int)>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method[] findMethods(java.lang.String[],java.lang.reflect.Method[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method[] findMethods(java.lang.String[],java.lang.reflect.Method[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.reflect.Method[] findMethods(java.lang.String[],java.lang.reflect.Method[])> => <java.lang.reflect.AccessibleObject: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils$6: void processCase(int,org.objectweb.asm.Label)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils$2: java.lang.Object run()> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils$2: java.lang.Object run()> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData: void <init>(java.lang.ClassLoader)> => <java.util.HashSet: void <clinit>()>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData: void <init>(java.lang.ClassLoader)> => <java.lang.ref.Reference: void <clinit>()>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData: void <init>(java.lang.ClassLoader)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils$1: java.lang.Object transform(java.lang.Object)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.Block: void end()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.MethodInfoTransformer: java.lang.Object transform(java.lang.Object)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.MethodInfoTransformer: java.lang.Object transform(java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DebuggingClassWriter: byte[] toByteArray()> => <java.security.AccessController: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DebuggingClassWriter: byte[] toByteArray()> => <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
Found static invoke: <net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void string_switch(net.sf.cglib.core.CodeEmitter,java.lang.String[],int,net.sf.cglib.core.ObjectSwitchCallback)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void load_class(net.sf.cglib.core.CodeEmitter,org.objectweb.asm.Type)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void push_object(net.sf.cglib.core.CodeEmitter,java.lang.Object)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void push_object(net.sf.cglib.core.CodeEmitter,java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void add_properties(net.sf.cglib.core.ClassEmitter,java.lang.String[],org.objectweb.asm.Type[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void add_property(net.sf.cglib.core.ClassEmitter,java.lang.String,org.objectweb.asm.Type,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void wrap_undeclared_throwable(net.sf.cglib.core.CodeEmitter,net.sf.cglib.core.Block,org.objectweb.asm.Type[],org.objectweb.asm.Type)> => <java.util.Collections: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void wrap_undeclared_throwable(net.sf.cglib.core.CodeEmitter,net.sf.cglib.core.Block,org.objectweb.asm.Type[],org.objectweb.asm.Type)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found static invoke: <net.sf.cglib.core.EmitUtils: void wrap_undeclared_throwable(net.sf.cglib.core.CodeEmitter,net.sf.cglib.core.Block,org.objectweb.asm.Type[],org.objectweb.asm.Type)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void wrap_undeclared_throwable(net.sf.cglib.core.CodeEmitter,net.sf.cglib.core.Block,org.objectweb.asm.Type[],org.objectweb.asm.Type)> => <java.util.HashSet: void <clinit>()>
Found static invoke: <net.sf.cglib.core.KeyFactory: net.sf.cglib.core.KeyFactory create(java.lang.ClassLoader,java.lang.Class,net.sf.cglib.core.Customizer)> => <java.util.Collections: void <clinit>()>
Found static invoke: <net.sf.cglib.core.KeyFactory: net.sf.cglib.core.KeyFactory create(java.lang.ClassLoader,java.lang.Class,net.sf.cglib.core.Customizer)> => <java.util.Collections: java.util.List emptyList()>
Found static invoke: <net.sf.cglib.core.internal.CustomizerRegistry: void add(net.sf.cglib.core.KeyFactoryCustomizer)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.core.internal.CustomizerRegistry: java.util.List get(java.lang.Class)> => <java.util.Collections: void <clinit>()>
Found static invoke: <net.sf.cglib.core.internal.CustomizerRegistry: java.util.List get(java.lang.Class)> => <java.util.Collections: java.util.List emptyList()>
Found static invoke: <net.sf.cglib.core.internal.CustomizerRegistry: net.sf.cglib.core.internal.CustomizerRegistry singleton(net.sf.cglib.core.Customizer)> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.core.internal.LoadingCache: void <init>(net.sf.cglib.core.internal.Function,net.sf.cglib.core.internal.Function)> => <java.util.concurrent.ConcurrentHashMap: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CodeEmitter: void catch_exception(net.sf.cglib.core.Block,org.objectweb.asm.Type)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CodeEmitter: void if_cmp(org.objectweb.asm.Type,int,org.objectweb.asm.Label)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CodeEmitter: void if_cmp(org.objectweb.asm.Type,int,org.objectweb.asm.Label)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CodeEmitter: void push(int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CodeEmitter: void push(int)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CodeEmitter: void push(long)> => <java.lang.Long: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CodeEmitter: void push(float)> => <java.lang.Float: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CodeEmitter: void push(double)> => <java.lang.Double: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CodeEmitter: void load_this()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)> => <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>
Found static invoke: <net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.core.CodeEmitter: void process_switch(int[],net.sf.cglib.core.ProcessSwitchCallback,boolean)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DefaultNamingPolicy: java.lang.String getClassName(java.lang.String,java.lang.String,java.lang.Object,net.sf.cglib.core.Predicate)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DefaultNamingPolicy: java.lang.String getClassName(java.lang.String,java.lang.String,java.lang.Object,net.sf.cglib.core.Predicate)> => <java.lang.Integer: java.lang.String toHexString(int)>
Found static invoke: <net.sf.cglib.core.DefaultNamingPolicy: java.lang.String getClassName(java.lang.String,java.lang.String,java.lang.Object,net.sf.cglib.core.Predicate)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DefaultNamingPolicy: java.lang.String getClassName(java.lang.String,java.lang.String,java.lang.Object,net.sf.cglib.core.Predicate)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils$14: void processCase(int,org.objectweb.asm.Label)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils$14: void processCase(int,org.objectweb.asm.Label)> => <java.util.BitSet: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils$5: java.lang.Object transform(java.lang.Object)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> => <java.io.FileOutputStream: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DebuggingClassWriter$1: java.lang.Object run()> => <java.io.File: void <clinit>()>
Found static invoke: <net.sf.cglib.core.VisibilityPredicate: boolean evaluate(java.lang.Object)> => <java.lang.reflect.Modifier: boolean isProtected(int)>
Found static invoke: <net.sf.cglib.core.VisibilityPredicate: boolean evaluate(java.lang.Object)> => <java.lang.reflect.Modifier: boolean isPublic(int)>
Found static invoke: <net.sf.cglib.core.VisibilityPredicate: boolean evaluate(java.lang.Object)> => <java.lang.reflect.Modifier: boolean isPrivate(int)>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: java.lang.ClassLoader getClassLoader()> => <java.lang.Thread: void <clinit>()>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: java.lang.ClassLoader getClassLoader()> => <java.lang.Thread: java.lang.Thread currentThread()>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: java.lang.ClassLoader getClassLoader()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ClassEmitter: void begin_class(int,int,java.lang.String,org.objectweb.asm.Type,org.objectweb.asm.Type[],java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ClassEmitter: net.sf.cglib.core.CodeEmitter getStaticHook()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ClassEmitter: net.sf.cglib.core.CodeEmitter getStaticHook()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ClassEmitter: net.sf.cglib.core.CodeEmitter begin_method(int,net.sf.cglib.core.Signature,org.objectweb.asm.Type[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ClassEmitter: net.sf.cglib.core.CodeEmitter begin_method(int,net.sf.cglib.core.Signature,org.objectweb.asm.Type[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,org.objectweb.asm.Type,java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,org.objectweb.asm.Type,java.lang.Object)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.WeakCacheKey: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DuplicatesPredicate: void <init>()> => <java.util.HashSet: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DuplicatesPredicate: void <init>()> => <java.util.Collections: java.util.Set emptySet()>
Found static invoke: <net.sf.cglib.core.DuplicatesPredicate: void <init>()> => <java.util.Collections: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DuplicatesPredicate: void <init>(java.util.List)> => <java.util.HashSet: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DuplicatesPredicate: void <init>(java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DuplicatesPredicate: void <init>(java.util.List)> => <java.util.HashSet: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.ClassTransformerChain: java.lang.String toString()> => <java.lang.StringBuffer: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.ClassTransformerChain: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.AddPropertyTransformer: void <init>(java.util.Map)> => <java.lang.String: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.AccessFieldTransformer: void declare_field(int,java.lang.String,org.objectweb.asm.Type,java.lang.Object)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.UndeclaredThrowableTransformer: void <init>(java.lang.Class)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.UndeclaredThrowableTransformer: void <init>(java.lang.Class)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.AddInitTransformer: void <init>(java.lang.reflect.Method)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.AddInitTransformer: void <init>(java.lang.reflect.Method)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.AddStaticInitTransformer: void <init>(java.lang.reflect.Method)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.AddStaticInitTransformer: void <init>(java.lang.reflect.Method)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.AddStaticInitTransformer: void <init>(java.lang.reflect.Method)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.AddStaticInitTransformer: void <init>(java.lang.reflect.Method)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.AddDelegateTransformer: void <init>(java.lang.Class[],java.lang.Class)> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.AddDelegateTransformer: void <init>(java.lang.Class[],java.lang.Class)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.AddDelegateTransformer: void begin_class(int,int,java.lang.String,org.objectweb.asm.Type,org.objectweb.asm.Type[],java.lang.String)> => <java.lang.reflect.Modifier: boolean isAbstract(int)>
Found static invoke: <net.sf.cglib.transform.impl.FieldProviderTransformer: void end_class()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.AbstractClassLoader: java.lang.Class loadClass(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.AbstractClassLoader: java.lang.Class loadClass(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.AbstractClassLoader: java.lang.Class loadClass(java.lang.String)> => <java.lang.ClassLoader: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.AbstractClassLoader: java.lang.Class loadClass(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.AbstractClassLoader: java.lang.Class loadClass(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.AbstractClassLoader: java.lang.Class loadClass(java.lang.String)> => <java.lang.ClassNotFoundException: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.AbstractClassLoader: java.lang.Class loadClass(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.AbstractClassLoader: java.lang.Class loadClass(java.lang.String)> => <java.lang.ClassNotFoundException: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackHelper: void <init>(java.lang.Class,java.lang.Class[])> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackHelper: void <init>(java.lang.Class,java.lang.Class[])> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackHelper: void <init>(java.lang.Class,java.lang.Class[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackHelper: void <init>(java.lang.Class,java.lang.Class[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackHelper: void <init>(java.lang.Class,java.lang.Class[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackHelper: net.sf.cglib.proxy.Callback[] getCallbacks()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackHelper: java.lang.Class[] getCallbackTypes()> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackHelper: java.lang.Class[] getCallbackTypes()> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MixinEmitter: void <init>(org.objectweb.asm.ClassVisitor,java.lang.String,java.lang.Class[],int[])> => <java.util.HashSet: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer$EnhancerFactoryData: void <init>(java.lang.Class,java.lang.Class[],boolean)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer$EnhancerFactoryData: java.lang.Object newInstance(java.lang.Class[],java.lang.Object[],net.sf.cglib.proxy.Callback[])> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer$EnhancerFactoryData: java.lang.Object newInstance(java.lang.Class[],java.lang.Object[],net.sf.cglib.proxy.Callback[])> => <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>
Found static invoke: <net.sf.cglib.proxy.Mixin$Generator: void setStyle(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Mixin$Generator: void setStyle(int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Mixin$Generator: net.sf.cglib.proxy.Mixin create()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Mixin$Generator: net.sf.cglib.proxy.Mixin create()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Mixin$Generator: net.sf.cglib.proxy.Mixin create()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Mixin$Generator: net.sf.cglib.proxy.Mixin create()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.BridgeMethodResolver: java.util.Map resolveAll()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void setSuperclass(java.lang.Class)> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void setCallbacks(net.sf.cglib.proxy.Callback[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void setCallbackType(java.lang.Class)> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void setCallbackTypes(java.lang.Class[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: java.lang.Object create(java.lang.Class[],java.lang.Object[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.util.HashSet: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Proxy: net.sf.cglib.proxy.InvocationHandler getInvocationHandler(java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],net.sf.cglib.proxy.InvocationHandler)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],net.sf.cglib.proxy.InvocationHandler)> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.LazyLoaderGenerator: void generate(net.sf.cglib.core.ClassEmitter,net.sf.cglib.proxy.CallbackGenerator$Context,java.util.List)> => <java.util.HashSet: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.LazyLoaderGenerator: void generate(net.sf.cglib.core.ClassEmitter,net.sf.cglib.proxy.CallbackGenerator$Context,java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.LazyLoaderGenerator: void generate(net.sf.cglib.core.ClassEmitter,net.sf.cglib.proxy.CallbackGenerator$Context,java.util.List)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MethodInterceptorGenerator: void generateFindProxy(net.sf.cglib.core.ClassEmitter,java.util.Map)> => <java.lang.String: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MethodProxy: net.sf.cglib.proxy.MethodProxy find(java.lang.Class,net.sf.cglib.core.Signature)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MethodProxy: net.sf.cglib.proxy.MethodProxy find(java.lang.Class,net.sf.cglib.core.Signature)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MethodProxy: net.sf.cglib.proxy.MethodProxy find(java.lang.Class,net.sf.cglib.core.Signature)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MethodProxy: net.sf.cglib.proxy.MethodProxy find(java.lang.Class,net.sf.cglib.core.Signature)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MethodProxy: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MethodProxy: java.lang.Object invoke(java.lang.Object,java.lang.Object[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BeanCopier$Generator: void setSource(java.lang.Class)> => <java.lang.reflect.Modifier: boolean isPublic(int)>
Found static invoke: <net.sf.cglib.beans.BeanCopier$Generator: void setTarget(java.lang.Class)> => <java.lang.reflect.Modifier: boolean isPublic(int)>
Found static invoke: <net.sf.cglib.beans.BeanGenerator: void addProperty(java.lang.String,java.lang.Class)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BeanGenerator: void addProperty(java.lang.String,java.lang.Class)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BeanGenerator: void generateClass(org.objectweb.asm.ClassVisitor)> => <java.lang.String: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.FixedKeySet: void <init>(java.lang.String[])> => <java.util.HashSet: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.FixedKeySet: void <init>(java.lang.String[])> => <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
Found static invoke: <net.sf.cglib.beans.FixedKeySet: void <init>(java.lang.String[])> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found static invoke: <net.sf.cglib.beans.FixedKeySet: void <init>(java.lang.String[])> => <java.util.Collections: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.FixedKeySet: void <init>(java.lang.String[])> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BulkBeanEmitter: void <init>(org.objectweb.asm.ClassVisitor,java.lang.String,java.lang.Class,java.lang.String[],java.lang.String[],java.lang.Class[])> => <java.lang.reflect.AccessibleObject: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BeanMap: void clear()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BeanMap: java.lang.Object remove(java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BeanMap: java.util.Set entrySet()> => <java.util.Collections: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BeanMap: java.util.Set entrySet()> => <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
Found static invoke: <net.sf.cglib.beans.BeanMap: java.util.Collection values()> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BeanMap: java.util.Collection values()> => <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>
Found static invoke: <net.sf.cglib.beans.BeanMap: java.util.Collection values()> => <java.util.Collections: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BeanMap: java.lang.String toString()> => <java.lang.StringBuffer: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BeanMap: java.lang.String toString()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BeanMap$Generator: net.sf.cglib.beans.BeanMap create()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: void <clinit>()> => <java.lang.ThreadLocal: void <clinit>()>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: void <clinit>()> => <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: void <clinit>()> => <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: void <clinit>()> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: void <clinit>()> => <java.lang.System: void <clinit>()>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: void <clinit>()> => <java.util.WeakHashMap: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.lang.Short: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.lang.Long: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.lang.Float: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.lang.Double: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.lang.Character: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.lang.Byte: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.lang.String: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.security.AccessController: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: void <clinit>()> => <java.security.AccessController: void <clinit>()>
Found static invoke: <net.sf.cglib.core.Constants: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ClassNameReader: void <clinit>()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: java.lang.String map(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: java.lang.String map(java.lang.String)> => <java.lang.StringBuffer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: java.lang.String map(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.TypeUtils: java.util.List parseTypes(java.lang.String,int,int)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.core.KeyFactory$Generator: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class[] parseTypes(java.lang.String,java.lang.ClassLoader)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class[] parseTypes(java.lang.String,java.lang.ClassLoader)> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)> => <java.beans.Introspector: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)> => <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class,java.lang.Class)>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getPropertiesHelper(java.lang.Class,boolean,boolean)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ClassesKey: java.lang.String[] classNames(java.lang.Object[])> => <java.lang.String: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void string_switch_hash(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback,boolean)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found static invoke: <net.sf.cglib.core.EmitUtils: void string_switch_trie(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void string_switch_trie(net.sf.cglib.core.CodeEmitter,java.lang.String[],net.sf.cglib.core.ObjectSwitchCallback)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found static invoke: <net.sf.cglib.core.EmitUtils: void load_class_helper(net.sf.cglib.core.CodeEmitter,org.objectweb.asm.Type)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void member_switch_helper(net.sf.cglib.core.CodeEmitter,java.util.List,net.sf.cglib.core.ObjectSwitchCallback,boolean)> => <java.lang.String: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: void member_switch_helper(net.sf.cglib.core.CodeEmitter,java.util.List,net.sf.cglib.core.ObjectSwitchCallback,boolean)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DefaultNamingPolicy: void <clinit>()> => <java.lang.Boolean: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DefaultNamingPolicy: void <clinit>()> => <java.lang.Boolean: boolean getBoolean(java.lang.String)>
Found static invoke: <net.sf.cglib.core.DebuggingClassWriter: void <clinit>()> => <java.lang.System: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DebuggingClassWriter: void <clinit>()> => <java.lang.Class: java.lang.Class forName(java.lang.String)>
Found static invoke: <net.sf.cglib.core.DebuggingClassWriter: void <clinit>()> => <java.lang.System: java.lang.String getProperty(java.lang.String)>
Found static invoke: <net.sf.cglib.core.DebuggingClassWriter: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DebuggingClassWriter: void <clinit>()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DuplicatesPredicate: java.lang.ClassLoader getClassLoader(java.lang.Class)> => <java.lang.Thread: void <clinit>()>
Found static invoke: <net.sf.cglib.core.DuplicatesPredicate: java.lang.ClassLoader getClassLoader(java.lang.Class)> => <java.lang.Thread: java.lang.Thread currentThread()>
Found static invoke: <net.sf.cglib.transform.AbstractClassLoader: void <clinit>()> => <java.security.AccessController: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.AbstractClassLoader: void <clinit>()> => <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>
Found static invoke: <net.sf.cglib.transform.AbstractClassLoader: void <clinit>()> => <java.lang.ClassLoader: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Mixin: void <clinit>()> => <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
Found static invoke: <net.sf.cglib.proxy.Mixin: void <clinit>()> => <java.util.Collections: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackInfo: org.objectweb.asm.Type determineType(java.lang.Class,boolean)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackInfo: org.objectweb.asm.Type determineType(java.lang.Class,boolean)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackInfo: org.objectweb.asm.Type determineType(java.lang.Class,boolean)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackInfo: org.objectweb.asm.Type determineType(java.lang.Class,boolean)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackInfo: org.objectweb.asm.Type determineType(net.sf.cglib.proxy.Callback,boolean)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackInfo: net.sf.cglib.proxy.CallbackGenerator getGenerator(org.objectweb.asm.Type)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.CallbackInfo: net.sf.cglib.proxy.CallbackGenerator getGenerator(org.objectweb.asm.Type)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: java.lang.String getCallbackField(int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void setCallbacksHelper(java.lang.Class,net.sf.cglib.proxy.Callback[],java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void setCallbacksHelper(java.lang.Class,net.sf.cglib.proxy.Callback[],java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void setCallbacksHelper(java.lang.Class,net.sf.cglib.proxy.Callback[],java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void setCallbacksHelper(java.lang.Class,net.sf.cglib.proxy.Callback[],java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: java.lang.reflect.Method getCallbacksSetter(java.lang.Class,java.lang.String)> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MethodInterceptorGenerator: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MethodInterceptorGenerator: void superHelper(net.sf.cglib.core.CodeEmitter,net.sf.cglib.core.MethodInfo,net.sf.cglib.proxy.CallbackGenerator$Context)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.ImmutableBean: void <clinit>()> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BulkBeanEmitter: void validate(java.lang.Class,java.lang.String[],java.lang.String[],java.lang.Class[],java.lang.reflect.Method[],java.lang.reflect.Method[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BulkBeanEmitter: void validate(java.lang.Class,java.lang.String[],java.lang.String[],java.lang.Class[],java.lang.reflect.Method[],java.lang.reflect.Method[])> => <java.lang.reflect.Modifier: boolean isPrivate(int)>
Found static invoke: <net.sf.cglib.beans.BulkBeanEmitter: void validate(java.lang.Class,java.lang.String[],java.lang.String[],java.lang.Class[],java.lang.reflect.Method[],java.lang.reflect.Method[])> => <java.lang.reflect.Modifier: boolean isPrivate(int)>
Found static invoke: <net.sf.cglib.beans.BulkBeanEmitter: void validate(java.lang.Class,java.lang.String[],java.lang.String[],java.lang.Class[],java.lang.reflect.Method[],java.lang.reflect.Method[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BulkBeanEmitter: void validate(java.lang.Class,java.lang.String[],java.lang.String[],java.lang.Class[],java.lang.reflect.Method[],java.lang.reflect.Method[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BulkBeanEmitter: void validate(java.lang.Class,java.lang.String[],java.lang.String[],java.lang.Class[],java.lang.reflect.Method[],java.lang.reflect.Method[])> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BulkBeanEmitter: void validate(java.lang.Class,java.lang.String[],java.lang.String[],java.lang.Class[],java.lang.reflect.Method[],java.lang.reflect.Method[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BulkBeanEmitter: void validate(java.lang.Class,java.lang.String[],java.lang.String[],java.lang.Class[],java.lang.reflect.Method[],java.lang.reflect.Method[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BulkBeanEmitter: void validate(java.lang.Class,java.lang.String[],java.lang.String[],java.lang.Class[],java.lang.reflect.Method[],java.lang.reflect.Method[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])> => <java.lang.StringBuffer: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])> => <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])> => <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])> => <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])> => <java.lang.ClassNotFoundException: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ReflectUtils: java.lang.Class getClass(java.lang.String,java.lang.ClassLoader,java.lang.String[])> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: int[] getSwitchKeys(java.util.Map)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.core.EmitUtils: int[] getSwitchKeys(java.util.Map)> => <java.util.Arrays: void sort(int[])>
Found static invoke: <net.sf.cglib.core.EmitUtils: void member_helper_type(net.sf.cglib.core.CodeEmitter,java.util.List,net.sf.cglib.core.ObjectSwitchCallback,net.sf.cglib.core.EmitUtils$ParameterTyper,org.objectweb.asm.Label,org.objectweb.asm.Label,java.util.BitSet)> => <java.lang.String: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.InterceptFieldTransformer: net.sf.cglib.core.Signature writeMethodSig(java.lang.String,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.InterceptFieldTransformer: net.sf.cglib.core.Signature readMethodSig(java.lang.String,java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: java.lang.Object create(java.lang.Object)> => <java.util.WeakHashMap: void <clinit>()>
Found static invoke: <net.sf.cglib.util.ParallelSorter: void chooseComparer(int,java.util.Comparator)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.util.ParallelSorter: void chooseComparer(int,java.util.Comparator)> => <java.lang.Byte: void <clinit>()>
Found static invoke: <net.sf.cglib.util.ParallelSorter: void chooseComparer(int,java.util.Comparator)> => <java.lang.Short: void <clinit>()>
Found static invoke: <net.sf.cglib.util.ParallelSorter: void chooseComparer(int,java.util.Comparator)> => <java.lang.Float: void <clinit>()>
Found static invoke: <net.sf.cglib.util.ParallelSorter: void chooseComparer(int,java.util.Comparator)> => <java.lang.Double: void <clinit>()>
Found static invoke: <net.sf.cglib.util.ParallelSorter: void chooseComparer(int,java.util.Comparator)> => <java.lang.Long: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.FastMethod: int helper(net.sf.cglib.reflect.FastClass,java.lang.reflect.Method)> => <java.lang.System: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.FastMethod: int helper(net.sf.cglib.reflect.FastClass,java.lang.reflect.Method)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.FastMethod: int helper(net.sf.cglib.reflect.FastClass,java.lang.reflect.Method)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.KeyFactory$Generator: java.lang.String getFieldName(int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: java.lang.Class generate(net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: java.lang.Class generate(net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: java.lang.Class generate(net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.internal.LoadingCache: java.lang.Object createEntry(java.lang.Object,java.lang.Object,java.lang.Object)> => <java.util.concurrent.FutureTask: void <clinit>()>
Found static invoke: <net.sf.cglib.core.internal.LoadingCache: java.lang.Object createEntry(java.lang.Object,java.lang.Object,java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.internal.LoadingCache: java.lang.Object createEntry(java.lang.Object,java.lang.Object,java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ClassEmitter: net.sf.cglib.core.ClassEmitter$FieldInfo getFieldInfo(java.lang.String)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.ClassEmitter: net.sf.cglib.core.ClassEmitter$FieldInfo getFieldInfo(java.lang.String)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.LocalVariablesSorter: int remap(int,int)> => <java.lang.Math: void <clinit>()>
Found static invoke: <net.sf.cglib.core.LocalVariablesSorter: int remap(int,int)> => <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
Found static invoke: <net.sf.cglib.core.LocalVariablesSorter: int remap(int,int)> => <java.lang.Math: int max(int,int)>
Found static invoke: <net.sf.cglib.core.LocalVariablesSorter: int remap(int,int)> => <java.lang.System: void <clinit>()>
Found static invoke: <net.sf.cglib.core.LocalVariablesSorter: int remap(int)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.core.LocalVariablesSorter: int remap(int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.core.AbstractClassGenerator: java.lang.Object wrapCachedClass(java.lang.Class)> => <java.lang.ref.Reference: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: java.lang.Object wrapCachedClass(java.lang.Class)> => <java.lang.ref.Reference: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: java.lang.Object wrapCachedClass(java.lang.Class)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: java.lang.Object wrapCachedClass(java.lang.Class)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.InterceptFieldTransformer: net.sf.cglib.core.Signature readCallbackSig(org.objectweb.asm.Type)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.InterceptFieldTransformer: net.sf.cglib.core.Signature writeCallbackSig(org.objectweb.asm.Type)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.AddDelegateTransformer: void addDelegate(java.lang.reflect.Method)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.AddDelegateTransformer: void addDelegate(java.lang.reflect.Method)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.AddDelegateTransformer: void addDelegate(java.lang.reflect.Method)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.transform.impl.FieldProviderTransformer: void generate()> => <java.lang.String: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MixinEverythingEmitter: java.lang.Class[] getInterfaces(java.lang.Class[])> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MixinEverythingEmitter: java.lang.Class[] getInterfaces(java.lang.Class[])> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MixinEverythingEmitter: java.lang.reflect.Method[] getMethods(java.lang.Class)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MixinEverythingEmitter: java.lang.reflect.Method[] getMethods(java.lang.Class)> => <java.util.Arrays: java.util.List asList(java.lang.Object[])>
Found static invoke: <net.sf.cglib.proxy.MixinEverythingEmitter: java.lang.reflect.Method[] getMethods(java.lang.Class)> => <java.lang.reflect.AccessibleObject: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MixinEverythingEmitter: java.lang.reflect.Method[] getMethods(java.lang.Class)> => <java.util.Arrays: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer$EnhancerFactoryData: void setThreadCallbacks(net.sf.cglib.proxy.Callback[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer$EnhancerFactoryData: void setThreadCallbacks(net.sf.cglib.proxy.Callback[])> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: java.lang.Object createHelper()> => <java.lang.ref.Reference: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void filterConstructors(java.lang.Class,java.util.List)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void filterConstructors(java.lang.Class,java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void emitMethods(net.sf.cglib.core.ClassEmitter,java.util.List,java.util.List)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void emitMethods(net.sf.cglib.core.ClassEmitter,java.util.List,java.util.List)> => <java.util.HashSet: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void emitMethods(net.sf.cglib.core.ClassEmitter,java.util.List,java.util.List)> => <java.util.HashSet: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void emitMethods(net.sf.cglib.core.ClassEmitter,java.util.List,java.util.List)> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void emitMethods(net.sf.cglib.core.ClassEmitter,java.util.List,java.util.List)> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void emitMethods(net.sf.cglib.core.ClassEmitter,java.util.List,java.util.List)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void emitMethods(net.sf.cglib.core.ClassEmitter,java.util.List,java.util.List)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void emitConstructors(net.sf.cglib.core.ClassEmitter,java.util.List)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void emitDefaultConstructor(net.sf.cglib.core.ClassEmitter)> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void emitDefaultConstructor(net.sf.cglib.core.ClassEmitter)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.LazyLoaderGenerator: net.sf.cglib.core.Signature loadMethod(int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MethodInterceptorGenerator: java.lang.String getMethodField(net.sf.cglib.core.Signature)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.MethodInterceptorGenerator: java.lang.String getMethodProxyField(net.sf.cglib.core.Signature)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BeanMapEmitter: java.lang.String[] getNames(java.util.Map)> => <java.lang.String: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Mixin$Route: void <init>(java.lang.Object[])> => <java.util.ArrayList: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Mixin$Route: void <init>(java.lang.Object[])> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Mixin$Route: void <init>(java.lang.Object[])> => <java.lang.Integer: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: net.sf.cglib.core.Signature rename(net.sf.cglib.core.Signature,int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.FastClass$Generator: java.lang.Object firstInstance(java.lang.Class)> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BulkBean$Generator: java.lang.Object firstInstance(java.lang.Class)> => <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
Found static invoke: <net.sf.cglib.beans.BulkBean$Generator: java.lang.Object firstInstance(java.lang.Class)> => <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
Found static invoke: <net.sf.cglib.beans.BulkBean$Generator: java.lang.Object firstInstance(java.lang.Class)> => <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
Found static invoke: <net.sf.cglib.beans.BulkBean$Generator: java.lang.Object firstInstance(java.lang.Class)> => <java.lang.Class: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BulkBean$Generator: java.lang.Object firstInstance(java.lang.Class)> => <java.lang.System: void <clinit>()>
Found static invoke: <net.sf.cglib.beans.BulkBean$Generator: java.lang.Object firstInstance(java.lang.Class)> => <java.lang.String: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.InterfaceMaker: java.lang.Object nextInstance(java.lang.Object)> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.util.ParallelSorterEmitter: java.lang.String getFieldName(int)> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.reflect.FastClassEmitter: void signatureSwitchHelper(net.sf.cglib.core.CodeEmitter,java.util.List)> => <java.lang.String: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void validate()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void validate()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void validate()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void validate()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void validate()> => <java.lang.AbstractStringBuilder: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void validate()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void validate()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void validate()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void validate()> => <java.lang.Throwable: void <clinit>()>
Found static invoke: <net.sf.cglib.proxy.Enhancer: void preValidate()> => <java.lang.Throwable: void <clinit>()>

Total static calls: 454
